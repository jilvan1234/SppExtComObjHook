; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28105.4 

	TITLE	C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Settings@@3UKMSServerSettings@@A		; Settings
PUBLIC	?AppIDList@@3PAUGUIDName@@A			; AppIDList
PUBLIC	??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@ ; `string'
PUBLIC	??_C@_1BG@HBCDHDOH@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA0@ ; `string'
PUBLIC	??_C@_1BG@GDJGNMAJ@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA3@ ; `string'
PUBLIC	??_C@_1BG@FEEICMDL@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA6@ ; `string'
PUBLIC	??_C@_1BG@MCLDMGN@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA9@ ; `string'
msvcjmc	SEGMENT
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__376EBCA0_winioctl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2CCBBE23_propidl@h DB 01H
__AD360DAF_oleauto@h DB 01H
__0396F1A5_stralign@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__1170C9B3_kms@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?HostOS@@3QBUKMSHostOS@@B DW 0d701H			; HostOS
	DW	01772H
	DW	092H
	DW	07d9H
	DQ	000000004a1b3100H
	DW	0d701H
	DW	01db1H
	DW	035H
	DW	07dbH
	DQ	000000004e28bd80H
	DW	01532H
	DW	023f0H
	DW	0f8H
	DW	07dcH
	DQ	0000000050454480H
	DW	01901H
	DW	02580H
	DW	0122H
	DW	07ddH
	DQ	00000000525f2880H
	DW	0e1cH
	DW	03839H
	DW	011eH
	DW	07e0H
	DQ	0000000057fd7d00H
	DW	0e1cH
	DW	04563H
	DW	0113H
	DW	07e2H
	DQ	000000005bb2b500H
?pkeyconfig@@3QBUPKEYCONFIG@@B DW 098H			; pkeyconfig
	ORG $+2
	DD	016b59940H
	DD	0176cb43fH
	DW	0a8H
	ORG $+2
	DD	0122dee40H
	DD	0129a92bfH
	DW	0ceH
	ORG $+2
	DD	090f5600H
	DD	0b71afffH
	DW	0ceH
	ORG $+2
	DD	0102721c0H
	DD	012897bbfH
	DW	0ceH
	ORG $+2
	DD	01d4410c0H
	DD	01fa66abfH
	DW	0ceH
	ORG $+2
	DD	020d797c0H
	DD	02208c4bfH
	DW	060H
	ORG $+2
	DD	0bdc7fc0H
	DD	0cfe6a7fH
	DW	0ceH
	ORG $+2
	DD	0df28e80H
	DD	0f423fffH
	DW	0ceH
	ORG $+2
	DD	01a0c1740H
	DD	01b5bc8bfH
	DW	0ceH
	ORG $+2
	DD	027b25a80H
	DD	028e3877fH
	DW	0ceH
	ORG $+2
	DD	02b4238H
	DD	02b9057H
	DW	0f12H
	ORG $+2
	DD	00H
	DD	0e4e1bfH
?APP_ID_WINDOWS@@3U_GUID@@B DD 055c92734H		; APP_ID_WINDOWS
	DW	0d682H
	DW	04d71H
	DB	098H
	DB	03eH
	DB	0d6H
	DB	0ecH
	DB	03fH
	DB	016H
	DB	05H
	DB	09fH
?APP_ID_OFFICE14@@3U_GUID@@B DD 059a52881H		; APP_ID_OFFICE14
	DW	0a989H
	DW	0479dH
	DB	0afH
	DB	046H
	DB	0f2H
	DB	075H
	DB	0c6H
	DB	037H
	DB	06H
	DB	063H
?APP_ID_OFFICE15@@3U_GUID@@B DD 0ff1ce15H		; APP_ID_OFFICE15
	DW	0a989H
	DW	0479dH
	DB	0afH
	DB	046H
	DB	0f2H
	DB	075H
	DB	0c6H
	DB	037H
	DB	06H
	DB	063H
?KMS_ID_OFFICE_2010@@3U_GUID@@B DD 0e85af946H		; KMS_ID_OFFICE_2010
	DW	02e25H
	DW	047b7H
	DB	083H
	DB	0e1H
	DB	0beH
	DB	0bcH
	DB	0ebH
	DB	0eaH
	DB	0c6H
	DB	011H
?KMS_ID_OFFICE_2013@@3U_GUID@@B DD 0e6a6f1bfH		; KMS_ID_OFFICE_2013
	DW	09d40H
	DW	040c3H
	DB	0aaH
	DB	09fH
	DB	0c7H
	DB	07bH
	DB	0a2H
	DB	015H
	DB	078H
	DB	0c0H
?KMS_ID_OFFICE_2016@@3U_GUID@@B DD 085b5f61bH		; KMS_ID_OFFICE_2016
	DW	0320bH
	DW	04be3H
	DB	081H
	DB	04aH
	DB	0b7H
	DB	06bH
	DB	02bH
	DB	0faH
	DB	0fcH
	DB	082H
?KMS_ID_OFFICE_2019@@3U_GUID@@B DD 0617d9eb1H		; KMS_ID_OFFICE_2019
	DW	0ef36H
	DW	04f82H
	DB	086H
	DB	0e0H
	DB	0a6H
	DB	05aH
	DB	0e0H
	DB	07bH
	DB	096H
	DB	0c6H
?KMS_ID_WINDOWS_VISTA@@3U_GUID@@B DD 0212a64dcH		; KMS_ID_WINDOWS_VISTA
	DW	043b1H
	DW	04d3dH
	DB	0a3H
	DB	0cH
	DB	02fH
	DB	0c6H
	DB	09dH
	DB	020H
	DB	095H
	DB	0c6H
?KMS_ID_WINDOWS_7@@3U_GUID@@B DD 07fde5219H		; KMS_ID_WINDOWS_7
	DW	0fbfaH
	DW	0484aH
	DB	082H
	DB	0c9H
	DB	034H
	DB	0d1H
	DB	0adH
	DB	053H
	DB	0e8H
	DB	056H
?KMS_ID_WINDOWS_8_RETAIL@@3U_GUID@@B DD 0bbb97b3bH	; KMS_ID_WINDOWS_8_RETAIL
	DW	08ca4H
	DW	04a28H
	DB	097H
	DB	017H
	DB	089H
	DB	0faH
	DB	0bdH
	DB	042H
	DB	0c4H
	DB	0acH
?KMS_ID_WINDOWS_8_VOLUME@@3U_GUID@@B DD 03c40b358H	; KMS_ID_WINDOWS_8_VOLUME
	DW	05948H
	DW	045afH
	DB	092H
	DB	03bH
	DB	053H
	DB	0d2H
	DB	01fH
	DB	0ccH
	DB	07eH
	DB	079H
?KMS_ID_WINDOWS_81_RETAIL@@3U_GUID@@B DD 06d646890H	; KMS_ID_WINDOWS_81_RETAIL
	DW	03606H
	DW	0461aH
	DB	086H
	DB	0abH
	DB	059H
	DB	08bH
	DB	0b8H
	DB	04aH
	DB	0ceH
	DB	082H
?KMS_ID_WINDOWS_81_VOLUME@@3U_GUID@@B DD 0cb8fc780H	; KMS_ID_WINDOWS_81_VOLUME
	DW	02c05H
	DW	0495aH
	DB	097H
	DB	010H
	DB	085H
	DB	0afH
	DB	0ffH
	DB	0c9H
	DB	04H
	DB	0d7H
?KMS_ID_WINDOWS_10_RETAIL@@3U_GUID@@B DD 0e1c51358H	; KMS_ID_WINDOWS_10_RETAIL
	DW	0fe3eH
	DW	04203H
	DB	0a4H
	DB	0a2H
	DB	03bH
	DB	06bH
	DB	020H
	DB	0c9H
	DB	073H
	DB	04eH
?KMS_ID_WINDOWS_10_VOLUME@@3U_GUID@@B DD 058e2134fH	; KMS_ID_WINDOWS_10_VOLUME
	DW	08e11H
	DW	04d17H
	DB	09cH
	DB	0b2H
	DB	091H
	DB	06H
	DB	09cH
	DB	015H
	DB	011H
	DB	048H
?KMS_ID_WINDOWS_10_UNKNOWN@@3U_GUID@@B DD 0d27cd636H	; KMS_ID_WINDOWS_10_UNKNOWN
	DW	01962H
	DW	044e9H
	DB	08bH
	DB	04fH
	DB	027H
	DB	0b6H
	DB	0c2H
	DB	03eH
	DB	0fbH
	DB	085H
?KMS_ID_WINDOWS_10_LTSB_2016@@3U_GUID@@B DD 0969fe3c0H	; KMS_ID_WINDOWS_10_LTSB_2016
	DW	0a3ecH
	DW	0491aH
	DB	09fH
	DB	025H
	DB	042H
	DB	036H
	DB	05H
	DB	0deH
	DB	0b3H
	DB	065H
?KMS_ID_WINDOWS_10_LTSC_2019@@3U_GUID@@B DD 011b15659H	; KMS_ID_WINDOWS_10_LTSC_2019
	DW	0e603H
	DW	04cf1H
	DB	09cH
	DB	01fH
	DB	0f0H
	DB	0ecH
	DB	01H
	DB	0b8H
	DB	018H
	DB	088H
?KMS_ID_WINDOWS_10_GOV@@3U_GUID@@B DD 07ba0bf23H	; KMS_ID_WINDOWS_10_GOV
	DW	0d0f5H
	DW	04072H
	DB	091H
	DB	0d9H
	DB	0d5H
	DB	05aH
	DB	0f5H
	DB	0a4H
	DB	081H
	DB	0b6H
?KMS_ID_WINDOWS_SERVER_2008A@@3U_GUID@@B DD 033e156e4H	; KMS_ID_WINDOWS_SERVER_2008A
	DW	0b76fH
	DW	04a52H
	DB	09fH
	DB	091H
	DB	0f6H
	DB	041H
	DB	0ddH
	DB	095H
	DB	0acH
	DB	048H
?KMS_ID_WINDOWS_SERVER_2008B@@3U_GUID@@B DD 08fe53387H	; KMS_ID_WINDOWS_SERVER_2008B
	DW	03087H
	DW	04447H
	DB	089H
	DB	085H
	DB	0f7H
	DB	051H
	DB	032H
	DB	021H
	DB	05aH
	DB	0c9H
?KMS_ID_WINDOWS_SERVER_2008C@@3U_GUID@@B DD 08a21fdf3H	; KMS_ID_WINDOWS_SERVER_2008C
	DW	0cbc5H
	DW	044ebH
	DB	083H
	DB	0f3H
	DB	0feH
	DB	028H
	DB	04eH
	DB	066H
	DB	080H
	DB	0a7H
?KMS_ID_WINDOWS_SERVER_2008R2A@@3U_GUID@@B DD 0fc6ccafH	; KMS_ID_WINDOWS_SERVER_2008R2A
	DW	0ff0eH
	DW	04faeH
	DB	09dH
	DB	08H
	DB	043H
	DB	070H
	DB	078H
	DB	05bH
	DB	0f7H
	DB	0edH
?KMS_ID_WINDOWS_SERVER_2008R2B@@3U_GUID@@B DD 0ca87f5b6H ; KMS_ID_WINDOWS_SERVER_2008R2B
	DW	0cd46H
	DW	040c0H
	DB	0b0H
	DB	06dH
	DB	08eH
	DB	0cdH
	DB	057H
	DB	0a4H
	DB	037H
	DB	03fH
?KMS_ID_WINDOWS_SERVER_2008R2C@@3U_GUID@@B DD 0b2ca2689H ; KMS_ID_WINDOWS_SERVER_2008R2C
	DW	0a9a8H
	DW	042d7H
	DB	093H
	DB	08dH
	DB	0cfH
	DB	08eH
	DB	09fH
	DB	020H
	DB	019H
	DB	058H
?KMS_ID_WINDOWS_SERVER_2012@@3U_GUID@@B DD 08665cb71H	; KMS_ID_WINDOWS_SERVER_2012
	DW	0468cH
	DW	04aa3H
	DB	0a3H
	DB	037H
	DB	0cbH
	DB	09bH
	DB	0c9H
	DB	0d5H
	DB	0eaH
	DB	0acH
?KMS_ID_WINDOWS_SERVER_2012R2@@3U_GUID@@B DD 08456efd3H	; KMS_ID_WINDOWS_SERVER_2012R2
	DW	0c04H
	DW	04089H
	DB	087H
	DB	040H
	DB	05bH
	DB	072H
	DB	038H
	DB	053H
	DB	05aH
	DB	065H
?KMS_ID_WINDOWS_SERVER_2016@@3U_GUID@@B DD 06e9fc069H	; KMS_ID_WINDOWS_SERVER_2016
	DW	0257dH
	DW	04bc4H
	DB	0b4H
	DB	0a7H
	DB	075H
	DB	05H
	DB	014H
	DB	0d3H
	DB	027H
	DB	043H
?KMS_ID_WINDOWS_SERVER_2019@@3U_GUID@@B DD 08449b1fbH	; KMS_ID_WINDOWS_SERVER_2019
	DW	0f0eaH
	DW	0497aH
	DB	099H
	DB	0abH
	DB	066H
	DB	0caH
	DB	096H
	DB	0e9H
	DB	0a0H
	DB	0f5H
CONST	ENDS
;	COMDAT ??_C@_1BG@MCLDMGN@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA9@
CONST	SEGMENT
??_C@_1BG@MCLDMGN@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA9@ DB 'O'
	DB	00H, 'f', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, '9', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FEEICMDL@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA6@
CONST	SEGMENT
??_C@_1BG@FEEICMDL@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA6@ DB 'O'
	DB	00H, 'f', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, '6', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GDJGNMAJ@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA3@
CONST	SEGMENT
??_C@_1BG@GDJGNMAJ@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA3@ DB 'O'
	DB	00H, 'f', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HBCDHDOH@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA0@
CONST	SEGMENT
??_C@_1BG@HBCDHDOH@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA0@ DB 'O'
	DB	00H, 'f', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@
CONST	SEGMENT
??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@ DB 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?Settings@@3UKMSServerSettings@@A DD 01H		; Settings
	DD	078H
	DD	02760H
	ORG $+4
	DQ	3a1c049600b60076H
	DB	'R', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	00H, 00H
	ORG $+114
	DB	'R', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	00H, 00H
	ORG $+114
	DB	'R', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	00H, 00H
	ORG $+114
	ORG $+256
?AppIDList@@3PAUGUIDName@@A	ORG $+16			; AppIDList
	DD	FLAT:??_C@_1BA@HLGGGPNC@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs@
	ORG $+16
	DD	FLAT:??_C@_1BG@HBCDHDOH@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA0@
	ORG $+16
	DD	FLAT:??_C@_1BG@GDJGNMAJ@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA3@
	ORG $+16
	DD	FLAT:??_C@_1BG@FEEICMDL@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA6@
	ORG $+16
	DD	FLAT:??_C@_1BG@MCLDMGN@?$AAO?$AAf?$AAf?$AAi?$AAc?$AAe?$AA2?$AA0?$AA1?$AA9@
	ORG $+16
	DD	00H
_DATA	ENDS
PUBLIC	_MIDL_user_allocate@4
PUBLIC	_MIDL_user_free@4
PUBLIC	?ReadRegistrySettings@@YGKXZ			; ReadRegistrySettings
PUBLIC	?ActivationResponse@@YGHHPAEPAHPAPAE@Z		; ActivationResponse
PUBLIC	?GetKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z	; GetKMSPID
PUBLIC	?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z	; PackBaseResponse
PUBLIC	?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateBaseResponse
PUBLIC	?CreateResponseV4@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponseV4
PUBLIC	?CreateResponseV6@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponseV6
PUBLIC	?CreateResponse@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponse
PUBLIC	?GetKMSHost@@YGXQAUKMSBaseRequest@@PAH1@Z	; GetKMSHost
PUBLIC	?GenerateRandomKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z ; GenerateRandomKMSPID
PUBLIC	?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z	; ReadRegParameter
PUBLIC	?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_K_K3@Z	; ReadRegParameter
PUBLIC	?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_WI@Z	; ReadRegParameter
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1EO@DKENENAL@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAo?$AAt@ ; `string'
PUBLIC	??_C@_1EI@JCFEPELC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAL?$AAi?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1FI@CLJAJGPJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1EI@DDFIFPLB@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAV?$AAM?$AA?5?$AA?1@ ; `string'
PUBLIC	??_C@_1LO@KECHFOCG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAp?$AAp?$AAl@ ; `string'
PUBLIC	??_C@_1LO@EEINMAFO@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1LO@DJDIIKK@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ ; `string'
PUBLIC	??_C@_1LO@PGPANPPH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAC?$AAl?$AAi?$AAe@ ; `string'
PUBLIC	??_C@_1LO@LCFIDJEJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAe?$AAv@ ; `string'
PUBLIC	??_C@_1EK@NGPBGECF@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAW?$AAo?$AAr?$AAk@ ; `string'
PUBLIC	??_C@_1HO@HGDMBCIA@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAT?$AAi?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1GI@GPJNJLNN@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAq?$AAu@ ; `string'
PUBLIC	??_C@_1GM@HGJFMJBH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAs?$AAp@ ; `string'
PUBLIC	??_C@_1FI@BPHNMHII@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1FI@PBPELGEG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAn?$AAe@ ; `string'
PUBLIC	??_C@_1EK@HMAHJFAI@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ ; `string'
PUBLIC	??_C@_1FE@MIJEHOOC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ ; `string'
PUBLIC	??_C@_1FK@KHOLGLLO@?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA3?$AAu?$AA?9@ ; `string'
PUBLIC	??_C@_1O@PALHKBLM@?$AAR?$AAa?$AAn?$AAd?$AAo?$AAm@ ; `string'
PUBLIC	??_C@_1FE@EIPPBOAJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ ; `string'
PUBLIC	??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ ; `string'
PUBLIC	??_C@_1GA@FEEJLOL@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ ; `string'
PUBLIC	??_C@_1FE@JOKGPNBE@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ ; `string'
PUBLIC	??_C@_1JE@NKIDFBLD@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs@ ; `string'
PUBLIC	??_C@_1M@DFKENGJN@?$AA?$CF?$AAs?$AA?2?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_1FE@OFHIDGMN@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ ; `string'
PUBLIC	??_C@_1BM@FHNOIDDK@?$AAK?$AAM?$AAS?$AA_?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1CO@CHIGJHAC@?$AAK?$AAM?$AAS?$AA_?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI@ ; `string'
PUBLIC	??_C@_1CI@EACHPDAB@?$AAK?$AAM?$AAS?$AA_?$AAR?$AAe?$AAn?$AAe?$AAw?$AAa?$AAl?$AAI?$AAn?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1BC@DKAIFGB@?$AAK?$AAM?$AAS?$AA_?$AAH?$AAW?$AAI?$AAD@ ; `string'
EXTRN	__imp___errno:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_wcsrchr:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp___wcsicmp:PROC
EXTRN	__imp__OutputDebugStringW@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp__FileTimeToSystemTime@8:PROC
EXTRN	__imp__GetSystemDefaultLCID@0:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExW@20:PROC
EXTRN	__imp__RegQueryValueExW@24:PROC
EXTRN	__imp__wcstoul:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___time64:PROC
EXTRN	?GetV4Cmac@@YGXHPBEPAE@Z:PROC			; GetV4Cmac
EXTRN	?AesEncryptMessage@@YGHKPBEPAEPAKK@Z:PROC	; AesEncryptMessage
EXTRN	?AesDecryptMessage@@YGHKPBEPAEPAK@Z:PROC	; AesDecryptMessage
EXTRN	?GetSha256Hash@@YGHPBEKPAE@Z:PROC		; GetSha256Hash
EXTRN	?GetHmacKey@@YGXPB_KPAE@Z:PROC			; GetHmacKey
EXTRN	?GetHmacSha256@@YGHPBEK0PAE@Z:PROC		; GetHmacSha256
EXTRN	?GetRandomBytes@@YGHPAEK@Z:PROC			; GetRandomBytes
EXTRN	?XorBuffer@@YGXPBEPAE@Z:PROC			; XorBuffer
EXTRN	_swprintf_s:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__allrem:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_1BC@DKAIFGB@?$AAK?$AAM?$AAS?$AA_?$AAH?$AAW?$AAI?$AAD@
CONST	SEGMENT
??_C@_1BC@DKAIFGB@?$AAK?$AAM?$AAS?$AA_?$AAH?$AAW?$AAI?$AAD@ DB 'K', 00H, 'M'
	DB	00H, 'S', 00H, '_', 00H, 'H', 00H, 'W', 00H, 'I', 00H, 'D', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@EACHPDAB@?$AAK?$AAM?$AAS?$AA_?$AAR?$AAe?$AAn?$AAe?$AAw?$AAa?$AAl?$AAI?$AAn?$AAt?$AAe@
CONST	SEGMENT
??_C@_1CI@EACHPDAB@?$AAK?$AAM?$AAS?$AA_?$AAR?$AAe?$AAn?$AAe?$AAw?$AAa?$AAl?$AAI?$AAn?$AAt?$AAe@ DB 'K'
	DB	00H, 'M', 00H, 'S', 00H, '_', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'w', 00H, 'a', 00H, 'l', 00H, 'I', 00H, 'n', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@CHIGJHAC@?$AAK?$AAM?$AAS?$AA_?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI@
CONST	SEGMENT
??_C@_1CO@CHIGJHAC@?$AAK?$AAM?$AAS?$AA_?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI@ DB 'K'
	DB	00H, 'M', 00H, 'S', 00H, '_', 00H, 'A', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FHNOIDDK@?$AAK?$AAM?$AAS?$AA_?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1BM@FHNOIDDK@?$AAK?$AAM?$AAS?$AA_?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn@ DB 'K'
	DB	00H, 'M', 00H, 'S', 00H, '_', 00H, 'E', 00H, 'm', 00H, 'u', 00H
	DB	'l', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@OFHIDGMN@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
CONST	SEGMENT
??_C@_1FE@OFHIDGMN@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, ']', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'g', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '.', 00H, '.', 00H, '.'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DFKENGJN@?$AA?$CF?$AAs?$AA?2?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_1M@DFKENGJN@?$AA?$CF?$AAs?$AA?2?$AA?$CF?$AAs@ DB '%', 00H, 's', 00H
	DB	'\', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@NKIDFBLD@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs@
CONST	SEGMENT
??_C@_1JE@NKIDFBLD@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs@ DB 'S'
	DB	00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H, 'o'
	DB	00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, '\', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, ' '
	DB	00H, 'N', 00H, 'T', 00H, '\', 00H, 'C', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'V', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '\', 00H, 'I', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'e', 00H
	DB	'c', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, 'O', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@JOKGPNBE@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
CONST	SEGMENT
??_C@_1FE@JOKGPNBE@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, ']', 00H, ' ', 00H, 'F', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@FEEJLOL@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
CONST	SEGMENT
??_C@_1GA@FEEJLOL@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, ']', 00H, ' ', 00H, 'F', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0'
	DB	00H, '1', 00H, '6', 00H, 'I', 00H, '6', 00H, '4', 00H, 'X', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
CONST	SEGMENT
??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, ']', 00H, ' ', 00H, 'I', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, '.', 00H, '.', 00H, '.', 00H, ' ', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@EIPPBOAJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
CONST	SEGMENT
??_C@_1FE@EIPPBOAJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, ']', 00H, ' ', 00H, 'F', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'u'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@PALHKBLM@?$AAR?$AAa?$AAn?$AAd?$AAo?$AAm@
CONST	SEGMENT
??_C@_1O@PALHKBLM@?$AAR?$AAa?$AAn?$AAd?$AAo?$AAm@ DB 'R', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'm', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@KHOLGLLO@?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA3?$AAu?$AA?9@
CONST	SEGMENT
??_C@_1FK@KHOLGLLO@?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA3?$AAu?$AA?9@ DB '%'
	DB	00H, '0', 00H, '5', 00H, 'u', 00H, '-', 00H, '%', 00H, '0', 00H
	DB	'5', 00H, 'u', 00H, '-', 00H, '%', 00H, '0', 00H, '3', 00H, 'u'
	DB	00H, '-', 00H, '%', 00H, '0', 00H, '6', 00H, 'u', 00H, '-', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'u', 00H, '-', 00H, '%', 00H, 'u'
	DB	00H, '-', 00H, '%', 00H, 'u', 00H, '.', 00H, '0', 00H, '0', 00H
	DB	'0', 00H, '0', 00H, '-', 00H, '%', 00H, '0', 00H, '3', 00H, 'd'
	DB	00H, '%', 00H, '0', 00H, '4', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@MIJEHOOC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
CONST	SEGMENT
??_C@_1FE@MIJEHOOC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'K', 00H, 'M', 00H, 'S'
	DB	00H, ' ', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'H', 00H, 'W', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'0', 00H, '1', 00H, '6', 00H, 'I', 00H, '6', 00H, '4', 00H, 'X'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMAHJFAI@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
CONST	SEGMENT
??_C@_1EK@HMAHJFAI@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'K', 00H, 'M', 00H, 'S'
	DB	00H, ' ', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'e', 00H, 'P', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'l', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@PBPELGEG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAn?$AAe@
CONST	SEGMENT
??_C@_1FI@PBPELGEG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAn?$AAe@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 'w', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'I', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'u', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@BPHNMHII@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@
CONST	SEGMENT
??_C@_1FI@BPHNMHII@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'A', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'v', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'u', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@HGJFMJBH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAs?$AAp@
CONST	SEGMENT
??_C@_1GM@HGJFMJBH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAs?$AAp@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'p', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'N', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@GPJNJLNN@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAq?$AAu@
CONST	SEGMENT
??_C@_1GI@GPJNJLNN@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAq?$AAu@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H, 'N', 00H
	DB	' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 'm'
	DB	00H, 'u', 00H, 'm', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'i', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@HGDMBCIA@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAT?$AAi?$AAm?$AAe@
CONST	SEGMENT
??_C@_1HO@HGDMBCIA@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAT?$AAi?$AAm?$AAe@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'T', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	' ', 00H, '(', 00H, 'U', 00H, 'T', 00H, 'C', 00H, ')', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'd', 00H, '/', 00H, '%', 00H, '0', 00H, '2'
	DB	00H, 'd', 00H, '/', 00H, '%', 00H, '0', 00H, '2', 00H, 'd', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%'
	DB	00H, '0', 00H, '2', 00H, 'd', 00H, ':', 00H, '%', 00H, '0', 00H
	DB	'2', 00H, 'd', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NGPBGECF@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAW?$AAo?$AAr?$AAk@
CONST	SEGMENT
??_C@_1EK@NGPBGECF@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAW?$AAo?$AAr?$AAk@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'W', 00H, 'o', 00H, 'r'
	DB	00H, 'k', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'l', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@LCFIDJEJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAe?$AAv@
CONST	SEGMENT
??_C@_1LO@LCFIDJEJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAe?$AAv@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'o', 00H, 'u', 00H, 's', 00H, ' ', 00H
	DB	'C', 00H, 'M', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '{', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'h'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x'
	DB	00H, '}', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@PGPANPPH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAC?$AAl?$AAi?$AAe@
CONST	SEGMENT
??_C@_1LO@PGPANPPH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAC?$AAl?$AAi?$AAe@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'M', 00H, 'a', 00H
	DB	'c', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, 'I'
	DB	00H, 'D', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '{', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'h'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x'
	DB	00H, '}', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@DJDIIKK@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
CONST	SEGMENT
??_C@_1LO@DJDIIKK@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'K', 00H, 'M', 00H, 'S'
	DB	00H, ' ', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '{', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'h'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x'
	DB	00H, '}', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@EEINMAFO@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@
CONST	SEGMENT
??_C@_1LO@EEINMAFO@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'A', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'v', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '{', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'h'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x'
	DB	00H, '}', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@KECHFOCG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAp?$AAp?$AAl@
CONST	SEGMENT
??_C@_1LO@KECHFOCG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAp?$AAp?$AAl@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'A', 00H, 'p', 00H, 'p'
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'I', 00H, 'D', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '{', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'h'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '2', 00H, 'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H
	DB	'h', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'h', 00H, 'x'
	DB	00H, '}', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@DDFIFPLB@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAV?$AAM?$AA?5?$AA?1@
CONST	SEGMENT
??_C@_1EI@DDFIFPLB@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAV?$AAM?$AA?5?$AA?1@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'V', 00H, 'M', 00H, ' '
	DB	00H, '/', 00H, ' ', 00H, 'V', 00H, 'H', 00H, 'D', 00H, ' ', 00H
	DB	'B', 00H, 'o', 00H, 'o', 00H, 't', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'i', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@CLJAJGPJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAm?$AAa@
CONST	SEGMENT
??_C@_1FI@CLJAJGPJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAm?$AAa@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'm'
	DB	00H, 'a', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'P', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'o', 00H, 'd'
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'u', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@JCFEPELC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAL?$AAi?$AAc?$AAe@
CONST	SEGMENT
??_C@_1EI@JCFEPELC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAL?$AAi?$AAc?$AAe@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'L', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 'n', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@DKENENAL@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAo?$AAt@
CONST	SEGMENT
??_C@_1EO@DKENENAL@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAo?$AAt@ DB '['
	DB	00H, 'K', 00H, 'M', 00H, 'S', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ']', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 't', 00H, 'o', 00H, 'c', 00H, 'o', 00H, 'l', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'i', 00H, '.', 00H, '%', 00H, 'i', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_WI@Z
_TEXT	SEGMENT
_c$1 = -2572						; size = 1024
_hr$ = -1548						; size = 4
_c$2 = -1544						; size = 1024
_type$ = -520						; size = 4
_size$ = -516						; size = 4
_buf$ = -512						; size = 512
_hKey$ = 8						; size = 4
_name$ = 12						; size = 4
_dest$ = 16						; size = 4
_dest_len$ = 20						; size = 4
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_WI@Z PROC	; ReadRegParameter, COMDAT

; 669  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 0b 00
	00		 sub	 esp, 2956		; 00000b8cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 670  : 	WCHAR buf[256];
; 671  : 	DWORD size = sizeof(buf), type;

  00016	c7 85 fc fd ff
	ff 00 02 00 00	 mov	 DWORD PTR _size$[ebp], 512 ; 00000200H

; 672  : 
; 673  : 	if (RegQueryValueExW(hKey, name, nullptr, &type, (LPBYTE)buf, &size) != ERROR_SUCCESS)

  00020	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  00026	50		 push	 eax
  00027	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0002d	51		 push	 ecx
  0002e	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _type$[ebp]
  00034	52		 push	 edx
  00035	6a 00		 push	 0
  00037	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _hKey$[ebp]
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  00045	85 c0		 test	 eax, eax
  00047	74 07		 je	 SHORT $LN2@ReadRegPar

; 674  : 		return S_OK;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 94 00 00 00	 jmp	 $LN1@ReadRegPar
$LN2@ReadRegPar:

; 675  : 
; 676  : 	if (type != REG_SZ)

  00050	83 bd f8 fd ff
	ff 01		 cmp	 DWORD PTR _type$[ebp], 1
  00057	74 07		 je	 SHORT $LN3@ReadRegPar

; 677  : 		return S_OK;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 84 00 00 00	 jmp	 $LN1@ReadRegPar
$LN3@ReadRegPar:

; 678  : 
; 679  : 	OutputDebugStringEx(L"[SppExtComObjHook] Found a value %s = %s\n", name, buf);

  00060	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]
  0006a	51		 push	 ecx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@JOKGPNBE@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  00070	68 00 02 00 00	 push	 512			; 00000200H
  00075	8d 95 f8 f9 ff
	ff		 lea	 edx, DWORD PTR _c$2[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _swprintf_s
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	8d 85 f8 f9 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 680  : 
; 681  : 	HRESULT hr = wcscpy_s(dest, dest_len, buf);

  00091	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00097	50		 push	 eax
  00098	8b 4d 14	 mov	 ecx, DWORD PTR _dest_len$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0009f	52		 push	 edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	89 85 f4 f9 ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 682  : 
; 683  : #pragma warning(push)
; 684  : #pragma warning (disable:4390) // C4390: ';' : empty controlled statement found; is this the intent?
; 685  : 
; 686  : 	if (hr != S_OK)

  000af	83 bd f4 f9 ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000b6	74 26		 je	 SHORT $LN4@ReadRegPar

; 687  : 	{
; 688  : 		OutputDebugStringEx(L"[SppExtComObjHook] Invalid setting... ignored\n");

  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  000bd	68 00 02 00 00	 push	 512			; 00000200H
  000c2	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _swprintf_s
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  000d7	50		 push	 eax
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4
$LN4@ReadRegPar:

; 689  : 	}
; 690  : #pragma warning (pop)
; 691  : 
; 692  : 	return hr;

  000de	8b 85 f4 f9 ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]
$LN1@ReadRegPar:

; 693  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 10 00	 ret	 16			; 00000010H
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_WI@Z ENDP	; ReadRegParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_K_K3@Z
_TEXT	SEGMENT
_c$1 = -2576						; size = 1024
_c$2 = -1552						; size = 1024
_tempVal$ = -528					; size = 8
_type$ = -520						; size = 4
_size$ = -516						; size = 4
_buf$ = -512						; size = 512
_hKey$ = 8						; size = 4
_name$ = 12						; size = 4
_dest$ = 16						; size = 4
_min$ = 20						; size = 8
_max$ = 28						; size = 8
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_K_K3@Z PROC	; ReadRegParameter, COMDAT

; 643  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 0b 00
	00		 sub	 esp, 2960		; 00000b90H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 644  : 	WCHAR buf[256];
; 645  : 	DWORD size = sizeof(buf), type;

  00016	c7 85 fc fd ff
	ff 00 02 00 00	 mov	 DWORD PTR _size$[ebp], 512 ; 00000200H

; 646  : 
; 647  : 	if (RegQueryValueExW(hKey, name, nullptr, &type, (LPBYTE)buf, &size) != ERROR_SUCCESS)

  00020	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  00026	50		 push	 eax
  00027	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0002d	51		 push	 ecx
  0002e	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _type$[ebp]
  00034	52		 push	 edx
  00035	6a 00		 push	 0
  00037	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _hKey$[ebp]
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  00045	85 c0		 test	 eax, eax
  00047	74 07		 je	 SHORT $LN2@ReadRegPar

; 648  : 		return S_OK;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 dd 00 00 00	 jmp	 $LN1@ReadRegPar
$LN2@ReadRegPar:

; 649  : 
; 650  : 	if (type != REG_QWORD)

  00050	83 bd f8 fd ff
	ff 0b		 cmp	 DWORD PTR _type$[ebp], 11 ; 0000000bH
  00057	74 07		 je	 SHORT $LN3@ReadRegPar

; 651  : 		return S_OK;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 cd 00 00 00	 jmp	 $LN1@ReadRegPar
$LN3@ReadRegPar:

; 652  : 
; 653  : 	QWORD tempVal;
; 654  : 	tempVal = ((QWORD *)buf)[0];

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	6b c8 00	 imul	 ecx, eax, 0
  00068	8b 94 0d 00 fe
	ff ff		 mov	 edx, DWORD PTR _buf$[ebp+ecx]
  0006f	89 95 f0 fd ff
	ff		 mov	 DWORD PTR _tempVal$[ebp], edx
  00075	8b 84 0d 04 fe
	ff ff		 mov	 eax, DWORD PTR _buf$[ebp+ecx+4]
  0007c	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _tempVal$[ebp+4], eax

; 655  : 
; 656  : 	OutputDebugStringEx(L"[SppExtComObjHook] Found a value %s = %016I64X\n", name, tempVal);

  00082	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp+4]
  00088	50		 push	 eax
  00089	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _tempVal$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 0c	 mov	 edx, DWORD PTR _name$[ebp]
  00093	52		 push	 edx
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_1GA@FEEJLOL@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  00099	68 00 02 00 00	 push	 512			; 00000200H
  0009e	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _swprintf_s
  000aa	83 c4 18	 add	 esp, 24			; 00000018H
  000ad	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 657  : 
; 658  : 	if (tempVal < min || tempVal > max)

  000ba	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp+4]
  000c0	3b 45 18	 cmp	 eax, DWORD PTR _min$[ebp+4]
  000c3	72 25		 jb	 SHORT $LN5@ReadRegPar
  000c5	77 0b		 ja	 SHORT $LN7@ReadRegPar
  000c7	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _tempVal$[ebp]
  000cd	3b 4d 14	 cmp	 ecx, DWORD PTR _min$[ebp]
  000d0	72 18		 jb	 SHORT $LN5@ReadRegPar
$LN7@ReadRegPar:
  000d2	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp+4]
  000d8	3b 45 20	 cmp	 eax, DWORD PTR _max$[ebp+4]
  000db	72 3a		 jb	 SHORT $LN4@ReadRegPar
  000dd	77 0b		 ja	 SHORT $LN5@ReadRegPar
  000df	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _tempVal$[ebp]
  000e5	3b 4d 1c	 cmp	 ecx, DWORD PTR _max$[ebp]
  000e8	76 2d		 jbe	 SHORT $LN4@ReadRegPar
$LN5@ReadRegPar:

; 659  : 	{
; 660  : 		OutputDebugStringEx(L"[SppExtComObjHook] Invalid setting... ignored\n");

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  000ef	68 00 02 00 00	 push	 512			; 00000200H
  000f4	8d 85 f0 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _swprintf_s
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8d 85 f0 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  00109	50		 push	 eax
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 661  : 		return ERROR_INVALID_PARAMETER;

  00110	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  00115	eb 16		 jmp	 SHORT $LN1@ReadRegPar
$LN4@ReadRegPar:

; 662  : 	}
; 663  : 
; 664  : 	*dest = tempVal;

  00117	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0011a	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _tempVal$[ebp]
  00120	89 08		 mov	 DWORD PTR [eax], ecx
  00122	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tempVal$[ebp+4]
  00128	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 665  : 	return S_OK;

  0012b	33 c0		 xor	 eax, eax
$LN1@ReadRegPar:

; 666  : }

  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 1c 00	 ret	 28			; 0000001cH
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_K_K3@Z ENDP	; ReadRegParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z
_TEXT	SEGMENT
_c$1 = -2572						; size = 1024
_c$2 = -1548						; size = 1024
_tempVal$ = -524					; size = 4
_type$ = -520						; size = 4
_size$ = -516						; size = 4
_buf$ = -512						; size = 512
_hKey$ = 8						; size = 4
_name$ = 12						; size = 4
_dest$ = 16						; size = 4
_min$ = 20						; size = 4
_max$ = 24						; size = 4
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z PROC	; ReadRegParameter, COMDAT

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 0b 00
	00		 sub	 esp, 2956		; 00000b8cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 608  : 	WCHAR buf[256];
; 609  : 	DWORD size = sizeof(buf), type;

  00016	c7 85 fc fd ff
	ff 00 02 00 00	 mov	 DWORD PTR _size$[ebp], 512 ; 00000200H

; 610  : 
; 611  : 	if (RegQueryValueExW(hKey, name, nullptr, &type, (LPBYTE)buf, &size) != ERROR_SUCCESS)

  00020	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  00026	50		 push	 eax
  00027	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0002d	51		 push	 ecx
  0002e	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _type$[ebp]
  00034	52		 push	 edx
  00035	6a 00		 push	 0
  00037	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _hKey$[ebp]
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  00045	85 c0		 test	 eax, eax
  00047	74 07		 je	 SHORT $LN2@ReadRegPar

; 612  : 		return S_OK;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 ee 00 00 00	 jmp	 $LN1@ReadRegPar
$LN2@ReadRegPar:

; 613  : 
; 614  : 	DWORD tempVal;
; 615  : 
; 616  : 	if (type == REG_SZ)

  00050	83 bd f8 fd ff
	ff 01		 cmp	 DWORD PTR _type$[ebp], 1
  00057	75 3d		 jne	 SHORT $LN3@ReadRegPar

; 617  : 	{
; 618  : 		errno = 0;

  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 619  : 		tempVal = wcstoul(buf, nullptr, 10);

  00065	6a 0a		 push	 10			; 0000000aH
  00067	6a 00		 push	 0
  00069	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstoul
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _tempVal$[ebp], eax

; 620  : 		if (errno)

  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00085	83 38 00	 cmp	 DWORD PTR [eax], 0
  00088	74 0a		 je	 SHORT $LN5@ReadRegPar

; 621  : 			return ERROR_INVALID_PARAMETER;

  0008a	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  0008f	e9 aa 00 00 00	 jmp	 $LN1@ReadRegPar
$LN5@ReadRegPar:

; 622  : 	}

  00094	eb 27		 jmp	 SHORT $LN4@ReadRegPar
$LN3@ReadRegPar:

; 623  : 	else if (type == REG_DWORD)

  00096	83 bd f8 fd ff
	ff 04		 cmp	 DWORD PTR _type$[ebp], 4
  0009d	75 17		 jne	 SHORT $LN6@ReadRegPar

; 624  : 	{
; 625  : 		tempVal = ((DWORD *)buf)[0];

  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c8 00	 imul	 ecx, eax, 0
  000a7	8b 94 0d 00 fe
	ff ff		 mov	 edx, DWORD PTR _buf$[ebp+ecx]
  000ae	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tempVal$[ebp], edx

; 626  : 	}

  000b4	eb 07		 jmp	 SHORT $LN4@ReadRegPar
$LN6@ReadRegPar:

; 627  : 	else
; 628  : 		return S_OK;

  000b6	33 c0		 xor	 eax, eax
  000b8	e9 81 00 00 00	 jmp	 $LN1@ReadRegPar
$LN4@ReadRegPar:

; 629  : 
; 630  : 	OutputDebugStringEx(L"[SppExtComObjHook] Found a value %s = %u\n", name, tempVal);

  000bd	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]
  000c7	51		 push	 ecx
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@EIPPBOAJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  000cd	68 00 02 00 00	 push	 512			; 00000200H
  000d2	8d 95 f4 f9 ff
	ff		 lea	 edx, DWORD PTR _c$2[ebp]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 _swprintf_s
  000de	83 c4 14	 add	 esp, 20			; 00000014H
  000e1	8d 85 f4 f9 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  000e7	50		 push	 eax
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 631  : 
; 632  : 	if (tempVal < min || tempVal > max)

  000ee	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp]
  000f4	3b 45 14	 cmp	 eax, DWORD PTR _min$[ebp]
  000f7	72 0b		 jb	 SHORT $LN9@ReadRegPar
  000f9	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _tempVal$[ebp]
  000ff	3b 45 18	 cmp	 eax, DWORD PTR _max$[ebp]
  00102	76 2d		 jbe	 SHORT $LN8@ReadRegPar
$LN9@ReadRegPar:

; 633  : 	{
; 634  : 		OutputDebugStringEx(L"[SppExtComObjHook] Invalid setting... ignored\n");

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OLPBKEED@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  00109	68 00 02 00 00	 push	 512			; 00000200H
  0010e	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 _swprintf_s
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011d	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  00123	50		 push	 eax
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 635  : 		return ERROR_INVALID_PARAMETER;

  0012a	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  0012f	eb 0d		 jmp	 SHORT $LN1@ReadRegPar
$LN8@ReadRegPar:

; 636  : 	}
; 637  : 
; 638  : 	*dest = tempVal;

  00131	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00134	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _tempVal$[ebp]
  0013a	89 08		 mov	 DWORD PTR [eax], ecx

; 639  : 	return S_OK;

  0013c	33 c0		 xor	 eax, eax
$LN1@ReadRegPar:

; 640  : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 14 00	 ret	 20			; 00000014H
?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z ENDP	; ReadRegParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?GenerateRandomKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z
_TEXT	SEGMENT
_Date$ = -112						; size = 36
_GeneratedDate$ = -76					; size = 8
_RandomDate$ = -68					; size = 8
_MaxDate$ = -60						; size = 8
_MinDate$ = -52						; size = 8
_LanguageCode$ = -44					; size = 4
_LicenseChannel$ = -40					; size = 4
_RandomID$ = -36					; size = 4
_config$ = -32						; size = 4
_host$ = -28						; size = 4
_HostIndex$ = -24					; size = 4
_PkeyIndex$ = -20					; size = 4
_RandomNumber$ = -16					; size = 16
_KMSPID$ = 8						; size = 4
_Request$ = 12						; size = 4
?GenerateRandomKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z PROC ; GenerateRandomKMSPID, COMDAT

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 529  : 	// Random number buffer
; 530  : 	DWORD RandomNumber[4];
; 531  : 	GetRandomBytes((BYTE *)RandomNumber, sizeof(RandomNumber));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 f0	 lea	 eax, DWORD PTR _RandomNumber$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?GetRandomBytes@@YGHPAEK@Z ; GetRandomBytes

; 532  : 
; 533  : 	// Choose KMS HostOS and pkeyconfig
; 534  : 	int PkeyIndex = 0;

  00021	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _PkeyIndex$[ebp], 0

; 535  : 	int HostIndex = 0;

  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _HostIndex$[ebp], 0

; 536  : 	GetKMSHost(Request, &PkeyIndex, &HostIndex);

  0002f	8d 45 e8	 lea	 eax, DWORD PTR _HostIndex$[ebp]
  00032	50		 push	 eax
  00033	8d 4d ec	 lea	 ecx, DWORD PTR _PkeyIndex$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 0c	 mov	 edx, DWORD PTR _Request$[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ?GetKMSHost@@YGXQAUKMSBaseRequest@@PAH1@Z ; GetKMSHost

; 537  : 	const KMSHostOS *host = &HostOS[HostIndex];

  00040	8b 45 e8	 mov	 eax, DWORD PTR _HostIndex$[ebp]
  00043	c1 e0 04	 shl	 eax, 4
  00046	05 00 00 00 00	 add	 eax, OFFSET ?HostOS@@3QBUKMSHostOS@@B
  0004b	89 45 e4	 mov	 DWORD PTR _host$[ebp], eax

; 538  : 	const PKEYCONFIG *config = &pkeyconfig[PkeyIndex];

  0004e	6b 45 ec 0c	 imul	 eax, DWORD PTR _PkeyIndex$[ebp], 12
  00052	05 00 00 00 00	 add	 eax, OFFSET ?pkeyconfig@@3QBUPKEYCONFIG@@B
  00057	89 45 e0	 mov	 DWORD PTR _config$[ebp], eax

; 539  : 
; 540  : 	// Random KeyID
; 541  : 	int RandomID = config->RangeMin + RandomNumber[1] % (config->RangeMax - config->RangeMin);

  0005a	b8 04 00 00 00	 mov	 eax, 4
  0005f	c1 e0 00	 shl	 eax, 0
  00062	8b 4d e0	 mov	 ecx, DWORD PTR _config$[ebp]
  00065	8b 55 e0	 mov	 edx, DWORD PTR _config$[ebp]
  00068	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0006b	2b 4a 04	 sub	 ecx, DWORD PTR [edx+4]
  0006e	8b 44 05 f0	 mov	 eax, DWORD PTR _RandomNumber$[ebp+eax]
  00072	33 d2		 xor	 edx, edx
  00074	f7 f1		 div	 ecx
  00076	8b 45 e0	 mov	 eax, DWORD PTR _config$[ebp]
  00079	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0007c	89 55 dc	 mov	 DWORD PTR _RandomID$[ebp], edx

; 542  : 
; 543  : 	// Part 5: License Channel (00=Retail, 01=Retail, 02=OEM, 03=Volume(GVLK,MAK)) - always 03
; 544  : 	DWORD LicenseChannel = 3;

  0007f	c7 45 d8 03 00
	00 00		 mov	 DWORD PTR _LicenseChannel$[ebp], 3

; 545  : 
; 546  : 	// Part 6: Language - use system default language
; 547  : 	DWORD LanguageCode = GetSystemDefaultLCID();

  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDefaultLCID@0
  0008c	89 45 d4	 mov	 DWORD PTR _LanguageCode$[ebp], eax

; 548  : 
; 549  : 	// Minimum value of activation date
; 550  : 	time_t MinDate = host->CsvlkTime;

  0008f	8b 45 e4	 mov	 eax, DWORD PTR _host$[ebp]
  00092	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00095	89 4d cc	 mov	 DWORD PTR _MinDate$[ebp], ecx
  00098	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0009b	89 55 d0	 mov	 DWORD PTR _MinDate$[ebp+4], edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  0009e	6a 00		 push	 0
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  000a6	83 c4 04	 add	 esp, 4
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 553  : 	time_t MaxDate = time(nullptr) - 86400; // limit latest activation date to yesterday

  000a9	2d 80 51 01 00	 sub	 eax, 86400		; 00015180H
  000ae	83 da 00	 sbb	 edx, 0
  000b1	89 45 c4	 mov	 DWORD PTR _MaxDate$[ebp], eax
  000b4	89 55 c8	 mov	 DWORD PTR _MaxDate$[ebp+4], edx

; 554  : 
; 555  : 	// Random date between MinDate and MaxDate
; 556  : 	time_t RandomDate = ((ULONG64 *)RandomNumber)[1] & 0x7FFFFFFFFFFFFFFFULL;

  000b7	b8 08 00 00 00	 mov	 eax, 8
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	8b 4c 05 f0	 mov	 ecx, DWORD PTR _RandomNumber$[ebp+eax]
  000c3	8b 54 05 f4	 mov	 edx, DWORD PTR _RandomNumber$[ebp+eax+4]
  000c7	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  000cd	89 4d bc	 mov	 DWORD PTR _RandomDate$[ebp], ecx
  000d0	89 55 c0	 mov	 DWORD PTR _RandomDate$[ebp+4], edx

; 557  : 	time_t GeneratedDate = MinDate + RandomDate % (MaxDate - MinDate);

  000d3	8b 45 c4	 mov	 eax, DWORD PTR _MaxDate$[ebp]
  000d6	2b 45 cc	 sub	 eax, DWORD PTR _MinDate$[ebp]
  000d9	8b 4d c8	 mov	 ecx, DWORD PTR _MaxDate$[ebp+4]
  000dc	1b 4d d0	 sbb	 ecx, DWORD PTR _MinDate$[ebp+4]
  000df	51		 push	 ecx
  000e0	50		 push	 eax
  000e1	8b 55 c0	 mov	 edx, DWORD PTR _RandomDate$[ebp+4]
  000e4	52		 push	 edx
  000e5	8b 45 bc	 mov	 eax, DWORD PTR _RandomDate$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 __allrem
  000ee	03 45 cc	 add	 eax, DWORD PTR _MinDate$[ebp]
  000f1	13 55 d0	 adc	 edx, DWORD PTR _MinDate$[ebp+4]
  000f4	89 45 b4	 mov	 DWORD PTR _GeneratedDate$[ebp], eax
  000f7	89 55 b8	 mov	 DWORD PTR _GeneratedDate$[ebp+4], edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 574  :                 return _localtime64_s(_Tm, _Time);

  000fa	8d 45 b4	 lea	 eax, DWORD PTR _GeneratedDate$[ebp]
  000fd	50		 push	 eax
  000fe	8d 4d 90	 lea	 ecx, DWORD PTR _Date$[ebp]
  00101	51		 push	 ecx
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00108	83 c4 08	 add	 esp, 8
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 561  : 	swprintf_s(KMSPID, PID_BUFFER_LEN, L"%05u-%05u-%03u-%06u-%02u-%u-%u.0000-%03d%04d",

  0010b	8b 45 a4	 mov	 eax, DWORD PTR _Date$[ebp+20]
  0010e	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00113	50		 push	 eax
  00114	8b 4d ac	 mov	 ecx, DWORD PTR _Date$[ebp+28]
  00117	83 c1 01	 add	 ecx, 1
  0011a	51		 push	 ecx
  0011b	8b 55 e4	 mov	 edx, DWORD PTR _host$[ebp]
  0011e	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00122	50		 push	 eax
  00123	8b 4d d4	 mov	 ecx, DWORD PTR _LanguageCode$[ebp]
  00126	51		 push	 ecx
  00127	8b 55 d8	 mov	 edx, DWORD PTR _LicenseChannel$[ebp]
  0012a	52		 push	 edx
  0012b	8b 45 dc	 mov	 eax, DWORD PTR _RandomID$[ebp]
  0012e	99		 cdq
  0012f	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00134	f7 f9		 idiv	 ecx
  00136	52		 push	 edx
  00137	8b 45 dc	 mov	 eax, DWORD PTR _RandomID$[ebp]
  0013a	99		 cdq
  0013b	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00140	f7 f9		 idiv	 ecx
  00142	50		 push	 eax
  00143	8b 55 e0	 mov	 edx, DWORD PTR _config$[ebp]
  00146	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00149	50		 push	 eax
  0014a	8b 4d e4	 mov	 ecx, DWORD PTR _host$[ebp]
  0014d	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00150	52		 push	 edx
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@KHOLGLLO@?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA5?$AAu?$AA?9?$AA?$CF?$AA0?$AA3?$AAu?$AA?9@
  00156	6a 40		 push	 64			; 00000040H
  00158	8b 45 08	 mov	 eax, DWORD PTR _KMSPID$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _swprintf_s
  00161	83 c4 30	 add	 esp, 48			; 00000030H

; 562  : 		host->Type, config->GroupID, RandomID / 1000000, RandomID % 1000000, LicenseChannel,
; 563  : 		LanguageCode, host->Build, Date.tm_yday + 1, Date.tm_year + 1900
; 564  : 	);
; 565  : }

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 08 00	 ret	 8
?GenerateRandomKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z ENDP ; GenerateRandomKMSPID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?GetKMSHost@@YGXQAUKMSBaseRequest@@PAH1@Z
_TEXT	SEGMENT
tv546 = -80						; size = 4
tv538 = -80						; size = 4
tv530 = -80						; size = 4
tv522 = -80						; size = 4
tv514 = -80						; size = 4
tv506 = -80						; size = 4
tv498 = -80						; size = 4
tv490 = -80						; size = 4
tv482 = -80						; size = 4
tv474 = -80						; size = 4
tv466 = -80						; size = 4
tv458 = -80						; size = 4
tv450 = -80						; size = 4
tv442 = -80						; size = 4
tv434 = -80						; size = 4
tv426 = -80						; size = 4
tv418 = -80						; size = 4
tv410 = -80						; size = 4
tv402 = -80						; size = 4
tv394 = -80						; size = 4
tv386 = -80						; size = 4
tv378 = -80						; size = 4
tv370 = -80						; size = 4
tv362 = -80						; size = 4
tv354 = -80						; size = 4
tv346 = -80						; size = 4
tv338 = -80						; size = 4
tv330 = -80						; size = 4
tv322 = -80						; size = 4
tv553 = -76						; size = 4
tv545 = -76						; size = 4
tv537 = -76						; size = 4
tv529 = -76						; size = 4
tv521 = -76						; size = 4
tv513 = -76						; size = 4
tv505 = -76						; size = 4
tv497 = -76						; size = 4
tv489 = -76						; size = 4
tv481 = -76						; size = 4
tv473 = -76						; size = 4
tv465 = -76						; size = 4
tv457 = -76						; size = 4
tv449 = -76						; size = 4
tv441 = -76						; size = 4
tv433 = -76						; size = 4
tv425 = -76						; size = 4
tv417 = -76						; size = 4
tv409 = -76						; size = 4
tv401 = -76						; size = 4
tv393 = -76						; size = 4
tv385 = -76						; size = 4
tv377 = -76						; size = 4
tv369 = -76						; size = 4
tv361 = -76						; size = 4
tv353 = -76						; size = 4
tv345 = -76						; size = 4
tv337 = -76						; size = 4
tv329 = -76						; size = 4
_keyConfigIndex$ = -8					; size = 4
_osTypeIndex$ = -4					; size = 4
_Request$ = 8						; size = 4
_osPkey$ = 12						; size = 4
_osHost$ = 16						; size = 4
?GetKMSHost@@YGXQAUKMSBaseRequest@@PAH1@Z PROC		; GetKMSHost, COMDAT

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00013	6a 00		 push	 0
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0001b	83 c4 04	 add	 esp, 4
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 399  : 	srand(static_cast<unsigned int>(time(nullptr)));

  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  00025	83 c4 04	 add	 esp, 4

; 400  : 
; 401  : 	// Product Specific Detection
; 402  : 	int osTypeIndex = HOST_SERVER2019;

  00028	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _osTypeIndex$[ebp], 5

; 403  : 	int keyConfigIndex = PKEYCONFIG_SERVER2019_CSVLK;

  0002f	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ?APP_ID_OFFICE14@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 404  : 	if (Request->AppID == APP_ID_OFFICE14 || Request->AppID == APP_ID_OFFICE15)

  0003d	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00040	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memcmp
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	85 c0		 test	 eax, eax
  0004e	75 09		 jne	 SHORT $LN54@GetKMSHost
  00050	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv329[ebp], 1
  00057	eb 07		 jmp	 SHORT $LN52@GetKMSHost
$LN54@GetKMSHost:
  00059	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv329[ebp], 0
$LN52@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00060	83 7d b4 00	 cmp	 DWORD PTR tv329[ebp], 0
  00064	74 09		 je	 SHORT $LN50@GetKMSHost
  00066	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv322[ebp], 1
  0006d	eb 07		 jmp	 SHORT $LN48@GetKMSHost
$LN50@GetKMSHost:
  0006f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv322[ebp], 0
$LN48@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 404  : 	if (Request->AppID == APP_ID_OFFICE14 || Request->AppID == APP_ID_OFFICE15)

  00076	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv322[ebp]
  0007a	85 c9		 test	 ecx, ecx
  0007c	75 4c		 jne	 SHORT $LN4@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0007e	6a 10		 push	 16			; 00000010H
  00080	68 00 00 00 00	 push	 OFFSET ?APP_ID_OFFICE15@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 404  : 	if (Request->AppID == APP_ID_OFFICE14 || Request->AppID == APP_ID_OFFICE15)

  00085	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00088	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _memcmp
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 c0		 test	 eax, eax
  00096	75 09		 jne	 SHORT $LN62@GetKMSHost
  00098	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv337[ebp], 1
  0009f	eb 07		 jmp	 SHORT $LN60@GetKMSHost
$LN62@GetKMSHost:
  000a1	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv337[ebp], 0
$LN60@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  000a8	83 7d b4 00	 cmp	 DWORD PTR tv337[ebp], 0
  000ac	74 09		 je	 SHORT $LN58@GetKMSHost
  000ae	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv330[ebp], 1
  000b5	eb 07		 jmp	 SHORT $LN56@GetKMSHost
$LN58@GetKMSHost:
  000b7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv330[ebp], 0
$LN56@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 404  : 	if (Request->AppID == APP_ID_OFFICE14 || Request->AppID == APP_ID_OFFICE15)

  000be	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv330[ebp]
  000c2	85 c9		 test	 ecx, ecx
  000c4	0f 84 a5 01 00
	00		 je	 $LN2@GetKMSHost
$LN4@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000ca	6a 10		 push	 16			; 00000010H
  000cc	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2010@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 406  : 		if (Request->KmsID == KMS_ID_OFFICE_2010)

  000d1	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  000d4	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _memcmp
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e0	85 c0		 test	 eax, eax
  000e2	75 09		 jne	 SHORT $LN70@GetKMSHost
  000e4	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv345[ebp], 1
  000eb	eb 07		 jmp	 SHORT $LN68@GetKMSHost
$LN70@GetKMSHost:
  000ed	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv345[ebp], 0
$LN68@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  000f4	83 7d b4 00	 cmp	 DWORD PTR tv345[ebp], 0
  000f8	74 09		 je	 SHORT $LN66@GetKMSHost
  000fa	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv338[ebp], 1
  00101	eb 07		 jmp	 SHORT $LN64@GetKMSHost
$LN66@GetKMSHost:
  00103	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv338[ebp], 0
$LN64@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 406  : 		if (Request->KmsID == KMS_ID_OFFICE_2010)

  0010a	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv338[ebp]
  0010e	85 c9		 test	 ecx, ecx
  00110	74 24		 je	 SHORT $LN5@GetKMSHost

; 407  : 		{
; 408  : 			keyConfigIndex = PKEYCONFIG_OFFICE2010_CSVLK;

  00112	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 6

; 409  : 			osTypeIndex = rand() % (HOST_SERVER2012R2 + 1 - HOST_SERVER2012) + HOST_SERVER2012;

  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0011f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00124	79 05		 jns	 SHORT $LN280@GetKMSHost
  00126	48		 dec	 eax
  00127	83 c8 fe	 or	 eax, -2			; fffffffeH
  0012a	40		 inc	 eax
$LN280@GetKMSHost:
  0012b	83 c0 02	 add	 eax, 2
  0012e	89 45 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], eax

; 410  : 		}

  00131	e9 34 01 00 00	 jmp	 $LN6@GetKMSHost
$LN5@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00136	6a 10		 push	 16			; 00000010H
  00138	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2013@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 411  : 		else if (Request->KmsID == KMS_ID_OFFICE_2013)

  0013d	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00140	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _memcmp
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014c	85 c0		 test	 eax, eax
  0014e	75 09		 jne	 SHORT $LN78@GetKMSHost
  00150	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv353[ebp], 1
  00157	eb 07		 jmp	 SHORT $LN76@GetKMSHost
$LN78@GetKMSHost:
  00159	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv353[ebp], 0
$LN76@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00160	83 7d b4 00	 cmp	 DWORD PTR tv353[ebp], 0
  00164	74 09		 je	 SHORT $LN74@GetKMSHost
  00166	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv346[ebp], 1
  0016d	eb 07		 jmp	 SHORT $LN72@GetKMSHost
$LN74@GetKMSHost:
  0016f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv346[ebp], 0
$LN72@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 411  : 		else if (Request->KmsID == KMS_ID_OFFICE_2013)

  00176	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv346[ebp]
  0017a	85 c9		 test	 ecx, ecx
  0017c	74 20		 je	 SHORT $LN7@GetKMSHost

; 412  : 		{
; 413  : 			keyConfigIndex = PKEYCONFIG_OFFICE2013_CSVLK;

  0017e	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 7

; 414  : 			osTypeIndex = rand() % (HOST_SERVER2016 + 1 - HOST_SERVER2012) + HOST_SERVER2012;

  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0018b	99		 cdq
  0018c	b9 03 00 00 00	 mov	 ecx, 3
  00191	f7 f9		 idiv	 ecx
  00193	83 c2 02	 add	 edx, 2
  00196	89 55 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], edx

; 415  : 		}

  00199	e9 cc 00 00 00	 jmp	 $LN6@GetKMSHost
$LN7@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0019e	6a 10		 push	 16			; 00000010H
  001a0	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2016@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 416  : 		else if (Request->KmsID == KMS_ID_OFFICE_2016)

  001a5	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  001a8	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _memcmp
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b4	85 c0		 test	 eax, eax
  001b6	75 09		 jne	 SHORT $LN86@GetKMSHost
  001b8	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv361[ebp], 1
  001bf	eb 07		 jmp	 SHORT $LN84@GetKMSHost
$LN86@GetKMSHost:
  001c1	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv361[ebp], 0
$LN84@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  001c8	83 7d b4 00	 cmp	 DWORD PTR tv361[ebp], 0
  001cc	74 09		 je	 SHORT $LN82@GetKMSHost
  001ce	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv354[ebp], 1
  001d5	eb 07		 jmp	 SHORT $LN80@GetKMSHost
$LN82@GetKMSHost:
  001d7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv354[ebp], 0
$LN80@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 416  : 		else if (Request->KmsID == KMS_ID_OFFICE_2016)

  001de	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv354[ebp]
  001e2	85 c9		 test	 ecx, ecx
  001e4	74 21		 je	 SHORT $LN9@GetKMSHost

; 417  : 		{
; 418  : 			keyConfigIndex = PKEYCONFIG_OFFICE2016_CSVLK;

  001e6	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 8

; 419  : 			osTypeIndex = rand() % (HOST_SERVER2019 + 1 - HOST_SERVER2012) + HOST_SERVER2012;

  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  001f3	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  001f8	79 05		 jns	 SHORT $LN281@GetKMSHost
  001fa	48		 dec	 eax
  001fb	83 c8 fc	 or	 eax, -4			; fffffffcH
  001fe	40		 inc	 eax
$LN281@GetKMSHost:
  001ff	83 c0 02	 add	 eax, 2
  00202	89 45 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], eax

; 420  : 		}

  00205	eb 63		 jmp	 SHORT $LN6@GetKMSHost
$LN9@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00207	6a 10		 push	 16			; 00000010H
  00209	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2019@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 421  : 		else if (Request->KmsID == KMS_ID_OFFICE_2019)

  0020e	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00211	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 _memcmp
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	85 c0		 test	 eax, eax
  0021f	75 09		 jne	 SHORT $LN94@GetKMSHost
  00221	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv369[ebp], 1
  00228	eb 07		 jmp	 SHORT $LN92@GetKMSHost
$LN94@GetKMSHost:
  0022a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv369[ebp], 0
$LN92@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00231	83 7d b4 00	 cmp	 DWORD PTR tv369[ebp], 0
  00235	74 09		 je	 SHORT $LN90@GetKMSHost
  00237	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv362[ebp], 1
  0023e	eb 07		 jmp	 SHORT $LN88@GetKMSHost
$LN90@GetKMSHost:
  00240	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv362[ebp], 0
$LN88@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 421  : 		else if (Request->KmsID == KMS_ID_OFFICE_2019)

  00247	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv362[ebp]
  0024b	85 c9		 test	 ecx, ecx
  0024d	74 1b		 je	 SHORT $LN6@GetKMSHost

; 422  : 		{
; 423  : 			keyConfigIndex = PKEYCONFIG_OFFICE2019_CSVLK;

  0024f	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 9

; 424  : 			osTypeIndex = rand() % (HOST_SERVER2019 + 1 - HOST_SERVER2012R2) + HOST_SERVER2012R2;

  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0025c	99		 cdq
  0025d	b9 03 00 00 00	 mov	 ecx, 3
  00262	f7 f9		 idiv	 ecx
  00264	83 c2 03	 add	 edx, 3
  00267	89 55 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], edx
$LN6@GetKMSHost:

; 425  : 		}
; 426  : 	}

  0026a	e9 bb 07 00 00	 jmp	 $LN3@GetKMSHost
$LN2@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0026f	6a 10		 push	 16			; 00000010H
  00271	68 00 00 00 00	 push	 OFFSET ?APP_ID_WINDOWS@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 427  : 	else if (Request->AppID == APP_ID_WINDOWS)

  00276	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00279	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 _memcmp
  00282	83 c4 0c	 add	 esp, 12			; 0000000cH
  00285	85 c0		 test	 eax, eax
  00287	75 09		 jne	 SHORT $LN102@GetKMSHost
  00289	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv377[ebp], 1
  00290	eb 07		 jmp	 SHORT $LN100@GetKMSHost
$LN102@GetKMSHost:
  00292	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv377[ebp], 0
$LN100@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00299	83 7d b4 00	 cmp	 DWORD PTR tv377[ebp], 0
  0029d	74 09		 je	 SHORT $LN98@GetKMSHost
  0029f	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv370[ebp], 1
  002a6	eb 07		 jmp	 SHORT $LN96@GetKMSHost
$LN98@GetKMSHost:
  002a8	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv370[ebp], 0
$LN96@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 427  : 	else if (Request->AppID == APP_ID_WINDOWS)

  002af	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv370[ebp]
  002b3	85 c9		 test	 ecx, ecx
  002b5	0f 84 6f 07 00
	00		 je	 $LN3@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  002bb	6a 10		 push	 16			; 00000010H
  002bd	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_VISTA@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  002c2	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  002c5	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 _memcmp
  002ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d1	85 c0		 test	 eax, eax
  002d3	75 09		 jne	 SHORT $LN110@GetKMSHost
  002d5	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv385[ebp], 1
  002dc	eb 07		 jmp	 SHORT $LN108@GetKMSHost
$LN110@GetKMSHost:
  002de	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv385[ebp], 0
$LN108@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  002e5	83 7d b4 00	 cmp	 DWORD PTR tv385[ebp], 0
  002e9	74 09		 je	 SHORT $LN106@GetKMSHost
  002eb	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv378[ebp], 1
  002f2	eb 07		 jmp	 SHORT $LN104@GetKMSHost
$LN106@GetKMSHost:
  002f4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv378[ebp], 0
$LN104@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  002fb	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv378[ebp]
  002ff	85 c9		 test	 ecx, ecx
  00301	0f 85 dc 00 00
	00		 jne	 $LN15@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00307	6a 10		 push	 16			; 00000010H
  00309	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008A@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  0030e	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00311	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 _memcmp
  0031a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031d	85 c0		 test	 eax, eax
  0031f	75 09		 jne	 SHORT $LN118@GetKMSHost
  00321	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv393[ebp], 1
  00328	eb 07		 jmp	 SHORT $LN116@GetKMSHost
$LN118@GetKMSHost:
  0032a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv393[ebp], 0
$LN116@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00331	83 7d b4 00	 cmp	 DWORD PTR tv393[ebp], 0
  00335	74 09		 je	 SHORT $LN114@GetKMSHost
  00337	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv386[ebp], 1
  0033e	eb 07		 jmp	 SHORT $LN112@GetKMSHost
$LN114@GetKMSHost:
  00340	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv386[ebp], 0
$LN112@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  00347	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv386[ebp]
  0034b	85 c9		 test	 ecx, ecx
  0034d	0f 85 90 00 00
	00		 jne	 $LN15@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00353	6a 10		 push	 16			; 00000010H
  00355	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008B@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  0035a	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0035d	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00360	50		 push	 eax
  00361	e8 00 00 00 00	 call	 _memcmp
  00366	83 c4 0c	 add	 esp, 12			; 0000000cH
  00369	85 c0		 test	 eax, eax
  0036b	75 09		 jne	 SHORT $LN126@GetKMSHost
  0036d	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv401[ebp], 1
  00374	eb 07		 jmp	 SHORT $LN124@GetKMSHost
$LN126@GetKMSHost:
  00376	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv401[ebp], 0
$LN124@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0037d	83 7d b4 00	 cmp	 DWORD PTR tv401[ebp], 0
  00381	74 09		 je	 SHORT $LN122@GetKMSHost
  00383	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv394[ebp], 1
  0038a	eb 07		 jmp	 SHORT $LN120@GetKMSHost
$LN122@GetKMSHost:
  0038c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv394[ebp], 0
$LN120@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  00393	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv394[ebp]
  00397	85 c9		 test	 ecx, ecx
  00399	75 48		 jne	 SHORT $LN15@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0039b	6a 10		 push	 16			; 00000010H
  0039d	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008C@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  003a2	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  003a5	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  003a8	50		 push	 eax
  003a9	e8 00 00 00 00	 call	 _memcmp
  003ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b1	85 c0		 test	 eax, eax
  003b3	75 09		 jne	 SHORT $LN134@GetKMSHost
  003b5	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv409[ebp], 1
  003bc	eb 07		 jmp	 SHORT $LN132@GetKMSHost
$LN134@GetKMSHost:
  003be	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv409[ebp], 0
$LN132@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  003c5	83 7d b4 00	 cmp	 DWORD PTR tv409[ebp], 0
  003c9	74 09		 je	 SHORT $LN130@GetKMSHost
  003cb	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv402[ebp], 1
  003d2	eb 07		 jmp	 SHORT $LN128@GetKMSHost
$LN130@GetKMSHost:
  003d4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv402[ebp], 0
$LN128@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 434  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008C

  003db	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv402[ebp]
  003df	85 c9		 test	 ecx, ecx
  003e1	74 1d		 je	 SHORT $LN13@GetKMSHost
$LN15@GetKMSHost:

; 435  : 		)
; 436  : 		{
; 437  : 			keyConfigIndex = rand() % (PKEYCONFIG_SERVER2019_CSVLK + 1 - PKEYCONFIG_SERVER2012_CSVLK) + PKEYCONFIG_SERVER2012_CSVLK;

  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  003e9	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  003ee	79 05		 jns	 SHORT $LN282@GetKMSHost
  003f0	48		 dec	 eax
  003f1	83 c8 fc	 or	 eax, -4			; fffffffcH
  003f4	40		 inc	 eax
$LN282@GetKMSHost:
  003f5	83 c0 02	 add	 eax, 2
  003f8	89 45 f8	 mov	 DWORD PTR _keyConfigIndex$[ebp], eax

; 438  : 		}

  003fb	e9 b0 05 00 00	 jmp	 $LN14@GetKMSHost
$LN13@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00400	6a 10		 push	 16			; 00000010H
  00402	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_7@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  00407	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0040a	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 _memcmp
  00413	83 c4 0c	 add	 esp, 12			; 0000000cH
  00416	85 c0		 test	 eax, eax
  00418	75 09		 jne	 SHORT $LN142@GetKMSHost
  0041a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv417[ebp], 1
  00421	eb 07		 jmp	 SHORT $LN140@GetKMSHost
$LN142@GetKMSHost:
  00423	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv417[ebp], 0
$LN140@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0042a	83 7d b4 00	 cmp	 DWORD PTR tv417[ebp], 0
  0042e	74 09		 je	 SHORT $LN138@GetKMSHost
  00430	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv410[ebp], 1
  00437	eb 07		 jmp	 SHORT $LN136@GetKMSHost
$LN138@GetKMSHost:
  00439	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv410[ebp], 0
$LN136@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  00440	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv410[ebp]
  00444	85 c9		 test	 ecx, ecx
  00446	0f 85 dc 00 00
	00		 jne	 $LN18@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0044c	6a 10		 push	 16			; 00000010H
  0044e	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008R2A@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  00453	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00456	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _memcmp
  0045f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00462	85 c0		 test	 eax, eax
  00464	75 09		 jne	 SHORT $LN150@GetKMSHost
  00466	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv425[ebp], 1
  0046d	eb 07		 jmp	 SHORT $LN148@GetKMSHost
$LN150@GetKMSHost:
  0046f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv425[ebp], 0
$LN148@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00476	83 7d b4 00	 cmp	 DWORD PTR tv425[ebp], 0
  0047a	74 09		 je	 SHORT $LN146@GetKMSHost
  0047c	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv418[ebp], 1
  00483	eb 07		 jmp	 SHORT $LN144@GetKMSHost
$LN146@GetKMSHost:
  00485	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv418[ebp], 0
$LN144@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  0048c	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv418[ebp]
  00490	85 c9		 test	 ecx, ecx
  00492	0f 85 90 00 00
	00		 jne	 $LN18@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00498	6a 10		 push	 16			; 00000010H
  0049a	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008R2B@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  0049f	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  004a2	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 _memcmp
  004ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ae	85 c0		 test	 eax, eax
  004b0	75 09		 jne	 SHORT $LN158@GetKMSHost
  004b2	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv433[ebp], 1
  004b9	eb 07		 jmp	 SHORT $LN156@GetKMSHost
$LN158@GetKMSHost:
  004bb	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv433[ebp], 0
$LN156@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  004c2	83 7d b4 00	 cmp	 DWORD PTR tv433[ebp], 0
  004c6	74 09		 je	 SHORT $LN154@GetKMSHost
  004c8	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv426[ebp], 1
  004cf	eb 07		 jmp	 SHORT $LN152@GetKMSHost
$LN154@GetKMSHost:
  004d1	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv426[ebp], 0
$LN152@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  004d8	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv426[ebp]
  004dc	85 c9		 test	 ecx, ecx
  004de	75 48		 jne	 SHORT $LN18@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  004e0	6a 10		 push	 16			; 00000010H
  004e2	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2008R2C@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  004e7	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  004ea	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _memcmp
  004f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f6	85 c0		 test	 eax, eax
  004f8	75 09		 jne	 SHORT $LN166@GetKMSHost
  004fa	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv441[ebp], 1
  00501	eb 07		 jmp	 SHORT $LN164@GetKMSHost
$LN166@GetKMSHost:
  00503	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv441[ebp], 0
$LN164@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0050a	83 7d b4 00	 cmp	 DWORD PTR tv441[ebp], 0
  0050e	74 09		 je	 SHORT $LN162@GetKMSHost
  00510	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv434[ebp], 1
  00517	eb 07		 jmp	 SHORT $LN160@GetKMSHost
$LN162@GetKMSHost:
  00519	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv434[ebp], 0
$LN160@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 444  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2008R2C

  00520	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv434[ebp]
  00524	85 c9		 test	 ecx, ecx
  00526	74 1d		 je	 SHORT $LN16@GetKMSHost
$LN18@GetKMSHost:

; 445  : 		)
; 446  : 		{
; 447  : 			keyConfigIndex = rand() % (PKEYCONFIG_SERVER2019_CSVLK + 1 - PKEYCONFIG_SERVER2012_CSVLK) + PKEYCONFIG_SERVER2012_CSVLK;

  00528	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0052e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00533	79 05		 jns	 SHORT $LN283@GetKMSHost
  00535	48		 dec	 eax
  00536	83 c8 fc	 or	 eax, -4			; fffffffcH
  00539	40		 inc	 eax
$LN283@GetKMSHost:
  0053a	83 c0 02	 add	 eax, 2
  0053d	89 45 f8	 mov	 DWORD PTR _keyConfigIndex$[ebp], eax

; 448  : 		}

  00540	e9 6b 04 00 00	 jmp	 $LN14@GetKMSHost
$LN16@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00545	6a 10		 push	 16			; 00000010H
  00547	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_8_VOLUME@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 452  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012

  0054c	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0054f	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 _memcmp
  00558	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055b	85 c0		 test	 eax, eax
  0055d	75 09		 jne	 SHORT $LN174@GetKMSHost
  0055f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv449[ebp], 1
  00566	eb 07		 jmp	 SHORT $LN172@GetKMSHost
$LN174@GetKMSHost:
  00568	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv449[ebp], 0
$LN172@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0056f	83 7d b4 00	 cmp	 DWORD PTR tv449[ebp], 0
  00573	74 09		 je	 SHORT $LN170@GetKMSHost
  00575	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv442[ebp], 1
  0057c	eb 07		 jmp	 SHORT $LN168@GetKMSHost
$LN170@GetKMSHost:
  0057e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv442[ebp], 0
$LN168@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 452  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012

  00585	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv442[ebp]
  00589	85 c9		 test	 ecx, ecx
  0058b	75 48		 jne	 SHORT $LN21@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0058d	6a 10		 push	 16			; 00000010H
  0058f	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2012@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 452  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012

  00594	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00597	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0059a	50		 push	 eax
  0059b	e8 00 00 00 00	 call	 _memcmp
  005a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a3	85 c0		 test	 eax, eax
  005a5	75 09		 jne	 SHORT $LN182@GetKMSHost
  005a7	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv457[ebp], 1
  005ae	eb 07		 jmp	 SHORT $LN180@GetKMSHost
$LN182@GetKMSHost:
  005b0	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv457[ebp], 0
$LN180@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  005b7	83 7d b4 00	 cmp	 DWORD PTR tv457[ebp], 0
  005bb	74 09		 je	 SHORT $LN178@GetKMSHost
  005bd	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv450[ebp], 1
  005c4	eb 07		 jmp	 SHORT $LN176@GetKMSHost
$LN178@GetKMSHost:
  005c6	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv450[ebp], 0
$LN176@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 452  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012

  005cd	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv450[ebp]
  005d1	85 c9		 test	 ecx, ecx
  005d3	74 1d		 je	 SHORT $LN19@GetKMSHost
$LN21@GetKMSHost:

; 453  : 		)
; 454  : 		{
; 455  : 			keyConfigIndex = rand() % (PKEYCONFIG_SERVER2019_CSVLK + 1 - PKEYCONFIG_SERVER2012_CSVLK) + PKEYCONFIG_SERVER2012_CSVLK;

  005d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  005db	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  005e0	79 05		 jns	 SHORT $LN284@GetKMSHost
  005e2	48		 dec	 eax
  005e3	83 c8 fc	 or	 eax, -4			; fffffffcH
  005e6	40		 inc	 eax
$LN284@GetKMSHost:
  005e7	83 c0 02	 add	 eax, 2
  005ea	89 45 f8	 mov	 DWORD PTR _keyConfigIndex$[ebp], eax

; 456  : 		}

  005ed	e9 be 03 00 00	 jmp	 $LN14@GetKMSHost
$LN19@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  005f2	6a 10		 push	 16			; 00000010H
  005f4	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_81_VOLUME@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 460  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012R2

  005f9	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  005fc	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  005ff	50		 push	 eax
  00600	e8 00 00 00 00	 call	 _memcmp
  00605	83 c4 0c	 add	 esp, 12			; 0000000cH
  00608	85 c0		 test	 eax, eax
  0060a	75 09		 jne	 SHORT $LN190@GetKMSHost
  0060c	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv465[ebp], 1
  00613	eb 07		 jmp	 SHORT $LN188@GetKMSHost
$LN190@GetKMSHost:
  00615	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv465[ebp], 0
$LN188@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0061c	83 7d b4 00	 cmp	 DWORD PTR tv465[ebp], 0
  00620	74 09		 je	 SHORT $LN186@GetKMSHost
  00622	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv458[ebp], 1
  00629	eb 07		 jmp	 SHORT $LN184@GetKMSHost
$LN186@GetKMSHost:
  0062b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv458[ebp], 0
$LN184@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 460  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012R2

  00632	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv458[ebp]
  00636	85 c9		 test	 ecx, ecx
  00638	75 48		 jne	 SHORT $LN24@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0063a	6a 10		 push	 16			; 00000010H
  0063c	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2012R2@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 460  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012R2

  00641	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00644	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00647	50		 push	 eax
  00648	e8 00 00 00 00	 call	 _memcmp
  0064d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00650	85 c0		 test	 eax, eax
  00652	75 09		 jne	 SHORT $LN198@GetKMSHost
  00654	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv473[ebp], 1
  0065b	eb 07		 jmp	 SHORT $LN196@GetKMSHost
$LN198@GetKMSHost:
  0065d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv473[ebp], 0
$LN196@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00664	83 7d b4 00	 cmp	 DWORD PTR tv473[ebp], 0
  00668	74 09		 je	 SHORT $LN194@GetKMSHost
  0066a	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv466[ebp], 1
  00671	eb 07		 jmp	 SHORT $LN192@GetKMSHost
$LN194@GetKMSHost:
  00673	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv466[ebp], 0
$LN192@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 460  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2012R2

  0067a	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv466[ebp]
  0067e	85 c9		 test	 ecx, ecx
  00680	74 19		 je	 SHORT $LN22@GetKMSHost
$LN24@GetKMSHost:

; 461  : 		)
; 462  : 		{
; 463  : 			keyConfigIndex = rand() % (PKEYCONFIG_SERVER2019_CSVLK + 1 - PKEYCONFIG_SERVER2012R2_CSVLK) + PKEYCONFIG_SERVER2012R2_CSVLK;

  00682	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00688	99		 cdq
  00689	b9 03 00 00 00	 mov	 ecx, 3
  0068e	f7 f9		 idiv	 ecx
  00690	83 c2 03	 add	 edx, 3
  00693	89 55 f8	 mov	 DWORD PTR _keyConfigIndex$[ebp], edx

; 464  : 		}

  00696	e9 15 03 00 00	 jmp	 $LN14@GetKMSHost
$LN22@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0069b	6a 10		 push	 16			; 00000010H
  0069d	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_VOLUME@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  006a2	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  006a5	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 _memcmp
  006ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b1	85 c0		 test	 eax, eax
  006b3	75 09		 jne	 SHORT $LN206@GetKMSHost
  006b5	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv481[ebp], 1
  006bc	eb 07		 jmp	 SHORT $LN204@GetKMSHost
$LN206@GetKMSHost:
  006be	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv481[ebp], 0
$LN204@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  006c5	83 7d b4 00	 cmp	 DWORD PTR tv481[ebp], 0
  006c9	74 09		 je	 SHORT $LN202@GetKMSHost
  006cb	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv474[ebp], 1
  006d2	eb 07		 jmp	 SHORT $LN200@GetKMSHost
$LN202@GetKMSHost:
  006d4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv474[ebp], 0
$LN200@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  006db	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv474[ebp]
  006df	85 c9		 test	 ecx, ecx
  006e1	0f 85 dc 00 00
	00		 jne	 $LN27@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  006e7	6a 10		 push	 16			; 00000010H
  006e9	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_UNKNOWN@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  006ee	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  006f1	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  006f4	50		 push	 eax
  006f5	e8 00 00 00 00	 call	 _memcmp
  006fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  006fd	85 c0		 test	 eax, eax
  006ff	75 09		 jne	 SHORT $LN214@GetKMSHost
  00701	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv489[ebp], 1
  00708	eb 07		 jmp	 SHORT $LN212@GetKMSHost
$LN214@GetKMSHost:
  0070a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv489[ebp], 0
$LN212@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00711	83 7d b4 00	 cmp	 DWORD PTR tv489[ebp], 0
  00715	74 09		 je	 SHORT $LN210@GetKMSHost
  00717	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv482[ebp], 1
  0071e	eb 07		 jmp	 SHORT $LN208@GetKMSHost
$LN210@GetKMSHost:
  00720	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv482[ebp], 0
$LN208@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  00727	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv482[ebp]
  0072b	85 c9		 test	 ecx, ecx
  0072d	0f 85 90 00 00
	00		 jne	 $LN27@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00733	6a 10		 push	 16			; 00000010H
  00735	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_LTSB_2016@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  0073a	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0073d	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 _memcmp
  00746	83 c4 0c	 add	 esp, 12			; 0000000cH
  00749	85 c0		 test	 eax, eax
  0074b	75 09		 jne	 SHORT $LN222@GetKMSHost
  0074d	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv497[ebp], 1
  00754	eb 07		 jmp	 SHORT $LN220@GetKMSHost
$LN222@GetKMSHost:
  00756	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv497[ebp], 0
$LN220@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0075d	83 7d b4 00	 cmp	 DWORD PTR tv497[ebp], 0
  00761	74 09		 je	 SHORT $LN218@GetKMSHost
  00763	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv490[ebp], 1
  0076a	eb 07		 jmp	 SHORT $LN216@GetKMSHost
$LN218@GetKMSHost:
  0076c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv490[ebp], 0
$LN216@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  00773	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv490[ebp]
  00777	85 c9		 test	 ecx, ecx
  00779	75 48		 jne	 SHORT $LN27@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0077b	6a 10		 push	 16			; 00000010H
  0077d	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2016@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  00782	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00785	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00788	50		 push	 eax
  00789	e8 00 00 00 00	 call	 _memcmp
  0078e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00791	85 c0		 test	 eax, eax
  00793	75 09		 jne	 SHORT $LN230@GetKMSHost
  00795	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv505[ebp], 1
  0079c	eb 07		 jmp	 SHORT $LN228@GetKMSHost
$LN230@GetKMSHost:
  0079e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv505[ebp], 0
$LN228@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  007a5	83 7d b4 00	 cmp	 DWORD PTR tv505[ebp], 0
  007a9	74 09		 je	 SHORT $LN226@GetKMSHost
  007ab	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv498[ebp], 1
  007b2	eb 07		 jmp	 SHORT $LN224@GetKMSHost
$LN226@GetKMSHost:
  007b4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv498[ebp], 0
$LN224@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 470  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2016

  007bb	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv498[ebp]
  007bf	85 c9		 test	 ecx, ecx
  007c1	74 1d		 je	 SHORT $LN25@GetKMSHost
$LN27@GetKMSHost:

; 471  : 		)
; 472  : 		{
; 473  : 			keyConfigIndex = rand() % (PKEYCONFIG_SERVER2019_CSVLK + 1 - PKEYCONFIG_SERVER2016_CSVLK) + PKEYCONFIG_SERVER2016_CSVLK;

  007c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  007c9	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  007ce	79 05		 jns	 SHORT $LN285@GetKMSHost
  007d0	48		 dec	 eax
  007d1	83 c8 fe	 or	 eax, -2			; fffffffeH
  007d4	40		 inc	 eax
$LN285@GetKMSHost:
  007d5	83 c0 04	 add	 eax, 4
  007d8	89 45 f8	 mov	 DWORD PTR _keyConfigIndex$[ebp], eax

; 474  : 		}

  007db	e9 d0 01 00 00	 jmp	 $LN14@GetKMSHost
$LN25@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  007e0	6a 10		 push	 16			; 00000010H
  007e2	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_LTSC_2019@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 478  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2019

  007e7	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  007ea	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 _memcmp
  007f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  007f6	85 c0		 test	 eax, eax
  007f8	75 09		 jne	 SHORT $LN238@GetKMSHost
  007fa	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv513[ebp], 1
  00801	eb 07		 jmp	 SHORT $LN236@GetKMSHost
$LN238@GetKMSHost:
  00803	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv513[ebp], 0
$LN236@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0080a	83 7d b4 00	 cmp	 DWORD PTR tv513[ebp], 0
  0080e	74 09		 je	 SHORT $LN234@GetKMSHost
  00810	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv506[ebp], 1
  00817	eb 07		 jmp	 SHORT $LN232@GetKMSHost
$LN234@GetKMSHost:
  00819	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv506[ebp], 0
$LN232@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 478  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2019

  00820	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv506[ebp]
  00824	85 c9		 test	 ecx, ecx
  00826	75 48		 jne	 SHORT $LN30@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00828	6a 10		 push	 16			; 00000010H
  0082a	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_SERVER_2019@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 478  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2019

  0082f	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00832	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00835	50		 push	 eax
  00836	e8 00 00 00 00	 call	 _memcmp
  0083b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0083e	85 c0		 test	 eax, eax
  00840	75 09		 jne	 SHORT $LN246@GetKMSHost
  00842	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv521[ebp], 1
  00849	eb 07		 jmp	 SHORT $LN244@GetKMSHost
$LN246@GetKMSHost:
  0084b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv521[ebp], 0
$LN244@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00852	83 7d b4 00	 cmp	 DWORD PTR tv521[ebp], 0
  00856	74 09		 je	 SHORT $LN242@GetKMSHost
  00858	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv514[ebp], 1
  0085f	eb 07		 jmp	 SHORT $LN240@GetKMSHost
$LN242@GetKMSHost:
  00861	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv514[ebp], 0
$LN240@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 478  : 			|| Request->KmsID == KMS_ID_WINDOWS_SERVER_2019

  00868	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv514[ebp]
  0086c	85 c9		 test	 ecx, ecx
  0086e	74 0c		 je	 SHORT $LN28@GetKMSHost
$LN30@GetKMSHost:

; 479  : 		)
; 480  : 		{
; 481  : 			keyConfigIndex = PKEYCONFIG_SERVER2019_CSVLK;

  00870	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 5

; 482  : 		}

  00877	e9 34 01 00 00	 jmp	 $LN14@GetKMSHost
$LN28@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0087c	6a 10		 push	 16			; 00000010H
  0087e	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_8_RETAIL@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  00883	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  00886	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00889	50		 push	 eax
  0088a	e8 00 00 00 00	 call	 _memcmp
  0088f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00892	85 c0		 test	 eax, eax
  00894	75 09		 jne	 SHORT $LN254@GetKMSHost
  00896	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv529[ebp], 1
  0089d	eb 07		 jmp	 SHORT $LN252@GetKMSHost
$LN254@GetKMSHost:
  0089f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv529[ebp], 0
$LN252@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  008a6	83 7d b4 00	 cmp	 DWORD PTR tv529[ebp], 0
  008aa	74 09		 je	 SHORT $LN250@GetKMSHost
  008ac	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv522[ebp], 1
  008b3	eb 07		 jmp	 SHORT $LN248@GetKMSHost
$LN250@GetKMSHost:
  008b5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv522[ebp], 0
$LN248@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  008bc	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv522[ebp]
  008c0	85 c9		 test	 ecx, ecx
  008c2	0f 85 90 00 00
	00		 jne	 $LN33@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  008c8	6a 10		 push	 16			; 00000010H
  008ca	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_81_RETAIL@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  008cf	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  008d2	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  008d5	50		 push	 eax
  008d6	e8 00 00 00 00	 call	 _memcmp
  008db	83 c4 0c	 add	 esp, 12			; 0000000cH
  008de	85 c0		 test	 eax, eax
  008e0	75 09		 jne	 SHORT $LN262@GetKMSHost
  008e2	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv537[ebp], 1
  008e9	eb 07		 jmp	 SHORT $LN260@GetKMSHost
$LN262@GetKMSHost:
  008eb	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv537[ebp], 0
$LN260@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  008f2	83 7d b4 00	 cmp	 DWORD PTR tv537[ebp], 0
  008f6	74 09		 je	 SHORT $LN258@GetKMSHost
  008f8	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv530[ebp], 1
  008ff	eb 07		 jmp	 SHORT $LN256@GetKMSHost
$LN258@GetKMSHost:
  00901	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv530[ebp], 0
$LN256@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  00908	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv530[ebp]
  0090c	85 c9		 test	 ecx, ecx
  0090e	75 48		 jne	 SHORT $LN33@GetKMSHost
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00910	6a 10		 push	 16			; 00000010H
  00912	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_RETAIL@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  00917	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0091a	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0091d	50		 push	 eax
  0091e	e8 00 00 00 00	 call	 _memcmp
  00923	83 c4 0c	 add	 esp, 12			; 0000000cH
  00926	85 c0		 test	 eax, eax
  00928	75 09		 jne	 SHORT $LN270@GetKMSHost
  0092a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv545[ebp], 1
  00931	eb 07		 jmp	 SHORT $LN268@GetKMSHost
$LN270@GetKMSHost:
  00933	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv545[ebp], 0
$LN268@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0093a	83 7d b4 00	 cmp	 DWORD PTR tv545[ebp], 0
  0093e	74 09		 je	 SHORT $LN266@GetKMSHost
  00940	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv538[ebp], 1
  00947	eb 07		 jmp	 SHORT $LN264@GetKMSHost
$LN266@GetKMSHost:
  00949	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv538[ebp], 0
$LN264@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 487  : 			|| Request->KmsID == KMS_ID_WINDOWS_10_RETAIL 

  00950	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv538[ebp]
  00954	85 c9		 test	 ecx, ecx
  00956	74 09		 je	 SHORT $LN31@GetKMSHost
$LN33@GetKMSHost:

; 488  : 		)
; 489  : 		{
; 490  : 			keyConfigIndex = PKEYCONFIG_SERVER2019R_CSVLK;

  00958	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 10 ; 0000000aH

; 491  : 		}

  0095f	eb 4f		 jmp	 SHORT $LN14@GetKMSHost
$LN31@GetKMSHost:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00961	6a 10		 push	 16			; 00000010H
  00963	68 00 00 00 00	 push	 OFFSET ?KMS_ID_WINDOWS_10_GOV@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 494  : 			   Request->KmsID == KMS_ID_WINDOWS_10_GOV

  00968	8b 45 08	 mov	 eax, DWORD PTR _Request$[ebp]
  0096b	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0096e	50		 push	 eax
  0096f	e8 00 00 00 00	 call	 _memcmp
  00974	83 c4 0c	 add	 esp, 12			; 0000000cH
  00977	85 c0		 test	 eax, eax
  00979	75 09		 jne	 SHORT $LN278@GetKMSHost
  0097b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv553[ebp], 1
  00982	eb 07		 jmp	 SHORT $LN276@GetKMSHost
$LN278@GetKMSHost:
  00984	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv553[ebp], 0
$LN276@GetKMSHost:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0098b	83 7d b4 00	 cmp	 DWORD PTR tv553[ebp], 0
  0098f	74 09		 je	 SHORT $LN274@GetKMSHost
  00991	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv546[ebp], 1
  00998	eb 07		 jmp	 SHORT $LN272@GetKMSHost
$LN274@GetKMSHost:
  0099a	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv546[ebp], 0
$LN272@GetKMSHost:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 494  : 			   Request->KmsID == KMS_ID_WINDOWS_10_GOV

  009a1	0f b6 4d b0	 movzx	 ecx, BYTE PTR tv546[ebp]
  009a5	85 c9		 test	 ecx, ecx
  009a7	74 07		 je	 SHORT $LN14@GetKMSHost

; 495  : 		)
; 496  : 		{
; 497  : 			keyConfigIndex = PKEYCONFIG_WIN10GOV_CSVLK;

  009a9	c7 45 f8 0b 00
	00 00		 mov	 DWORD PTR _keyConfigIndex$[ebp], 11 ; 0000000bH
$LN14@GetKMSHost:

; 498  : 		}
; 499  : 
; 500  : 		if (keyConfigIndex == PKEYCONFIG_SERVER2019_CSVLK || keyConfigIndex == PKEYCONFIG_SERVER2019R_CSVLK)

  009b0	83 7d f8 05	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 5
  009b4	74 06		 je	 SHORT $LN37@GetKMSHost
  009b6	83 7d f8 0a	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 10 ; 0000000aH
  009ba	75 16		 jne	 SHORT $LN35@GetKMSHost
$LN37@GetKMSHost:

; 501  : 		{
; 502  : 			osTypeIndex = rand() % (HOST_SERVER2019 + 1 - HOST_SERVER2012R2) + HOST_SERVER2012R2;

  009bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  009c2	99		 cdq
  009c3	b9 03 00 00 00	 mov	 ecx, 3
  009c8	f7 f9		 idiv	 ecx
  009ca	83 c2 03	 add	 edx, 3
  009cd	89 55 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], edx

; 503  : 		}

  009d0	eb 58		 jmp	 SHORT $LN3@GetKMSHost
$LN35@GetKMSHost:

; 504  : 		else if (keyConfigIndex == PKEYCONFIG_SERVER2016_CSVLK)

  009d2	83 7d f8 04	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 4
  009d6	75 16		 jne	 SHORT $LN38@GetKMSHost

; 505  : 		{
; 506  : 			osTypeIndex = rand() % (HOST_SERVER2016 + 1 - HOST_SERVER2012) + HOST_SERVER2012;

  009d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  009de	99		 cdq
  009df	b9 03 00 00 00	 mov	 ecx, 3
  009e4	f7 f9		 idiv	 ecx
  009e6	83 c2 02	 add	 edx, 2
  009e9	89 55 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], edx

; 507  : 		}

  009ec	eb 3c		 jmp	 SHORT $LN3@GetKMSHost
$LN38@GetKMSHost:

; 508  : 		else if (keyConfigIndex == PKEYCONFIG_SERVER2012R2_CSVLK)

  009ee	83 7d f8 03	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 3
  009f2	75 1a		 jne	 SHORT $LN40@GetKMSHost

; 509  : 		{
; 510  : 			osTypeIndex = rand() % (HOST_SERVER2012R2 + 1 - HOST_SERVER2012) + HOST_SERVER2012;

  009f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  009fa	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  009ff	79 05		 jns	 SHORT $LN286@GetKMSHost
  00a01	48		 dec	 eax
  00a02	83 c8 fe	 or	 eax, -2			; fffffffeH
  00a05	40		 inc	 eax
$LN286@GetKMSHost:
  00a06	83 c0 02	 add	 eax, 2
  00a09	89 45 fc	 mov	 DWORD PTR _osTypeIndex$[ebp], eax

; 511  : 		}

  00a0c	eb 1c		 jmp	 SHORT $LN3@GetKMSHost
$LN40@GetKMSHost:

; 512  : 		else if (keyConfigIndex == PKEYCONFIG_SERVER2012_CSVLK)

  00a0e	83 7d f8 02	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 2
  00a12	75 09		 jne	 SHORT $LN42@GetKMSHost

; 513  : 		{
; 514  : 			osTypeIndex = HOST_SERVER2012;

  00a14	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _osTypeIndex$[ebp], 2

; 515  : 		}

  00a1b	eb 0d		 jmp	 SHORT $LN3@GetKMSHost
$LN42@GetKMSHost:

; 516  : 		else if (keyConfigIndex == PKEYCONFIG_WIN10GOV_CSVLK)

  00a1d	83 7d f8 0b	 cmp	 DWORD PTR _keyConfigIndex$[ebp], 11 ; 0000000bH
  00a21	75 07		 jne	 SHORT $LN3@GetKMSHost

; 517  : 		{
; 518  : 			osTypeIndex = HOST_SERVER2019;

  00a23	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _osTypeIndex$[ebp], 5
$LN3@GetKMSHost:

; 519  : 		}
; 520  : 	}
; 521  : 
; 522  : 	*osPkey = keyConfigIndex;

  00a2a	8b 45 0c	 mov	 eax, DWORD PTR _osPkey$[ebp]
  00a2d	8b 4d f8	 mov	 ecx, DWORD PTR _keyConfigIndex$[ebp]
  00a30	89 08		 mov	 DWORD PTR [eax], ecx

; 523  : 	*osHost = osTypeIndex;

  00a32	8b 45 10	 mov	 eax, DWORD PTR _osHost$[ebp]
  00a35	8b 4d fc	 mov	 ecx, DWORD PTR _osTypeIndex$[ebp]
  00a38	89 08		 mov	 DWORD PTR [eax], ecx

; 524  : }

  00a3a	5f		 pop	 edi
  00a3b	5e		 pop	 esi
  00a3c	5b		 pop	 ebx
  00a3d	8b e5		 mov	 esp, ebp
  00a3f	5d		 pop	 ebp
  00a40	c2 0c 00	 ret	 12			; 0000000cH
?GetKMSHost@@YGXQAUKMSBaseRequest@@PAH1@Z ENDP		; GetKMSHost
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?CreateResponse@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_requestSize$ = 8					; size = 4
_request$ = 12						; size = 4
_responseSize$ = 16					; size = 4
_gotRequest$ = 20					; size = 4
_sentResponse$ = 24					; size = 4
?CreateResponse@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z PROC ; CreateResponse, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  : 	// KMS Protocol Version
; 249  : 	switch (((DWORD *)request)[0])

  00013	b8 04 00 00 00	 mov	 eax, 4
  00018	6b c8 00	 imul	 ecx, eax, 0
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _request$[ebp]
  0001e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00021	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  00024	81 7d bc 00 00
	04 00		 cmp	 DWORD PTR tv66[ebp], 262144 ; 00040000H
  0002b	74 14		 je	 SHORT $LN4@CreateResp
  0002d	81 7d bc 00 00
	05 00		 cmp	 DWORD PTR tv66[ebp], 327680 ; 00050000H
  00034	74 26		 je	 SHORT $LN5@CreateResp
  00036	81 7d bc 00 00
	06 00		 cmp	 DWORD PTR tv66[ebp], 393216 ; 00060000H
  0003d	74 1d		 je	 SHORT $LN5@CreateResp
  0003f	eb 36		 jmp	 SHORT $LN6@CreateResp
$LN4@CreateResp:

; 250  : 	{
; 251  : 	case KMS_VERSION_4:
; 252  : 		return CreateResponseV4(requestSize, request, responseSize, gotRequest, sentResponse);

  00041	8b 45 18	 mov	 eax, DWORD PTR _sentResponse$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 14	 mov	 ecx, DWORD PTR _gotRequest$[ebp]
  00048	51		 push	 ecx
  00049	8b 55 10	 mov	 edx, DWORD PTR _responseSize$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _request$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _requestSize$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ?CreateResponseV4@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponseV4
  0005a	eb 1d		 jmp	 SHORT $LN1@CreateResp
$LN5@CreateResp:

; 253  : 
; 254  : 	case KMS_VERSION_5:
; 255  : 	case KMS_VERSION_6:
; 256  : 		return CreateResponseV6(requestSize, request, responseSize, gotRequest, sentResponse);

  0005c	8b 45 18	 mov	 eax, DWORD PTR _sentResponse$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 14	 mov	 ecx, DWORD PTR _gotRequest$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 10	 mov	 edx, DWORD PTR _responseSize$[ebp]
  00067	52		 push	 edx
  00068	8b 45 0c	 mov	 eax, DWORD PTR _request$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _requestSize$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?CreateResponseV6@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponseV6
  00075	eb 02		 jmp	 SHORT $LN1@CreateResp
$LN6@CreateResp:

; 257  : 
; 258  : 	default:
; 259  : 		return nullptr;

  00077	33 c0		 xor	 eax, eax
$LN1@CreateResp:

; 260  : 	}
; 261  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 14 00	 ret	 20			; 00000014H
?CreateResponse@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ENDP ; CreateResponse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?CreateResponseV6@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z
_TEXT	SEGMENT
_response$ = -1600					; size = 4
_encryptSize$ = -1596					; size = 4
_HMacSHA256$1 = -1592					; size = 32
_HmacKey$2 = -1560					; size = 16
_HmacDataLen$3 = -1544					; size = 4
_c$4 = -1540						; size = 1024
_encryption_start$ = -516				; size = 4
_BaseResponse$ = -512					; size = 172
_DecryptSize$ = -340					; size = 4
_DecryptSize$5 = -336					; size = 4
_ResponseIVData$ = -332					; size = 16
_ResponseIV$ = -316					; size = 4
_next$ = -312						; size = 4
_buffer$ = -308						; size = 304
_Request$ = -4						; size = 4
_requestSize$ = 8					; size = 4
_request$ = 12						; size = 4
_responseSize$ = 16					; size = 4
_gotRequest$ = 20					; size = 4
_sentResponse$ = 24					; size = 4
?CreateResponseV6@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z PROC ; CreateResponseV6, COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 07 00
	00		 sub	 esp, 1856		; 00000740H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 148  : 	// Get KMS V5/V6 Request Object
; 149  : 	KMSV6Request *Request = (KMSV6Request *)request;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _request$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _Request$[ebp], eax

; 150  : 
; 151  : 	// Prepare a Workspace Buffer
; 152  : 	BYTE buffer[MAX_RESPONSE_SIZE];
; 153  : 	BYTE *next = buffer;

  0001c	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 154  : 
; 155  : 	// Version
; 156  : 	*(DWORD *)next = Request->Version;

  00028	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _Request$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	89 10		 mov	 DWORD PTR [eax], edx

; 157  : 	next += sizeof(Request->Version);

  00035	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0003b	83 c0 04	 add	 eax, 4
  0003e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 158  : 
; 159  : 	// Response IV (same as Request in V5, random in V6)
; 160  : 	BYTE *ResponseIV = next, ResponseIVData[16];

  00044	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0004a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _ResponseIV$[ebp], eax

; 161  : 
; 162  : 	if (Request->Version == KMS_VERSION_5)

  00050	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  00053	81 38 00 00 05
	00		 cmp	 DWORD PTR [eax], 327680	; 00050000H
  00059	75 29		 jne	 SHORT $LN2@CreateResp

; 163  : 	{
; 164  : 		// Use same IV as request
; 165  : 		memcpy(next, Request->IV, sizeof(Request->IV));

  0005b	6a 10		 push	 16			; 00000010H
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  00060	83 c0 04	 add	 eax, 4
  00063	50		 push	 eax
  00064	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 		next += sizeof(Request->IV);

  00073	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00079	83 c0 10	 add	 eax, 16			; 00000010H
  0007c	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 167  : 	}

  00082	eb 5a		 jmp	 SHORT $LN3@CreateResp
$LN2@CreateResp:

; 168  : 	else
; 169  : 	{
; 170  : 		// Get Random IV
; 171  : 		GetRandomBytes(ResponseIVData, sizeof(ResponseIVData));

  00084	6a 10		 push	 16			; 00000010H
  00086	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _ResponseIVData$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?GetRandomBytes@@YGHPAEK@Z ; GetRandomBytes

; 172  : 
; 173  : 		// First we put decrypted Response IV for HMAC-SHA256
; 174  : 		DWORD DecryptSize = sizeof(ResponseIVData);

  00092	c7 85 b0 fe ff
	ff 10 00 00 00	 mov	 DWORD PTR _DecryptSize$5[ebp], 16 ; 00000010H

; 175  : 		memcpy(next, ResponseIVData, sizeof(ResponseIVData));

  0009c	6a 10		 push	 16			; 00000010H
  0009e	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _ResponseIVData$[ebp]
  000a4	50		 push	 eax
  000a5	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 		AesDecryptMessage(Request->Version, nullptr, next, &DecryptSize);

  000b4	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _DecryptSize$5[ebp]
  000ba	50		 push	 eax
  000bb	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  000c1	51		 push	 ecx
  000c2	6a 00		 push	 0
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _Request$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?AesDecryptMessage@@YGHKPBEPAEPAK@Z ; AesDecryptMessage

; 177  : 		next += sizeof(ResponseIVData);

  000cf	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
  000d8	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax
$LN3@CreateResp:

; 178  : 	}
; 179  : 
; 180  : 	// AES Decryption (Decrypted Salt is also needed)
; 181  : 	DWORD DecryptSize = requestSize - sizeof(Request->Version);

  000de	8b 45 08	 mov	 eax, DWORD PTR _requestSize$[ebp]
  000e1	83 e8 04	 sub	 eax, 4
  000e4	89 85 ac fe ff
	ff		 mov	 DWORD PTR _DecryptSize$[ebp], eax

; 182  : 	AesDecryptMessage(Request->Version, nullptr, Request->IV, &DecryptSize);

  000ea	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _DecryptSize$[ebp]
  000f0	50		 push	 eax
  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _Request$[ebp]
  000f4	83 c1 04	 add	 ecx, 4
  000f7	51		 push	 ecx
  000f8	6a 00		 push	 0
  000fa	8b 55 fc	 mov	 edx, DWORD PTR _Request$[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?AesDecryptMessage@@YGHKPBEPAEPAK@Z ; AesDecryptMessage

; 183  : 
; 184  : 	// Create BaseResponse
; 185  : 	KMSBaseResponse BaseResponse;
; 186  : 	CreateBaseResponse(&Request->BaseRequest, &BaseResponse);

  00105	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _Request$[ebp]
  0010f	83 c1 14	 add	 ecx, 20			; 00000014H
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 ?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateBaseResponse

; 187  : 
; 188  : 	// Pack BaseResponse
; 189  : 	BYTE *encryption_start = next;

  00118	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0011e	89 85 fc fd ff
	ff		 mov	 DWORD PTR _encryption_start$[ebp], eax

; 190  : 	next += PackBaseResponse(next, &BaseResponse);

  00124	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  0012a	50		 push	 eax
  0012b	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  00131	51		 push	 ecx
  00132	e8 00 00 00 00	 call	 ?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z ; PackBaseResponse
  00137	03 85 c8 fe ff
	ff		 add	 eax, DWORD PTR _next$[ebp]
  0013d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 191  : 
; 192  : 	// Random Key
; 193  : 	GetRandomBytes(next, 16);

  00143	6a 10		 push	 16			; 00000010H
  00145	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?GetRandomBytes@@YGHPAEK@Z ; GetRandomBytes

; 194  : 
; 195  : 	// SHA-256
; 196  : 	GetSha256Hash(next, 16, next + 16);

  00151	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00157	83 c0 10	 add	 eax, 16			; 00000010H
  0015a	50		 push	 eax
  0015b	6a 10		 push	 16			; 00000010H
  0015d	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?GetSha256Hash@@YGHPBEKPAE@Z ; GetSha256Hash

; 197  : 
; 198  : 	// Xor
; 199  : 	XorBuffer(Request->IV, next);

  00169	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d fc	 mov	 ecx, DWORD PTR _Request$[ebp]
  00173	83 c1 04	 add	 ecx, 4
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 ?XorBuffer@@YGXPBEPAE@Z	; XorBuffer

; 200  : 
; 201  : 	next += 48; // sizeof(RandomSalt) + sizeof(SHA256)

  0017c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00182	83 c0 30	 add	 eax, 48			; 00000030H
  00185	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 202  : 
; 203  : 	if (Request->Version == KMS_VERSION_6)

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  0018e	81 38 00 00 06
	00		 cmp	 DWORD PTR [eax], 393216	; 00060000H
  00194	0f 85 0e 01 00
	00		 jne	 $LN4@CreateResp

; 204  : 	{
; 205  : 		// Unknown8
; 206  : 		// memcpy(next, Unknown8, sizeof(Unknown8));
; 207  : 		// next += sizeof(Unknown8);
; 208  : 		*(QWORD *)next = Settings.KMSHWID;

  0019a	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  001a0	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?Settings@@3UKMSServerSettings@@A+16
  001a6	89 08		 mov	 DWORD PTR [eax], ecx
  001a8	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?Settings@@3UKMSServerSettings@@A+20
  001ae	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 209  : 		next += sizeof(Settings.KMSHWID);

  001b1	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  001b7	83 c0 08	 add	 eax, 8
  001ba	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 210  : 		OutputDebugStringEx(L"[KMS Info] KMS Host HWID      : %016I64X\n", Settings.KMSHWID);

  001c0	a1 14 00 00 00	 mov	 eax, DWORD PTR ?Settings@@3UKMSServerSettings@@A+20
  001c5	50		 push	 eax
  001c6	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?Settings@@3UKMSServerSettings@@A+16
  001cc	51		 push	 ecx
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@MIJEHOOC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
  001d2	68 00 02 00 00	 push	 512			; 00000200H
  001d7	8d 95 fc f9 ff
	ff		 lea	 edx, DWORD PTR _c$4[ebp]
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 _swprintf_s
  001e3	83 c4 14	 add	 esp, 20			; 00000014H
  001e6	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _c$4[ebp]
  001ec	50		 push	 eax
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 211  : 
; 212  : 		// Xor2
; 213  : 		memcpy(next, Request->IV, sizeof(Request->IV));

  001f3	6a 10		 push	 16			; 00000010H
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  001f8	83 c0 04	 add	 eax, 4
  001fb	50		 push	 eax
  001fc	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _next$[ebp]
  00202	51		 push	 ecx
  00203	e8 00 00 00 00	 call	 _memcpy
  00208	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : 		next += sizeof(Request->IV);

  0020b	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00211	83 c0 10	 add	 eax, 16			; 00000010H
  00214	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 215  : 
; 216  : 		// HmacSHA256
; 217  : 		DWORD HmacDataLen = (DWORD)(next - ResponseIV);

  0021a	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00220	2b 85 c4 fe ff
	ff		 sub	 eax, DWORD PTR _ResponseIV$[ebp]
  00226	89 85 f8 f9 ff
	ff		 mov	 DWORD PTR _HmacDataLen$3[ebp], eax

; 218  : 		BYTE HmacKey[16], HMacSHA256[32];
; 219  : 		GetHmacKey((ULONG64 *)&BaseResponse.TimeStamp, HmacKey);

  0022c	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _HmacKey$2[ebp]
  00232	50		 push	 eax
  00233	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _BaseResponse$[ebp+152]
  00239	51		 push	 ecx
  0023a	e8 00 00 00 00	 call	 ?GetHmacKey@@YGXPB_KPAE@Z ; GetHmacKey

; 220  : 		GetHmacSha256(HmacKey, HmacDataLen, ResponseIV, HMacSHA256);

  0023f	8d 85 c8 f9 ff
	ff		 lea	 eax, DWORD PTR _HMacSHA256$1[ebp]
  00245	50		 push	 eax
  00246	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _ResponseIV$[ebp]
  0024c	51		 push	 ecx
  0024d	8b 95 f8 f9 ff
	ff		 mov	 edx, DWORD PTR _HmacDataLen$3[ebp]
  00253	52		 push	 edx
  00254	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _HmacKey$2[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ?GetHmacSha256@@YGHPBEK0PAE@Z ; GetHmacSha256

; 221  : 		memcpy(next, &HMacSHA256[16], 16);

  00260	6a 10		 push	 16			; 00000010H
  00262	b8 01 00 00 00	 mov	 eax, 1
  00267	c1 e0 04	 shl	 eax, 4
  0026a	8d 8c 05 c8 f9
	ff ff		 lea	 ecx, DWORD PTR _HMacSHA256$1[ebp+eax]
  00271	51		 push	 ecx
  00272	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _next$[ebp]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 _memcpy
  0027e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  : 		next += 16;

  00281	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  00287	83 c0 10	 add	 eax, 16			; 00000010H
  0028a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _next$[ebp], eax

; 223  : 
; 224  : 		// Put back the plaintext response IV
; 225  : 		memcpy(ResponseIV, ResponseIVData, sizeof(ResponseIVData));

  00290	6a 10		 push	 16			; 00000010H
  00292	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _ResponseIVData$[ebp]
  00298	50		 push	 eax
  00299	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _ResponseIV$[ebp]
  0029f	51		 push	 ecx
  002a0	e8 00 00 00 00	 call	 _memcpy
  002a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@CreateResp:

; 226  : 	}
; 227  : 
; 228  : 	// Encrypt Response
; 229  : 	DWORD encryptSize = (DWORD)(next - encryption_start);

  002a8	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _next$[ebp]
  002ae	2b 85 fc fd ff
	ff		 sub	 eax, DWORD PTR _encryption_start$[ebp]
  002b4	89 85 c4 f9 ff
	ff		 mov	 DWORD PTR _encryptSize$[ebp], eax

; 230  : 	AesEncryptMessage(Request->Version, ResponseIV, encryption_start, &encryptSize, MAX_RESPONSE_SIZE - 20);

  002ba	68 1c 01 00 00	 push	 284			; 0000011cH
  002bf	8d 85 c4 f9 ff
	ff		 lea	 eax, DWORD PTR _encryptSize$[ebp]
  002c5	50		 push	 eax
  002c6	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _encryption_start$[ebp]
  002cc	51		 push	 ecx
  002cd	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _ResponseIV$[ebp]
  002d3	52		 push	 edx
  002d4	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	51		 push	 ecx
  002da	e8 00 00 00 00	 call	 ?AesEncryptMessage@@YGHKPBEPAEPAKK@Z ; AesEncryptMessage

; 231  : 
; 232  : 	// Put Created Response into RPC Buffer
; 233  : 	*responseSize = encryptSize + 20;

  002df	8b 85 c4 f9 ff
	ff		 mov	 eax, DWORD PTR _encryptSize$[ebp]
  002e5	83 c0 14	 add	 eax, 20			; 00000014H
  002e8	8b 4d 10	 mov	 ecx, DWORD PTR _responseSize$[ebp]
  002eb	89 01		 mov	 DWORD PTR [ecx], eax

; 234  : 	BYTE *response = (BYTE *)midl_user_allocate(*responseSize);

  002ed	8b 45 10	 mov	 eax, DWORD PTR _responseSize$[ebp]
  002f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f2	51		 push	 ecx
  002f3	e8 00 00 00 00	 call	 _MIDL_user_allocate@4
  002f8	89 85 c0 f9 ff
	ff		 mov	 DWORD PTR _response$[ebp], eax

; 235  : 	memcpy(response, buffer, *responseSize);

  002fe	8b 45 10	 mov	 eax, DWORD PTR _responseSize$[ebp]
  00301	8b 08		 mov	 ecx, DWORD PTR [eax]
  00303	51		 push	 ecx
  00304	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0030a	52		 push	 edx
  0030b	8b 85 c0 f9 ff
	ff		 mov	 eax, DWORD PTR _response$[ebp]
  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 _memcpy
  00317	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : 
; 237  : 	// Return the Got Request and the Response to be sent
; 238  : 	memcpy(gotRequest, &Request->BaseRequest, sizeof(KMSBaseRequest));

  0031a	68 ec 00 00 00	 push	 236			; 000000ecH
  0031f	8b 45 fc	 mov	 eax, DWORD PTR _Request$[ebp]
  00322	83 c0 14	 add	 eax, 20			; 00000014H
  00325	50		 push	 eax
  00326	8b 4d 14	 mov	 ecx, DWORD PTR _gotRequest$[ebp]
  00329	51		 push	 ecx
  0032a	e8 00 00 00 00	 call	 _memcpy
  0032f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 239  : 	memcpy(sentResponse, &BaseResponse, sizeof(KMSBaseResponse));

  00332	68 ac 00 00 00	 push	 172			; 000000acH
  00337	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  0033d	50		 push	 eax
  0033e	8b 4d 18	 mov	 ecx, DWORD PTR _sentResponse$[ebp]
  00341	51		 push	 ecx
  00342	e8 00 00 00 00	 call	 _memcpy
  00347	83 c4 0c	 add	 esp, 12			; 0000000cH

; 240  : 
; 241  : 	// Return Created Response
; 242  : 	return response;

  0034a	8b 85 c0 f9 ff
	ff		 mov	 eax, DWORD PTR _response$[ebp]

; 243  : }

  00350	5f		 pop	 edi
  00351	5e		 pop	 esi
  00352	5b		 pop	 ebx
  00353	8b e5		 mov	 esp, ebp
  00355	5d		 pop	 ebp
  00356	c2 14 00	 ret	 20			; 00000014H
?CreateResponseV6@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ENDP ; CreateResponseV6
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?CreateResponseV4@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z
_TEXT	SEGMENT
_response$ = -720					; size = 4
_size$ = -716						; size = 4
_BaseResponse$ = -712					; size = 172
_buffer$ = -540						; size = 304
_BaseRequest$ = -236					; size = 236
_requestSize$ = 8					; size = 4
_request$ = 12						; size = 4
_responseSize$ = 16					; size = 4
_gotRequest$ = 20					; size = 4
_sentResponse$ = 24					; size = 4
?CreateResponseV4@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z PROC ; CreateResponseV4, COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 03 00
	00		 sub	 esp, 848		; 00000350H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 112  : 	UNREFERENCED_PARAMETER(requestSize);
; 113  : 
; 114  : 	// Get KMS Base Request Object
; 115  : 	KMSBaseRequest BaseRequest = ((KMSV4Request *)request)->BaseRequest;

  00016	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  0001b	8b 75 0c	 mov	 esi, DWORD PTR _request$[ebp]
  0001e	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR _BaseRequest$[ebp]
  00024	f3 a5		 rep movsd

; 116  : 
; 117  : 	// Prepare a Workspace Buffer
; 118  : 	BYTE buffer[MAX_RESPONSE_SIZE];
; 119  : 
; 120  : 	// Create BaseResponse
; 121  : 	KMSBaseResponse BaseResponse;
; 122  : 	CreateBaseResponse(&BaseRequest, &BaseResponse);

  00026	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  0002c	50		 push	 eax
  0002d	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _BaseRequest$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateBaseResponse

; 123  : 
; 124  : 	// Pack BaseResponse
; 125  : 	int size = PackBaseResponse(buffer, &BaseResponse);

  00039	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  0003f	50		 push	 eax
  00040	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z ; PackBaseResponse
  0004c	89 85 34 fd ff
	ff		 mov	 DWORD PTR _size$[ebp], eax

; 126  : 
; 127  : 	// Generate Hash Signature
; 128  : 	GetV4Cmac(size, buffer, buffer + size);

  00052	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  00058	8d 8c 05 e4 fd
	ff ff		 lea	 ecx, DWORD PTR _buffer$[ebp+eax]
  0005f	51		 push	 ecx
  00060	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00066	52		 push	 edx
  00067	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?GetV4Cmac@@YGXHPBEPAE@Z ; GetV4Cmac

; 129  : 
; 130  : 	// Put Response Size
; 131  : 	*responseSize = size + 16;

  00073	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _size$[ebp]
  00079	83 c0 10	 add	 eax, 16			; 00000010H
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _responseSize$[ebp]
  0007f	89 01		 mov	 DWORD PTR [ecx], eax

; 132  : 
; 133  : 	// Put Response Data
; 134  : 	BYTE *response = (BYTE *)midl_user_allocate(*responseSize);

  00081	8b 45 10	 mov	 eax, DWORD PTR _responseSize$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _MIDL_user_allocate@4
  0008c	89 85 30 fd ff
	ff		 mov	 DWORD PTR _response$[ebp], eax

; 135  : 	memcpy(response, buffer, *responseSize);

  00092	8b 45 10	 mov	 eax, DWORD PTR _responseSize$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	51		 push	 ecx
  00098	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  0009e	52		 push	 edx
  0009f	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR _response$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memcpy
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 
; 137  : 	// Return the Got Request and the Response to be sent
; 138  : 	memcpy(gotRequest, &BaseRequest, sizeof(KMSBaseRequest));

  000ae	68 ec 00 00 00	 push	 236			; 000000ecH
  000b3	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _BaseRequest$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _gotRequest$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memcpy
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 139  : 	memcpy(sentResponse, &BaseResponse, sizeof(KMSBaseResponse));

  000c6	68 ac 00 00 00	 push	 172			; 000000acH
  000cb	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR _BaseResponse$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 18	 mov	 ecx, DWORD PTR _sentResponse$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _memcpy
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 
; 141  : 	// Return Created Response
; 142  : 	return response;

  000de	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR _response$[ebp]

; 143  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 14 00	 ret	 20			; 00000014H
?CreateResponseV4@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ENDP ; CreateResponseV4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z
_TEXT	SEGMENT
_c$1 = -16400						; size = 1024
_c$2 = -15376						; size = 1024
_c$3 = -14352						; size = 1024
_c$4 = -13328						; size = 1024
_c$5 = -12304						; size = 1024
_c$6 = -11280						; size = 1024
_c$7 = -10256						; size = 1024
_c$8 = -9232						; size = 1024
_c$9 = -8208						; size = 1024
_c$10 = -7184						; size = 1024
_c$11 = -6160						; size = 1024
_c$12 = -5136						; size = 1024
_c$13 = -4112						; size = 1024
_c$14 = -3088						; size = 1024
_c$15 = -2064						; size = 1024
_c$16 = -1040						; size = 1024
_st$ = -16						; size = 16
_BaseRequest$ = 8					; size = 4
_BaseResponse$ = 12					; size = 4
?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z PROC ; CreateBaseResponse, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 42 00 00	 mov	 eax, 16912		; 00004210H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00015	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 67   : 	// Version
; 68   : 	BaseResponse->Version = BaseRequest->Version;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	89 10		 mov	 DWORD PTR [eax], edx

; 69   : 
; 70   : 	// Set extended PID and PID size
; 71   : 	GetKMSPID(BaseResponse->PIDData, BaseRequest);

  00024	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _BaseResponse$[ebp]
  0002b	83 c1 08	 add	 ecx, 8
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?GetKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z ; GetKMSPID

; 72   : 	BaseResponse->PIDSize = ((DWORD)wcslen(BaseResponse->PIDData) + 1) << 1;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  00037	83 c0 08	 add	 eax, 8
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00041	83 c4 04	 add	 esp, 4
  00044	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  00048	8b 55 0c	 mov	 edx, DWORD PTR _BaseResponse$[ebp]
  0004b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 73   : 
; 74   : 	// CMID
; 75   : 	BaseResponse->CMID = BaseRequest->CMID;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00051	83 c0 40	 add	 eax, 64			; 00000040H
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _BaseResponse$[ebp]
  00057	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	89 11		 mov	 DWORD PTR [ecx], edx
  00061	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00064	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00067	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0006a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0006d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00070	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 76   : 
; 77   : 	// TimeStamp
; 78   : 	BaseResponse->TimeStamp = BaseRequest->TimeStamp;

  00073	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00076	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00079	8b 50 58	 mov	 edx, DWORD PTR [eax+88]
  0007c	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0007f	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  00085	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx

; 79   : 
; 80   : 	// Machine Count
; 81   : 	BaseResponse->CurrentCount = BaseRequest->RequiredCount << 1;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  0008e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00091	d1 e1		 shl	 ecx, 1
  00093	8b 55 0c	 mov	 edx, DWORD PTR _BaseResponse$[ebp]
  00096	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 82   : 
; 83   : 	// Intervals
; 84   : 	BaseResponse->VLActivationInterval = Settings.ActivationInterval;

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0009f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Settings@@3UKMSServerSettings@@A+4
  000a5	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 85   : 	BaseResponse->VLRenewalInterval = Settings.RenewalInterval;

  000ab	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  000ae	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?Settings@@3UKMSServerSettings@@A+8
  000b4	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx

; 86   : 
; 87   : 	SYSTEMTIME st;
; 88   : 	FileTimeToSystemTime(&BaseRequest->TimeStamp, &st);

  000ba	8d 45 f0	 lea	 eax, DWORD PTR _st$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  000c1	83 c1 54	 add	 ecx, 84			; 00000054H
  000c4	51		 push	 ecx
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8

; 89   : 	OutputDebugStringEx(L"[KMS Info] Protocol Version   : %i.%i\n", BaseRequest->MajorVer, BaseRequest->MinorVer);

  000cb	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  000ce	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000d1	51		 push	 ecx
  000d2	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  000d5	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@DKENENAL@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAo?$AAt@
  000df	68 00 02 00 00	 push	 512			; 00000200H
  000e4	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _c$16[ebp]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _swprintf_s
  000f0	83 c4 14	 add	 esp, 20			; 00000014H
  000f3	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _c$16[ebp]
  000f9	50		 push	 eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 90   : 	OutputDebugStringEx(L"[KMS Info] License Status     : %u\n", BaseRequest->LicenseStatus);

  00100	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00103	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00106	51		 push	 ecx
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@JCFEPELC@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAL?$AAi?$AAc?$AAe@
  0010c	68 00 02 00 00	 push	 512			; 00000200H
  00111	8d 95 f0 f7 ff
	ff		 lea	 edx, DWORD PTR _c$15[ebp]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 _swprintf_s
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
  00120	8d 85 f0 f7 ff
	ff		 lea	 eax, DWORD PTR _c$15[ebp]
  00126	50		 push	 eax
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 91   : 	OutputDebugStringEx(L"[KMS Info] Remaining Period   : %u minutes\n", BaseRequest->RemainingGrace);

  0012d	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00130	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00133	51		 push	 ecx
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@CLJAJGPJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAm?$AAa@
  00139	68 00 02 00 00	 push	 512			; 00000200H
  0013e	8d 95 f0 f3 ff
	ff		 lea	 edx, DWORD PTR _c$14[ebp]
  00144	52		 push	 edx
  00145	e8 00 00 00 00	 call	 _swprintf_s
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
  0014d	8d 85 f0 f3 ff
	ff		 lea	 eax, DWORD PTR _c$14[ebp]
  00153	50		 push	 eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 92   : 	OutputDebugStringEx(L"[KMS Info] VM / VHD Boot      : %i\n", BaseRequest->VMInfo);

  0015a	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  0015d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00160	51		 push	 ecx
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@DDFIFPLB@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAV?$AAM?$AA?5?$AA?1@
  00166	68 00 02 00 00	 push	 512			; 00000200H
  0016b	8d 95 f0 ef ff
	ff		 lea	 edx, DWORD PTR _c$13[ebp]
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 _swprintf_s
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	8d 85 f0 ef ff
	ff		 lea	 eax, DWORD PTR _c$13[ebp]
  00180	50		 push	 eax
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 93   : 	OutputDebugStringEx(L"[KMS Info] Application ID     : {"GUID_FORMAT"}\n", GUID_ARG(BaseRequest->AppID));

  00187	b8 01 00 00 00	 mov	 eax, 1
  0018c	6b c8 07	 imul	 ecx, eax, 7
  0018f	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00192	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  00197	50		 push	 eax
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	6b d1 06	 imul	 edx, ecx, 6
  001a0	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  001a3	0f b6 4c 10 18	 movzx	 ecx, BYTE PTR [eax+edx+24]
  001a8	51		 push	 ecx
  001a9	ba 01 00 00 00	 mov	 edx, 1
  001ae	6b c2 05	 imul	 eax, edx, 5
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  001b4	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  001b9	52		 push	 edx
  001ba	b8 01 00 00 00	 mov	 eax, 1
  001bf	c1 e0 02	 shl	 eax, 2
  001c2	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  001c5	0f b6 54 01 18	 movzx	 edx, BYTE PTR [ecx+eax+24]
  001ca	52		 push	 edx
  001cb	b8 01 00 00 00	 mov	 eax, 1
  001d0	6b c8 03	 imul	 ecx, eax, 3
  001d3	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  001d6	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  001db	50		 push	 eax
  001dc	b9 01 00 00 00	 mov	 ecx, 1
  001e1	d1 e1		 shl	 ecx, 1
  001e3	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  001e6	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  001eb	50		 push	 eax
  001ec	b9 01 00 00 00	 mov	 ecx, 1
  001f1	c1 e1 00	 shl	 ecx, 0
  001f4	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  001f7	0f b6 44 0a 18	 movzx	 eax, BYTE PTR [edx+ecx+24]
  001fc	50		 push	 eax
  001fd	b9 01 00 00 00	 mov	 ecx, 1
  00202	6b d1 00	 imul	 edx, ecx, 0
  00205	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00208	0f b6 4c 10 18	 movzx	 ecx, BYTE PTR [eax+edx+24]
  0020d	51		 push	 ecx
  0020e	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00211	0f b7 42 16	 movzx	 eax, WORD PTR [edx+22]
  00215	50		 push	 eax
  00216	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00219	0f b7 51 14	 movzx	 edx, WORD PTR [ecx+20]
  0021d	52		 push	 edx
  0021e	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00221	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00224	51		 push	 ecx
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@KECHFOCG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAp?$AAp?$AAl@
  0022a	68 00 02 00 00	 push	 512			; 00000200H
  0022f	8d 95 f0 eb ff
	ff		 lea	 edx, DWORD PTR _c$12[ebp]
  00235	52		 push	 edx
  00236	e8 00 00 00 00	 call	 _swprintf_s
  0023b	83 c4 38	 add	 esp, 56			; 00000038H
  0023e	8d 85 f0 eb ff
	ff		 lea	 eax, DWORD PTR _c$12[ebp]
  00244	50		 push	 eax
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 94   : 	OutputDebugStringEx(L"[KMS Info] Activation ID      : {"GUID_FORMAT"}\n", GUID_ARG(BaseRequest->SkuID));

  0024b	b8 01 00 00 00	 mov	 eax, 1
  00250	6b c8 07	 imul	 ecx, eax, 7
  00253	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00256	0f b6 44 0a 28	 movzx	 eax, BYTE PTR [edx+ecx+40]
  0025b	50		 push	 eax
  0025c	b9 01 00 00 00	 mov	 ecx, 1
  00261	6b d1 06	 imul	 edx, ecx, 6
  00264	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00267	0f b6 4c 10 28	 movzx	 ecx, BYTE PTR [eax+edx+40]
  0026c	51		 push	 ecx
  0026d	ba 01 00 00 00	 mov	 edx, 1
  00272	6b c2 05	 imul	 eax, edx, 5
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00278	0f b6 54 01 28	 movzx	 edx, BYTE PTR [ecx+eax+40]
  0027d	52		 push	 edx
  0027e	b8 01 00 00 00	 mov	 eax, 1
  00283	c1 e0 02	 shl	 eax, 2
  00286	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00289	0f b6 54 01 28	 movzx	 edx, BYTE PTR [ecx+eax+40]
  0028e	52		 push	 edx
  0028f	b8 01 00 00 00	 mov	 eax, 1
  00294	6b c8 03	 imul	 ecx, eax, 3
  00297	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0029a	0f b6 44 0a 28	 movzx	 eax, BYTE PTR [edx+ecx+40]
  0029f	50		 push	 eax
  002a0	b9 01 00 00 00	 mov	 ecx, 1
  002a5	d1 e1		 shl	 ecx, 1
  002a7	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  002aa	0f b6 44 0a 28	 movzx	 eax, BYTE PTR [edx+ecx+40]
  002af	50		 push	 eax
  002b0	b9 01 00 00 00	 mov	 ecx, 1
  002b5	c1 e1 00	 shl	 ecx, 0
  002b8	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  002bb	0f b6 44 0a 28	 movzx	 eax, BYTE PTR [edx+ecx+40]
  002c0	50		 push	 eax
  002c1	b9 01 00 00 00	 mov	 ecx, 1
  002c6	6b d1 00	 imul	 edx, ecx, 0
  002c9	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  002cc	0f b6 4c 10 28	 movzx	 ecx, BYTE PTR [eax+edx+40]
  002d1	51		 push	 ecx
  002d2	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  002d5	0f b7 42 26	 movzx	 eax, WORD PTR [edx+38]
  002d9	50		 push	 eax
  002da	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  002dd	0f b7 51 24	 movzx	 edx, WORD PTR [ecx+36]
  002e1	52		 push	 edx
  002e2	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  002e5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002e8	51		 push	 ecx
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@EEINMAFO@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@
  002ee	68 00 02 00 00	 push	 512			; 00000200H
  002f3	8d 95 f0 e7 ff
	ff		 lea	 edx, DWORD PTR _c$11[ebp]
  002f9	52		 push	 edx
  002fa	e8 00 00 00 00	 call	 _swprintf_s
  002ff	83 c4 38	 add	 esp, 56			; 00000038H
  00302	8d 85 f0 e7 ff
	ff		 lea	 eax, DWORD PTR _c$11[ebp]
  00308	50		 push	 eax
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 95   : 	OutputDebugStringEx(L"[KMS Info] KMS Counted ID     : {"GUID_FORMAT"}\n", GUID_ARG(BaseRequest->KmsID));

  0030f	b8 01 00 00 00	 mov	 eax, 1
  00314	6b c8 07	 imul	 ecx, eax, 7
  00317	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0031a	0f b6 44 0a 38	 movzx	 eax, BYTE PTR [edx+ecx+56]
  0031f	50		 push	 eax
  00320	b9 01 00 00 00	 mov	 ecx, 1
  00325	6b d1 06	 imul	 edx, ecx, 6
  00328	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  0032b	0f b6 4c 10 38	 movzx	 ecx, BYTE PTR [eax+edx+56]
  00330	51		 push	 ecx
  00331	ba 01 00 00 00	 mov	 edx, 1
  00336	6b c2 05	 imul	 eax, edx, 5
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  0033c	0f b6 54 01 38	 movzx	 edx, BYTE PTR [ecx+eax+56]
  00341	52		 push	 edx
  00342	b8 01 00 00 00	 mov	 eax, 1
  00347	c1 e0 02	 shl	 eax, 2
  0034a	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  0034d	0f b6 54 01 38	 movzx	 edx, BYTE PTR [ecx+eax+56]
  00352	52		 push	 edx
  00353	b8 01 00 00 00	 mov	 eax, 1
  00358	6b c8 03	 imul	 ecx, eax, 3
  0035b	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0035e	0f b6 44 0a 38	 movzx	 eax, BYTE PTR [edx+ecx+56]
  00363	50		 push	 eax
  00364	b9 01 00 00 00	 mov	 ecx, 1
  00369	d1 e1		 shl	 ecx, 1
  0036b	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0036e	0f b6 44 0a 38	 movzx	 eax, BYTE PTR [edx+ecx+56]
  00373	50		 push	 eax
  00374	b9 01 00 00 00	 mov	 ecx, 1
  00379	c1 e1 00	 shl	 ecx, 0
  0037c	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0037f	0f b6 44 0a 38	 movzx	 eax, BYTE PTR [edx+ecx+56]
  00384	50		 push	 eax
  00385	b9 01 00 00 00	 mov	 ecx, 1
  0038a	6b d1 00	 imul	 edx, ecx, 0
  0038d	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00390	0f b6 4c 10 38	 movzx	 ecx, BYTE PTR [eax+edx+56]
  00395	51		 push	 ecx
  00396	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00399	0f b7 42 36	 movzx	 eax, WORD PTR [edx+54]
  0039d	50		 push	 eax
  0039e	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  003a1	0f b7 51 34	 movzx	 edx, WORD PTR [ecx+52]
  003a5	52		 push	 edx
  003a6	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  003a9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003ac	51		 push	 ecx
  003ad	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@DJDIIKK@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
  003b2	68 00 02 00 00	 push	 512			; 00000200H
  003b7	8d 95 f0 e3 ff
	ff		 lea	 edx, DWORD PTR _c$10[ebp]
  003bd	52		 push	 edx
  003be	e8 00 00 00 00	 call	 _swprintf_s
  003c3	83 c4 38	 add	 esp, 56			; 00000038H
  003c6	8d 85 f0 e3 ff
	ff		 lea	 eax, DWORD PTR _c$10[ebp]
  003cc	50		 push	 eax
  003cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 96   : 	OutputDebugStringEx(L"[KMS Info] Client Machine ID  : {"GUID_FORMAT"}\n", GUID_ARG(BaseRequest->CMID));

  003d3	b8 01 00 00 00	 mov	 eax, 1
  003d8	6b c8 07	 imul	 ecx, eax, 7
  003db	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  003de	0f b6 44 0a 48	 movzx	 eax, BYTE PTR [edx+ecx+72]
  003e3	50		 push	 eax
  003e4	b9 01 00 00 00	 mov	 ecx, 1
  003e9	6b d1 06	 imul	 edx, ecx, 6
  003ec	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  003ef	0f b6 4c 10 48	 movzx	 ecx, BYTE PTR [eax+edx+72]
  003f4	51		 push	 ecx
  003f5	ba 01 00 00 00	 mov	 edx, 1
  003fa	6b c2 05	 imul	 eax, edx, 5
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00400	0f b6 54 01 48	 movzx	 edx, BYTE PTR [ecx+eax+72]
  00405	52		 push	 edx
  00406	b8 01 00 00 00	 mov	 eax, 1
  0040b	c1 e0 02	 shl	 eax, 2
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00411	0f b6 54 01 48	 movzx	 edx, BYTE PTR [ecx+eax+72]
  00416	52		 push	 edx
  00417	b8 01 00 00 00	 mov	 eax, 1
  0041c	6b c8 03	 imul	 ecx, eax, 3
  0041f	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00422	0f b6 44 0a 48	 movzx	 eax, BYTE PTR [edx+ecx+72]
  00427	50		 push	 eax
  00428	b9 01 00 00 00	 mov	 ecx, 1
  0042d	d1 e1		 shl	 ecx, 1
  0042f	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00432	0f b6 44 0a 48	 movzx	 eax, BYTE PTR [edx+ecx+72]
  00437	50		 push	 eax
  00438	b9 01 00 00 00	 mov	 ecx, 1
  0043d	c1 e1 00	 shl	 ecx, 0
  00440	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00443	0f b6 44 0a 48	 movzx	 eax, BYTE PTR [edx+ecx+72]
  00448	50		 push	 eax
  00449	b9 01 00 00 00	 mov	 ecx, 1
  0044e	6b d1 00	 imul	 edx, ecx, 0
  00451	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00454	0f b6 4c 10 48	 movzx	 ecx, BYTE PTR [eax+edx+72]
  00459	51		 push	 ecx
  0045a	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  0045d	0f b7 42 46	 movzx	 eax, WORD PTR [edx+70]
  00461	50		 push	 eax
  00462	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00465	0f b7 51 44	 movzx	 edx, WORD PTR [ecx+68]
  00469	52		 push	 edx
  0046a	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  0046d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00470	51		 push	 ecx
  00471	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@PGPANPPH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAC?$AAl?$AAi?$AAe@
  00476	68 00 02 00 00	 push	 512			; 00000200H
  0047b	8d 95 f0 df ff
	ff		 lea	 edx, DWORD PTR _c$9[ebp]
  00481	52		 push	 edx
  00482	e8 00 00 00 00	 call	 _swprintf_s
  00487	83 c4 38	 add	 esp, 56			; 00000038H
  0048a	8d 85 f0 df ff
	ff		 lea	 eax, DWORD PTR _c$9[ebp]
  00490	50		 push	 eax
  00491	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 97   : 	OutputDebugStringEx(L"[KMS Info] Previous CMID      : {"GUID_FORMAT"}\n", GUID_ARG(BaseRequest->CMID_prev));

  00497	b8 01 00 00 00	 mov	 eax, 1
  0049c	6b c8 07	 imul	 ecx, eax, 7
  0049f	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  004a2	0f b6 44 0a 64	 movzx	 eax, BYTE PTR [edx+ecx+100]
  004a7	50		 push	 eax
  004a8	b9 01 00 00 00	 mov	 ecx, 1
  004ad	6b d1 06	 imul	 edx, ecx, 6
  004b0	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  004b3	0f b6 4c 10 64	 movzx	 ecx, BYTE PTR [eax+edx+100]
  004b8	51		 push	 ecx
  004b9	ba 01 00 00 00	 mov	 edx, 1
  004be	6b c2 05	 imul	 eax, edx, 5
  004c1	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  004c4	0f b6 54 01 64	 movzx	 edx, BYTE PTR [ecx+eax+100]
  004c9	52		 push	 edx
  004ca	b8 01 00 00 00	 mov	 eax, 1
  004cf	c1 e0 02	 shl	 eax, 2
  004d2	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  004d5	0f b6 54 01 64	 movzx	 edx, BYTE PTR [ecx+eax+100]
  004da	52		 push	 edx
  004db	b8 01 00 00 00	 mov	 eax, 1
  004e0	6b c8 03	 imul	 ecx, eax, 3
  004e3	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  004e6	0f b6 44 0a 64	 movzx	 eax, BYTE PTR [edx+ecx+100]
  004eb	50		 push	 eax
  004ec	b9 01 00 00 00	 mov	 ecx, 1
  004f1	d1 e1		 shl	 ecx, 1
  004f3	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  004f6	0f b6 44 0a 64	 movzx	 eax, BYTE PTR [edx+ecx+100]
  004fb	50		 push	 eax
  004fc	b9 01 00 00 00	 mov	 ecx, 1
  00501	c1 e1 00	 shl	 ecx, 0
  00504	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00507	0f b6 44 0a 64	 movzx	 eax, BYTE PTR [edx+ecx+100]
  0050c	50		 push	 eax
  0050d	b9 01 00 00 00	 mov	 ecx, 1
  00512	6b d1 00	 imul	 edx, ecx, 0
  00515	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00518	0f b6 4c 10 64	 movzx	 ecx, BYTE PTR [eax+edx+100]
  0051d	51		 push	 ecx
  0051e	8b 55 08	 mov	 edx, DWORD PTR _BaseRequest$[ebp]
  00521	0f b7 42 62	 movzx	 eax, WORD PTR [edx+98]
  00525	50		 push	 eax
  00526	8b 4d 08	 mov	 ecx, DWORD PTR _BaseRequest$[ebp]
  00529	0f b7 51 60	 movzx	 edx, WORD PTR [ecx+96]
  0052d	52		 push	 edx
  0052e	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  00531	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00534	51		 push	 ecx
  00535	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@LCFIDJEJ@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAP?$AAr?$AAe?$AAv@
  0053a	68 00 02 00 00	 push	 512			; 00000200H
  0053f	8d 95 f0 db ff
	ff		 lea	 edx, DWORD PTR _c$8[ebp]
  00545	52		 push	 edx
  00546	e8 00 00 00 00	 call	 _swprintf_s
  0054b	83 c4 38	 add	 esp, 56			; 00000038H
  0054e	8d 85 f0 db ff
	ff		 lea	 eax, DWORD PTR _c$8[ebp]
  00554	50		 push	 eax
  00555	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 98   : 	OutputDebugStringEx(L"[KMS Info] Workstation Name   : %ls\n", BaseRequest->MachineName);

  0055b	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  0055e	83 c0 6c	 add	 eax, 108		; 0000006cH
  00561	50		 push	 eax
  00562	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NGPBGECF@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAW?$AAo?$AAr?$AAk@
  00567	68 00 02 00 00	 push	 512			; 00000200H
  0056c	8d 8d f0 d7 ff
	ff		 lea	 ecx, DWORD PTR _c$7[ebp]
  00572	51		 push	 ecx
  00573	e8 00 00 00 00	 call	 _swprintf_s
  00578	83 c4 10	 add	 esp, 16			; 00000010H
  0057b	8d 85 f0 d7 ff
	ff		 lea	 eax, DWORD PTR _c$7[ebp]
  00581	50		 push	 eax
  00582	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 99   : 	OutputDebugStringEx(L"[KMS Info] TimeStamp (UTC)    : %04d/%02d/%02d %02d:%02d:%02d\n", st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);

  00588	0f b7 45 fc	 movzx	 eax, WORD PTR _st$[ebp+12]
  0058c	50		 push	 eax
  0058d	0f b7 4d fa	 movzx	 ecx, WORD PTR _st$[ebp+10]
  00591	51		 push	 ecx
  00592	0f b7 55 f8	 movzx	 edx, WORD PTR _st$[ebp+8]
  00596	52		 push	 edx
  00597	0f b7 45 f6	 movzx	 eax, WORD PTR _st$[ebp+6]
  0059b	50		 push	 eax
  0059c	0f b7 4d f2	 movzx	 ecx, WORD PTR _st$[ebp+2]
  005a0	51		 push	 ecx
  005a1	0f b7 55 f0	 movzx	 edx, WORD PTR _st$[ebp]
  005a5	52		 push	 edx
  005a6	68 00 00 00 00	 push	 OFFSET ??_C@_1HO@HGDMBCIA@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAT?$AAi?$AAm?$AAe@
  005ab	68 00 02 00 00	 push	 512			; 00000200H
  005b0	8d 85 f0 d3 ff
	ff		 lea	 eax, DWORD PTR _c$6[ebp]
  005b6	50		 push	 eax
  005b7	e8 00 00 00 00	 call	 _swprintf_s
  005bc	83 c4 24	 add	 esp, 36			; 00000024H
  005bf	8d 85 f0 d3 ff
	ff		 lea	 eax, DWORD PTR _c$6[ebp]
  005c5	50		 push	 eax
  005c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 100  : 	OutputDebugStringEx(L"[KMS Info] Request N Count    : %u minimum clients\n", BaseRequest->RequiredCount);

  005cc	8b 45 08	 mov	 eax, DWORD PTR _BaseRequest$[ebp]
  005cf	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  005d2	51		 push	 ecx
  005d3	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@GPJNJLNN@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAq?$AAu@
  005d8	68 00 02 00 00	 push	 512			; 00000200H
  005dd	8d 95 f0 cf ff
	ff		 lea	 edx, DWORD PTR _c$5[ebp]
  005e3	52		 push	 edx
  005e4	e8 00 00 00 00	 call	 _swprintf_s
  005e9	83 c4 10	 add	 esp, 16			; 00000010H
  005ec	8d 85 f0 cf ff
	ff		 lea	 eax, DWORD PTR _c$5[ebp]
  005f2	50		 push	 eax
  005f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 101  : 	OutputDebugStringEx(L"[KMS Info] Response N Count   : %u activated clients\n", BaseResponse->CurrentCount);

  005f9	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  005fc	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00602	51		 push	 ecx
  00603	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@HGJFMJBH@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAs?$AAp@
  00608	68 00 02 00 00	 push	 512			; 00000200H
  0060d	8d 95 f0 cb ff
	ff		 lea	 edx, DWORD PTR _c$4[ebp]
  00613	52		 push	 edx
  00614	e8 00 00 00 00	 call	 _swprintf_s
  00619	83 c4 10	 add	 esp, 16			; 00000010H
  0061c	8d 85 f0 cb ff
	ff		 lea	 eax, DWORD PTR _c$4[ebp]
  00622	50		 push	 eax
  00623	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 102  : 	OutputDebugStringEx(L"[KMS Info] Activation Interval: %u minutes\n", BaseResponse->VLActivationInterval);

  00629	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0062c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00632	51		 push	 ecx
  00633	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@BPHNMHII@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAA?$AAc?$AAt?$AAi@
  00638	68 00 02 00 00	 push	 512			; 00000200H
  0063d	8d 95 f0 c7 ff
	ff		 lea	 edx, DWORD PTR _c$3[ebp]
  00643	52		 push	 edx
  00644	e8 00 00 00 00	 call	 _swprintf_s
  00649	83 c4 10	 add	 esp, 16			; 00000010H
  0064c	8d 85 f0 c7 ff
	ff		 lea	 eax, DWORD PTR _c$3[ebp]
  00652	50		 push	 eax
  00653	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 103  : 	OutputDebugStringEx(L"[KMS Info] Renewal Interval   : %u minutes\n", BaseResponse->VLRenewalInterval);

  00659	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0065c	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00662	51		 push	 ecx
  00663	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@PBPELGEG@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAR?$AAe?$AAn?$AAe@
  00668	68 00 02 00 00	 push	 512			; 00000200H
  0066d	8d 95 f0 c3 ff
	ff		 lea	 edx, DWORD PTR _c$2[ebp]
  00673	52		 push	 edx
  00674	e8 00 00 00 00	 call	 _swprintf_s
  00679	83 c4 10	 add	 esp, 16			; 00000010H
  0067c	8d 85 f0 c3 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  00682	50		 push	 eax
  00683	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 104  : 	OutputDebugStringEx(L"[KMS Info] KMS Host ePID      : %ls\n", BaseResponse->PIDData);

  00689	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0068c	83 c0 08	 add	 eax, 8
  0068f	50		 push	 eax
  00690	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@HMAHJFAI@?$AA?$FL?$AAK?$AAM?$AAS?$AA?5?$AAI?$AAn?$AAf?$AAo?$AA?$FN?$AA?5?$AAK?$AAM?$AAS?$AA?5@
  00695	68 00 02 00 00	 push	 512			; 00000200H
  0069a	8d 8d f0 bf ff
	ff		 lea	 ecx, DWORD PTR _c$1[ebp]
  006a0	51		 push	 ecx
  006a1	e8 00 00 00 00	 call	 _swprintf_s
  006a6	83 c4 10	 add	 esp, 16			; 00000010H
  006a9	8d 85 f0 bf ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  006af	50		 push	 eax
  006b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 105  : 
; 106  : 	return;
; 107  : }

  006b6	5f		 pop	 edi
  006b7	5e		 pop	 esi
  006b8	5b		 pop	 ebx
  006b9	8b e5		 mov	 esp, ebp
  006bb	5d		 pop	 ebp
  006bc	c2 08 00	 ret	 8
?CreateBaseResponse@@YGXPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ENDP ; CreateBaseResponse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z
_TEXT	SEGMENT
_CopySize$ = -8						; size = 4
_next$ = -4						; size = 4
_response$ = 8						; size = 4
_BaseResponse$ = 12					; size = 4
?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z PROC	; PackBaseResponse, COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   : 	BYTE *next = response;

  00013	8b 45 08	 mov	 eax, DWORD PTR _response$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax

; 44   : 
; 45   : 	size_t CopySize = sizeof(BaseResponse->Version)

  00019	8b 45 0c	 mov	 eax, DWORD PTR _BaseResponse$[ebp]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	83 c1 08	 add	 ecx, 8
  00022	89 4d f8	 mov	 DWORD PTR _CopySize$[ebp], ecx

; 46   : 		+ sizeof(BaseResponse->PIDSize)
; 47   : 		+ BaseResponse->PIDSize;
; 48   : 
; 49   : 	memcpy(next, &BaseResponse->Version, CopySize);

  00025	8b 45 f8	 mov	 eax, DWORD PTR _CopySize$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _BaseResponse$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 _memcpy
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 50   : 	next += CopySize;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  0003c	03 45 f8	 add	 eax, DWORD PTR _CopySize$[ebp]
  0003f	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax

; 51   : 
; 52   : 	CopySize = sizeof(BaseResponse->CMID)

  00042	c7 45 f8 24 00
	00 00		 mov	 DWORD PTR _CopySize$[ebp], 36 ; 00000024H

; 53   : 		+ sizeof(BaseResponse->TimeStamp)
; 54   : 		+ sizeof(BaseResponse->CurrentCount)
; 55   : 		+ sizeof(BaseResponse->VLActivationInterval)
; 56   : 		+ sizeof(BaseResponse->VLRenewalInterval);
; 57   : 
; 58   : 	memcpy(next, &BaseResponse->CMID, CopySize);

  00049	8b 45 f8	 mov	 eax, DWORD PTR _CopySize$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _BaseResponse$[ebp]
  00050	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00056	51		 push	 ecx
  00057	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _memcpy
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 	next += CopySize;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00066	03 45 f8	 add	 eax, DWORD PTR _CopySize$[ebp]
  00069	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax

; 60   : 
; 61   : 	return (int)(next - response);

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  0006f	2b 45 08	 sub	 eax, DWORD PTR _response$[ebp]

; 62   : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?PackBaseResponse@@YGHPAEPBUKMSBaseResponse@@@Z ENDP	; PackBaseResponse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?GetKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z
_TEXT	SEGMENT
tv176 = -76						; size = 4
tv168 = -76						; size = 4
tv160 = -76						; size = 4
tv152 = -76						; size = 4
tv144 = -76						; size = 4
tv183 = -72						; size = 4
tv175 = -72						; size = 4
tv167 = -72						; size = 4
tv159 = -72						; size = 4
tv151 = -72						; size = 4
_AppIDIndex$ = -4					; size = 4
_KMSPID$ = 8						; size = 4
_Request$ = 12						; size = 4
?GetKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z PROC		; GetKMSPID, COMDAT

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 574  : 	// Assume Windows by default
; 575  : 	int AppIDIndex = APP_INDEX_WINDOWS;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _AppIDIndex$[ebp], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0001a	6a 10		 push	 16			; 00000010H
  0001c	68 00 00 00 00	 push	 OFFSET ?APP_ID_OFFICE14@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 576  : 	if (Request->AppID == APP_ID_OFFICE14)

  00021	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00024	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _memcmp
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN18@GetKMSPID
  00034	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv151[ebp], 1
  0003b	eb 07		 jmp	 SHORT $LN16@GetKMSPID
$LN18@GetKMSPID:
  0003d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN16@GetKMSPID:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00044	83 7d b8 00	 cmp	 DWORD PTR tv151[ebp], 0
  00048	74 09		 je	 SHORT $LN14@GetKMSPID
  0004a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv144[ebp], 1
  00051	eb 07		 jmp	 SHORT $LN12@GetKMSPID
$LN14@GetKMSPID:
  00053	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv144[ebp], 0
$LN12@GetKMSPID:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 576  : 	if (Request->AppID == APP_ID_OFFICE14)

  0005a	0f b6 4d b4	 movzx	 ecx, BYTE PTR tv144[ebp]
  0005e	85 c9		 test	 ecx, ecx
  00060	74 07		 je	 SHORT $LN2@GetKMSPID

; 577  : 	{
; 578  : 		AppIDIndex = APP_INDEX_OFFICE14;

  00062	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _AppIDIndex$[ebp], 1
$LN2@GetKMSPID:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00069	6a 10		 push	 16			; 00000010H
  0006b	68 00 00 00 00	 push	 OFFSET ?APP_ID_OFFICE15@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 580  : 	if (Request->AppID == APP_ID_OFFICE15)

  00070	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00073	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memcmp
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	85 c0		 test	 eax, eax
  00081	75 09		 jne	 SHORT $LN26@GetKMSPID
  00083	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv159[ebp], 1
  0008a	eb 07		 jmp	 SHORT $LN24@GetKMSPID
$LN26@GetKMSPID:
  0008c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@GetKMSPID:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00093	83 7d b8 00	 cmp	 DWORD PTR tv159[ebp], 0
  00097	74 09		 je	 SHORT $LN22@GetKMSPID
  00099	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv152[ebp], 1
  000a0	eb 07		 jmp	 SHORT $LN20@GetKMSPID
$LN22@GetKMSPID:
  000a2	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN20@GetKMSPID:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 580  : 	if (Request->AppID == APP_ID_OFFICE15)

  000a9	0f b6 4d b4	 movzx	 ecx, BYTE PTR tv152[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	0f 84 f4 00 00
	00		 je	 $LN3@GetKMSPID
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000b5	6a 10		 push	 16			; 00000010H
  000b7	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2013@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 582  : 		if (Request->KmsID == KMS_ID_OFFICE_2013)

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  000bf	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memcmp
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	85 c0		 test	 eax, eax
  000cd	75 09		 jne	 SHORT $LN34@GetKMSPID
  000cf	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv167[ebp], 1
  000d6	eb 07		 jmp	 SHORT $LN32@GetKMSPID
$LN34@GetKMSPID:
  000d8	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN32@GetKMSPID:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  000df	83 7d b8 00	 cmp	 DWORD PTR tv167[ebp], 0
  000e3	74 09		 je	 SHORT $LN30@GetKMSPID
  000e5	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  000ec	eb 07		 jmp	 SHORT $LN28@GetKMSPID
$LN30@GetKMSPID:
  000ee	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN28@GetKMSPID:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 582  : 		if (Request->KmsID == KMS_ID_OFFICE_2013)

  000f5	0f b6 4d b4	 movzx	 ecx, BYTE PTR tv160[ebp]
  000f9	85 c9		 test	 ecx, ecx
  000fb	74 0c		 je	 SHORT $LN4@GetKMSPID

; 583  : 		{
; 584  : 			AppIDIndex = APP_INDEX_OFFICE15;

  000fd	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _AppIDIndex$[ebp], 2

; 585  : 		}

  00104	e9 a0 00 00 00	 jmp	 $LN3@GetKMSPID
$LN4@GetKMSPID:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00109	6a 10		 push	 16			; 00000010H
  0010b	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2016@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 586  : 		else if (Request->KmsID == KMS_ID_OFFICE_2016)

  00110	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00113	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _memcmp
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	85 c0		 test	 eax, eax
  00121	75 09		 jne	 SHORT $LN42@GetKMSPID
  00123	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv175[ebp], 1
  0012a	eb 07		 jmp	 SHORT $LN40@GetKMSPID
$LN42@GetKMSPID:
  0012c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
$LN40@GetKMSPID:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00133	83 7d b8 00	 cmp	 DWORD PTR tv175[ebp], 0
  00137	74 09		 je	 SHORT $LN38@GetKMSPID
  00139	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv168[ebp], 1
  00140	eb 07		 jmp	 SHORT $LN36@GetKMSPID
$LN38@GetKMSPID:
  00142	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN36@GetKMSPID:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 586  : 		else if (Request->KmsID == KMS_ID_OFFICE_2016)

  00149	0f b6 4d b4	 movzx	 ecx, BYTE PTR tv168[ebp]
  0014d	85 c9		 test	 ecx, ecx
  0014f	74 09		 je	 SHORT $LN6@GetKMSPID

; 587  : 		{
; 588  : 			AppIDIndex = APP_INDEX_OFFICE16;

  00151	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _AppIDIndex$[ebp], 3

; 589  : 		}

  00158	eb 4f		 jmp	 SHORT $LN3@GetKMSPID
$LN6@GetKMSPID:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  0015a	6a 10		 push	 16			; 00000010H
  0015c	68 00 00 00 00	 push	 OFFSET ?KMS_ID_OFFICE_2019@@3U_GUID@@B
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 590  : 		else if (Request->KmsID == KMS_ID_OFFICE_2019)

  00161	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  00164	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 _memcmp
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00170	85 c0		 test	 eax, eax
  00172	75 09		 jne	 SHORT $LN50@GetKMSPID
  00174	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv183[ebp], 1
  0017b	eb 07		 jmp	 SHORT $LN48@GetKMSPID
$LN50@GetKMSPID:
  0017d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], 0
$LN48@GetKMSPID:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00184	83 7d b8 00	 cmp	 DWORD PTR tv183[ebp], 0
  00188	74 09		 je	 SHORT $LN46@GetKMSPID
  0018a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv176[ebp], 1
  00191	eb 07		 jmp	 SHORT $LN44@GetKMSPID
$LN46@GetKMSPID:
  00193	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$LN44@GetKMSPID:
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 590  : 		else if (Request->KmsID == KMS_ID_OFFICE_2019)

  0019a	0f b6 4d b4	 movzx	 ecx, BYTE PTR tv176[ebp]
  0019e	85 c9		 test	 ecx, ecx
  001a0	74 07		 je	 SHORT $LN3@GetKMSPID

; 591  : 		{
; 592  : 			AppIDIndex = APP_INDEX_OFFICE19;

  001a2	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _AppIDIndex$[ebp], 4
$LN3@GetKMSPID:

; 593  : 		}
; 594  : 	}
; 595  : 
; 596  : 	if (!_wcsicmp(Settings.PIDs[AppIDIndex], RANDOM_PID))

  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_1O@PALHKBLM@?$AAR?$AAa?$AAn?$AAd?$AAo?$AAm@
  001ae	8b 45 fc	 mov	 eax, DWORD PTR _AppIDIndex$[ebp]
  001b1	c1 e0 07	 shl	 eax, 7
  001b4	05 18 00 00 00	 add	 eax, OFFSET ?Settings@@3UKMSServerSettings@@A+24
  001b9	50		 push	 eax
  001ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wcsicmp
  001c0	83 c4 08	 add	 esp, 8
  001c3	85 c0		 test	 eax, eax
  001c5	75 0f		 jne	 SHORT $LN9@GetKMSPID

; 597  : 		GenerateRandomKMSPID(KMSPID, Request);

  001c7	8b 45 0c	 mov	 eax, DWORD PTR _Request$[ebp]
  001ca	50		 push	 eax
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _KMSPID$[ebp]
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 ?GenerateRandomKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z ; GenerateRandomKMSPID
  001d4	eb 1b		 jmp	 SHORT $LN1@GetKMSPID
$LN9@GetKMSPID:

; 598  : 	else
; 599  : 		wcscpy_s(KMSPID, PID_BUFFER_LEN, Settings.PIDs[AppIDIndex]);

  001d6	8b 45 fc	 mov	 eax, DWORD PTR _AppIDIndex$[ebp]
  001d9	c1 e0 07	 shl	 eax, 7
  001dc	05 18 00 00 00	 add	 eax, OFFSET ?Settings@@3UKMSServerSettings@@A+24
  001e1	50		 push	 eax
  001e2	6a 40		 push	 64			; 00000040H
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR _KMSPID$[ebp]
  001e7	51		 push	 ecx
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  001ee	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@GetKMSPID:

; 600  : }

  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 08 00	 ret	 8
?GetKMSPID@@YGXQA_WQAUKMSBaseRequest@@@Z ENDP		; GetKMSPID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?ActivationResponse@@YGHHPAEPAHPAPAE@Z
_TEXT	SEGMENT
_sentResponse$ = -408					; size = 172
_gotRequest$ = -236					; size = 236
_requestSize$ = 8					; size = 4
_request$ = 12						; size = 4
_responseSize$ = 16					; size = 4
_response$ = 20						; size = 4
?ActivationResponse@@YGHHPAEPAHPAPAE@Z PROC		; ActivationResponse, COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 270  : 	// Verify Request Size
; 271  : 	if (requestSize < 92)

  00016	83 7d 08 5c	 cmp	 DWORD PTR _requestSize$[ebp], 92 ; 0000005cH
  0001a	7d 19		 jge	 SHORT $LN2@Activation

; 272  : 	{
; 273  : 		*responseSize = 0;

  0001c	8b 45 10	 mov	 eax, DWORD PTR _responseSize$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 274  : 		*response = nullptr;

  00025	8b 45 14	 mov	 eax, DWORD PTR _response$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 275  : 		return RPC_S_INVALID_ARG;

  0002e	b8 57 00 00 00	 mov	 eax, 87			; 00000057H
  00033	eb 26		 jmp	 SHORT $LN1@Activation
$LN2@Activation:

; 276  : 	}
; 277  : 
; 278  : 	// Hold Request and Response for Logging
; 279  : 	KMSBaseRequest gotRequest;
; 280  : 	KMSBaseResponse sentResponse;
; 281  : 
; 282  : 	// Send Response and Response Size
; 283  : 	*response = CreateResponse(requestSize, request, responseSize, &gotRequest, &sentResponse);

  00035	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _sentResponse$[ebp]
  0003b	50		 push	 eax
  0003c	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _gotRequest$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 10	 mov	 edx, DWORD PTR _responseSize$[ebp]
  00046	52		 push	 edx
  00047	8b 45 0c	 mov	 eax, DWORD PTR _request$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _requestSize$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?CreateResponse@@YGPAEHPAEPAHPAUKMSBaseRequest@@PAUKMSBaseResponse@@@Z ; CreateResponse
  00054	8b 55 14	 mov	 edx, DWORD PTR _response$[ebp]
  00057	89 02		 mov	 DWORD PTR [edx], eax

; 284  : 
; 285  : 	return RPC_S_OK;

  00059	33 c0		 xor	 eax, eax
$LN1@Activation:

; 286  : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 10 00	 ret	 16			; 00000010H
?ActivationResponse@@YGHHPAEPAHPAPAE@Z ENDP		; ActivationResponse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstring.h
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT ?ReadRegistrySettings@@YGKXZ
_TEXT	SEGMENT
tv94 = -2396						; size = 4
_i$1 = -2072						; size = 4
_c$2 = -2068						; size = 1024
_FileName$ = -1044					; size = 520
_KeyName$ = -524					; size = 520
_hKey$ = -4						; size = 4
?ReadRegistrySettings@@YGKXZ PROC			; ReadRegistrySettings, COMDAT

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 09 00
	00		 sub	 esp, 2396		; 0000095cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 697  : 	HKEY hKey;
; 698  : 	WCHAR KeyName[_MAX_PATH], FileName[_MAX_PATH];
; 699  : 
; 700  : 	// Open parameter key
; 701  : 	GetModuleFileNameW(nullptr, FileName, _countof(FileName));

  00016	68 04 01 00 00	 push	 260			; 00000104H
  0001b	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _FileName$[ebp]
  00021	50		 push	 eax
  00022	6a 00		 push	 0
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameW@12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

  0002a	6a 5c		 push	 92			; 0000005cH
  0002c	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _FileName$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _wcsrchr
  00038	83 c4 08	 add	 esp, 8
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp

; 702  : 	swprintf_s(KeyName, _countof(KeyName), L"%s\\%s", PARAM_ROOTKEY, wcsrchr(FileName, L'\\') + 1);

  0003b	83 c0 02	 add	 eax, 2
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@NKIDFBLD@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DFKENGJN@?$AA?$CF?$AAs?$AA?2?$AA?$CF?$AAs@
  00049	68 04 01 00 00	 push	 260			; 00000104H
  0004e	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _KeyName$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _swprintf_s
  0005a	83 c4 14	 add	 esp, 20			; 00000014H

; 703  : 	OutputDebugStringEx(L"[SppExtComObjHook] Reading regkey %s ...\n", KeyName);

  0005d	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _KeyName$[ebp]
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@OFHIDGMN@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo@
  00069	68 00 02 00 00	 push	 512			; 00000200H
  0006e	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _c$2[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _swprintf_s
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	8d 85 ec f7 ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 704  : 
; 705  : 	// Service parameters not found so just use default settings
; 706  : 	if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, KeyName, 0, KEY_READ | KEY_WOW64_64KEY, &hKey) != ERROR_SUCCESS)

  0008a	8d 45 fc	 lea	 eax, DWORD PTR _hKey$[ebp]
  0008d	50		 push	 eax
  0008e	68 19 01 02 00	 push	 131353			; 00020119H
  00093	6a 00		 push	 0
  00095	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _KeyName$[ebp]
  0009b	51		 push	 ecx
  0009c	68 02 00 00 80	 push	 -2147483646		; 80000002H
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExW@20
  000a7	85 c0		 test	 eax, eax
  000a9	74 07		 je	 SHORT $LN5@ReadRegist

; 707  : 		return ERROR_SUCCESS;

  000ab	33 c0		 xor	 eax, eax
  000ad	e9 f0 00 00 00	 jmp	 $LN1@ReadRegist
$LN5@ReadRegist:

; 708  : 
; 709  : 	// Read KMS Emulation Flag
; 710  : 	ReadRegParameter(hKey, KEY_EMULATION, (DWORD *)&Settings.KMSEnabled, 0, UINT_MAX);

  000b2	6a ff		 push	 -1
  000b4	6a 00		 push	 0
  000b6	68 00 00 00 00	 push	 OFFSET ?Settings@@3UKMSServerSettings@@A ; Settings
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FHNOIDDK@?$AAK?$AAM?$AAS?$AA_?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn@
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z ; ReadRegParameter

; 711  : 	Settings.KMSEnabled = BOOLIFY(Settings.KMSEnabled);

  000c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Settings@@3UKMSServerSettings@@A, 0
  000d0	74 0c		 je	 SHORT $LN7@ReadRegist
  000d2	c7 85 a4 f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv94[ebp], 1
  000dc	eb 0a		 jmp	 SHORT $LN8@ReadRegist
$LN7@ReadRegist:
  000de	c7 85 a4 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
$LN8@ReadRegist:
  000e8	8b 85 a4 f6 ff
	ff		 mov	 eax, DWORD PTR tv94[ebp]
  000ee	a3 00 00 00 00	 mov	 DWORD PTR ?Settings@@3UKMSServerSettings@@A, eax

; 712  : 
; 713  : 	// Read ActivationInterval
; 714  : 	ReadRegParameter(hKey, KEY_AI, &Settings.ActivationInterval, 15, 43200);

  000f3	68 c0 a8 00 00	 push	 43200			; 0000a8c0H
  000f8	6a 0f		 push	 15			; 0000000fH
  000fa	68 04 00 00 00	 push	 OFFSET ?Settings@@3UKMSServerSettings@@A+4
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@CHIGJHAC@?$AAK?$AAM?$AAS?$AA_?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI@
  00104	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z ; ReadRegParameter

; 715  : 
; 716  : 	// Read RenewalInterval
; 717  : 	ReadRegParameter(hKey, KEY_RI, &Settings.RenewalInterval, 15, 43200);

  0010d	68 c0 a8 00 00	 push	 43200			; 0000a8c0H
  00112	6a 0f		 push	 15			; 0000000fH
  00114	68 08 00 00 00	 push	 OFFSET ?Settings@@3UKMSServerSettings@@A+8
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@EACHPDAB@?$AAK?$AAM?$AAS?$AA_?$AAR?$AAe?$AAn?$AAe?$AAw?$AAa?$AAl?$AAI?$AAn?$AAt?$AAe@
  0011e	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPAKKK@Z ; ReadRegParameter

; 718  : 
; 719  : 	// Read KMS HWID
; 720  : 	ReadRegParameter(hKey, KEY_HWID, &Settings.KMSHWID, HWID_MIN, HWID_MAX);

  00127	6a ff		 push	 -1
  00129	6a fe		 push	 -2			; fffffffeH
  0012b	68 11 11 11 11	 push	 286331153		; 11111111H
  00130	68 11 11 11 11	 push	 286331153		; 11111111H
  00135	68 10 00 00 00	 push	 OFFSET ?Settings@@3UKMSServerSettings@@A+16
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DKAIFGB@?$AAK?$AAM?$AAS?$AA_?$AAH?$AAW?$AAI?$AAD@
  0013f	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_K_K3@Z ; ReadRegParameter

; 721  : 
; 722  : 	// Read PIDs
; 723  : 	for (int i = 0; i < APP_INDEX_MAX; i++)

  00148	c7 85 e8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  00152	eb 0f		 jmp	 SHORT $LN4@ReadRegist
$LN2@ReadRegist:
  00154	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  0015a	83 c0 01	 add	 eax, 1
  0015d	89 85 e8 f7 ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ReadRegist:
  00163	83 bd e8 f7 ff
	ff 05		 cmp	 DWORD PTR _i$1[ebp], 5
  0016a	7d 2a		 jge	 SHORT $LN3@ReadRegist

; 724  : 		ReadRegParameter(hKey, AppIDList[i].name, Settings.PIDs[i], PID_BUFFER_LEN);

  0016c	6a 40		 push	 64			; 00000040H
  0016e	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  00174	c1 e0 07	 shl	 eax, 7
  00177	05 18 00 00 00	 add	 eax, OFFSET ?Settings@@3UKMSServerSettings@@A+24
  0017c	50		 push	 eax
  0017d	6b 8d e8 f7 ff
	ff 14		 imul	 ecx, DWORD PTR _i$1[ebp], 20
  00184	8b 91 10 00 00
	00		 mov	 edx, DWORD PTR ?AppIDList@@3PAUGUIDName@@A[ecx+16]
  0018a	52		 push	 edx
  0018b	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ?ReadRegParameter@@YGJPAUHKEY__@@PB_WPA_WI@Z ; ReadRegParameter
  00194	eb be		 jmp	 SHORT $LN2@ReadRegist
$LN3@ReadRegist:

; 725  : 
; 726  : 	RegCloseKey(hKey);

  00196	8b 45 fc	 mov	 eax, DWORD PTR _hKey$[ebp]
  00199	50		 push	 eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 727  : 
; 728  : 	return ERROR_SUCCESS;

  001a0	33 c0		 xor	 eax, eax
$LN1@ReadRegist:

; 729  : }

  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c3		 ret	 0
?ReadRegistrySettings@@YGKXZ ENDP			; ReadRegistrySettings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT _MIDL_user_free@4
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_MIDL_user_free@4 PROC					; COMDAT

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 744  : 	HeapFree(GetProcessHeap(), 0, ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 745  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_MIDL_user_free@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\kms.cpp
;	COMDAT _MIDL_user_allocate@4
_TEXT	SEGMENT
_len$ = 8						; size = 4
_MIDL_user_allocate@4 PROC				; COMDAT

; 737  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __1170C9B3_kms@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 738  : 	return HeapAlloc(GetProcessHeap(), 0, len);

  00013	8b 45 08	 mov	 eax, DWORD PTR _len$[ebp]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12

; 739  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_MIDL_user_allocate@4 ENDP
_TEXT	ENDS
END
