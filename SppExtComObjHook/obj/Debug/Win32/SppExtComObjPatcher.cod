; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28105.4 

	TITLE	C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\SppExtComObjPatcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__376EBCA0_winioctl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2CCBBE23_propidl@h DB 01H
__AD360DAF_oleauto@h DB 01H
__0396F1A5_stralign@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__022B0838_SppExtComObjPatcher@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?wcsstr@@YAPA_WPA_WPB_W@Z			; wcsstr
PUBLIC	?PauseResumeThreadList@@YGHKH@Z			; PauseResumeThreadList
PUBLIC	?FindProcessIdByName@@YGHPB_WPAK@Z		; FindProcessIdByName
PUBLIC	?InjectDll@@YGHPB_WK@Z				; InjectDll
PUBLIC	?PatcherMain@@YGXPAUHWND__@@PAUHINSTANCE__@@PA_WH@Z ; PatcherMain
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1CC@DCIKONKO@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AA?4?$AAe?$AAx@ ; `string'
PUBLIC	??_C@_1BG@BKPLIDKL@?$AAs?$AAp?$AAp?$AAs?$AAv?$AAc?$AA?4?$AAe?$AAx?$AAe@ ; `string'
PUBLIC	??_C@_1HO@HOPFCKAP@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_1JE@CMJJFAAH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_1IM@BJLKIDDG@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_1KA@LBMDPGGJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_1CK@EFMDHPMC@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo?$AAo@ ; `string'
PUBLIC	??_C@_1HK@HKOHBJBH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_1IC@ECIEFKMH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ ; `string'
PUBLIC	??_C@_0N@KCFDJLIF@LoadLibraryW@			; `string'
PUBLIC	??_C@_0N@MDJJJHMB@kernel32?4dll@		; `string'
EXTRN	_wcsstr:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp___wcsicmp:PROC
EXTRN	__imp__OutputDebugStringW@4:PROC
EXTRN	__imp__DebugActiveProcessStop@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__GetExitCodeProcess@8:PROC
EXTRN	__imp__CreateRemoteThread@28:PROC
EXTRN	__imp__OpenThread@12:PROC
EXTRN	__imp__GetExitCodeThread@8:PROC
EXTRN	__imp__SuspendThread@4:PROC
EXTRN	__imp__ResumeThread@4:PROC
EXTRN	__imp__CreateProcessW@40:PROC
EXTRN	__imp__GetStartupInfoW@4:PROC
EXTRN	__imp__OpenProcess@12:PROC
EXTRN	__imp__VirtualAllocEx@20:PROC
EXTRN	__imp__WriteProcessMemory@20:PROC
EXTRN	__imp__VirtualFreeEx@16:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	_CreateToolhelp32Snapshot@8:PROC
EXTRN	_Process32FirstW@8:PROC
EXTRN	_Process32NextW@8:PROC
EXTRN	_Thread32First@8:PROC
EXTRN	_Thread32Next@8:PROC
EXTRN	_swprintf_s:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0N@MDJJJHMB@kernel32?4dll@
CONST	SEGMENT
??_C@_0N@MDJJJHMB@kernel32?4dll@ DB 'kernel32.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCFDJLIF@LoadLibraryW@
CONST	SEGMENT
??_C@_0N@KCFDJLIF@LoadLibraryW@ DB 'LoadLibraryW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@ECIEFKMH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1IC@ECIEFKMH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, '%', 00H, 's', 00H, ' ', 00H
	DB	'[', 00H, 'p', 00H, 'i', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%'
	DB	00H, 'u', 00H, ']', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	' ', 00H, '%', 00H, 'u', 00H, '.', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@HKOHBJBH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1HK@HKOHBJBH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'p', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e'
	DB	00H, ' ', 00H, '[', 00H, 'p', 00H, 'i', 00H, 'd', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'u', 00H, ']', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'd', 00H, '.', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EFMDHPMC@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo?$AAo@
CONST	SEGMENT
??_C@_1CK@EFMDHPMC@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo?$AAo@ DB 'S'
	DB	00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'H', 00H, 'o'
	DB	00H, 'o', 00H, 'k', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KA@LBMDPGGJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1KA@LBMDPGGJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'c', 00H, 'c'
	DB	00H, 'e', 00H, 'e', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'[', 00H, 'c', 00H, 'm', 00H, 'd', 00H, 'L', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, ',', 00H
	DB	' ', 00H, 'p', 00H, 'i', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%'
	DB	00H, 'u', 00H, ',', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'd', 00H
	DB	':', 00H, ' ', 00H, '%', 00H, 'u', 00H, ']', 00H, '.', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@BJLKIDDG@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1IM@BJLKIDDG@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g'
	DB	00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'S', 00H, 't', 00H, 'o', 00H, 'p', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '['
	DB	00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ':', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'u'
	DB	00H, ']', 00H, '.', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@CMJJFAAH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1JE@CMJJFAAH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, '[', 00H, 'c', 00H, 'm', 00H
	DB	'd', 00H, 'L', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, '0', 00H, '8', 00H, 'u', 00H, ']', 00H, '.', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@HOPFCKAP@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
CONST	SEGMENT
??_C@_1HO@HOPFCKAP@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@ DB '['
	DB	00H, 'S', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	']', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'p', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e'
	DB	00H, ' ', 00H, '[', 00H, 'p', 00H, 'i', 00H, 'd', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'u', 00H, ']', 00H, ' ', 00H, 's', 00H, 'u'
	DB	00H, 's', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'd', 00H, '.', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BKPLIDKL@?$AAs?$AAp?$AAp?$AAs?$AAv?$AAc?$AA?4?$AAe?$AAx?$AAe@
CONST	SEGMENT
??_C@_1BG@BKPLIDKL@?$AAs?$AAp?$AAp?$AAs?$AAv?$AAc?$AA?4?$AAe?$AAx?$AAe@ DB 's'
	DB	00H, 'p', 00H, 'p', 00H, 's', 00H, 'v', 00H, 'c', 00H, '.', 00H
	DB	'e', 00H, 'x', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DCIKONKO@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AA?4?$AAe?$AAx@
CONST	SEGMENT
??_C@_1CC@DCIKONKO@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AA?4?$AAe?$AAx@ DB 'S'
	DB	00H, 'p', 00H, 'p', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'O', 00H, 'b', 00H, 'j', 00H, '.', 00H, 'e'
	DB	00H, 'x', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\SppExtComObjPatcher.cpp
;	COMDAT ?PatcherMain@@YGXPAUHWND__@@PAUHINSTANCE__@@PA_WH@Z
_TEXT	SEGMENT
_c$1 = -6240						; size = 1024
_c$2 = -5216						; size = 1024
_c$3 = -4192						; size = 1024
_c$4 = -3168						; size = 1024
_c$5 = -2144						; size = 1024
_c$6 = -1120						; size = 1024
_SppSvcPid$ = -96					; size = 4
_bRet$ = -92						; size = 4
_dwRet$ = -88						; size = 4
_pi$ = -84						; size = 16
_si$ = -68						; size = 68
_hWnd$ = 8						; size = 4
_hInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nShowCmd$ = 20						; size = 4
?PatcherMain@@YGXPAUHWND__@@PAUHINSTANCE__@@PA_WH@Z PROC ; PatcherMain, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 60 1a 00 00	 mov	 eax, 6752		; 00001a60H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET __022B0838_SppExtComObjPatcher@cpp
  00015	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 22   : #pragma comment(linker, "/EXPORT:PatcherMainW" "=" __FUNCDNAME__)
; 23   : 	UNREFERENCED_PARAMETER(hWnd);
; 24   : 	UNREFERENCED_PARAMETER(hInstance);
; 25   : 	UNREFERENCED_PARAMETER(nShowCmd);
; 26   : 
; 27   : 	STARTUPINFO si;
; 28   : 	PROCESS_INFORMATION pi = { 0 };

  0001a	33 c0		 xor	 eax, eax
  0001c	89 45 ac	 mov	 DWORD PTR _pi$[ebp], eax
  0001f	89 45 b0	 mov	 DWORD PTR _pi$[ebp+4], eax
  00022	89 45 b4	 mov	 DWORD PTR _pi$[ebp+8], eax
  00025	89 45 b8	 mov	 DWORD PTR _pi$[ebp+12], eax

; 29   : 	DWORD dwRet = ERROR_SUCCESS;

  00028	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _dwRet$[ebp], 0

; 30   : 	BOOL bRet;
; 31   : 
; 32   : 	DWORD SppSvcPid = 0;

  0002f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _SppSvcPid$[ebp], 0

; 33   : 
; 34   : 	if (nullptr != wcsstr(lpCmdLine, L"SppExtComObj.exe") && FindProcessIdByName(L"sppsvc.exe", &SppSvcPid))

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@DCIKONKO@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AA?4?$AAe?$AAx@
  0003b	8b 45 10	 mov	 eax, DWORD PTR _lpCmdLine$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?wcsstr@@YAPA_WPA_WPB_W@Z ; wcsstr
  00044	83 c4 08	 add	 esp, 8
  00047	85 c0		 test	 eax, eax
  00049	74 47		 je	 SHORT $LN2@PatcherMai
  0004b	8d 45 a0	 lea	 eax, DWORD PTR _SppSvcPid$[ebp]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@BKPLIDKL@?$AAs?$AAp?$AAp?$AAs?$AAv?$AAc?$AA?4?$AAe?$AAx?$AAe@
  00054	e8 00 00 00 00	 call	 ?FindProcessIdByName@@YGHPB_WPAK@Z ; FindProcessIdByName
  00059	85 c0		 test	 eax, eax
  0005b	74 35		 je	 SHORT $LN2@PatcherMai

; 35   : 	{
; 36   : 		PauseResumeThreadList(SppSvcPid, FALSE);

  0005d	6a 00		 push	 0
  0005f	8b 45 a0	 mov	 eax, DWORD PTR _SppSvcPid$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?PauseResumeThreadList@@YGHKH@Z ; PauseResumeThreadList

; 37   : 		OutputDebugStringEx(L"[SppExtComObjPatcher] Process sppsvc.exe [pid: %u] suspended.\n", SppSvcPid);

  00068	8b 45 a0	 mov	 eax, DWORD PTR _SppSvcPid$[ebp]
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1HO@HOPFCKAP@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  00071	68 00 02 00 00	 push	 512			; 00000200H
  00076	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _c$6[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _swprintf_s
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR _c$6[ebp]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4
$LN2@PatcherMai:

; 38   : 	}
; 39   : 
; 40   : 	GetStartupInfoW(&si);

  00092	8d 45 bc	 lea	 eax, DWORD PTR _si$[ebp]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStartupInfoW@4

; 41   : 
; 42   : 	bRet = CreateProcessW(nullptr, lpCmdLine, nullptr, nullptr, FALSE, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS | CREATE_SUSPENDED | DETACHED_PROCESS, nullptr, nullptr, &si, &pi);

  0009c	8d 45 ac	 lea	 eax, DWORD PTR _pi$[ebp]
  0009f	50		 push	 eax
  000a0	8d 4d bc	 lea	 ecx, DWORD PTR _si$[ebp]
  000a3	51		 push	 ecx
  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	6a 0f		 push	 15			; 0000000fH
  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	6a 00		 push	 0
  000b0	8b 55 10	 mov	 edx, DWORD PTR _lpCmdLine$[ebp]
  000b3	52		 push	 edx
  000b4	6a 00		 push	 0
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateProcessW@40
  000bc	89 45 a4	 mov	 DWORD PTR _bRet$[ebp], eax

; 43   : 	if (!bRet)

  000bf	83 7d a4 00	 cmp	 DWORD PTR _bRet$[ebp], 0
  000c3	75 41		 jne	 SHORT $LN3@PatcherMai

; 44   : 	{
; 45   : 		dwRet = GetLastError();

  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000cb	89 45 a8	 mov	 DWORD PTR _dwRet$[ebp], eax

; 46   : 		OutputDebugStringEx(L"[SppExtComObjPatcher] CreateProcess failed [cmdLine: %s, error: 0x%08u].\n", lpCmdLine, dwRet);

  000ce	8b 45 a8	 mov	 eax, DWORD PTR _dwRet$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _lpCmdLine$[ebp]
  000d5	51		 push	 ecx
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@CMJJFAAH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  000db	68 00 02 00 00	 push	 512			; 00000200H
  000e0	8d 95 a0 f7 ff
	ff		 lea	 edx, DWORD PTR _c$5[ebp]
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 _swprintf_s
  000ec	83 c4 14	 add	 esp, 20			; 00000014H
  000ef	8d 85 a0 f7 ff
	ff		 lea	 eax, DWORD PTR _c$5[ebp]
  000f5	50		 push	 eax
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 47   : 		goto fail;

  000fc	e9 97 00 00 00	 jmp	 $fail$9
  00101	e9 92 00 00 00	 jmp	 $fail$9
$LN3@PatcherMai:

; 48   : 	}
; 49   : 
; 50   : 	bRet = DebugActiveProcessStop(pi.dwProcessId);

  00106	8b 45 b4	 mov	 eax, DWORD PTR _pi$[ebp+8]
  00109	50		 push	 eax
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugActiveProcessStop@4
  00110	89 45 a4	 mov	 DWORD PTR _bRet$[ebp], eax

; 51   : 	if (!bRet)

  00113	83 7d a4 00	 cmp	 DWORD PTR _bRet$[ebp], 0
  00117	75 37		 jne	 SHORT $LN5@PatcherMai

; 52   : 	{
; 53   : 		dwRet = GetLastError();

  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0011f	89 45 a8	 mov	 DWORD PTR _dwRet$[ebp], eax

; 54   : 		OutputDebugStringEx(L"[SppExtComObjPatcher] DebugActiveProcessStop failed [error: 0x%08u].\n", dwRet);

  00122	8b 45 a8	 mov	 eax, DWORD PTR _dwRet$[ebp]
  00125	50		 push	 eax
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_1IM@BJLKIDDG@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  0012b	68 00 02 00 00	 push	 512			; 00000200H
  00130	8d 8d a0 f3 ff
	ff		 lea	 ecx, DWORD PTR _c$4[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 _swprintf_s
  0013c	83 c4 10	 add	 esp, 16			; 00000010H
  0013f	8d 85 a0 f3 ff
	ff		 lea	 eax, DWORD PTR _c$4[ebp]
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 55   : 		goto fail;

  0014c	eb 4a		 jmp	 SHORT $fail$9
  0014e	eb 48		 jmp	 SHORT $fail$9
$LN5@PatcherMai:

; 56   : 	}
; 57   : 
; 58   : 	OutputDebugStringEx(L"[SppExtComObjPatcher] CreateProcess succeeded [cmdLine: %s, pid: %u, tid: %u].\n", lpCmdLine, pi.dwProcessId, pi.dwThreadId);

  00150	8b 45 b8	 mov	 eax, DWORD PTR _pi$[ebp+12]
  00153	50		 push	 eax
  00154	8b 4d b4	 mov	 ecx, DWORD PTR _pi$[ebp+8]
  00157	51		 push	 ecx
  00158	8b 55 10	 mov	 edx, DWORD PTR _lpCmdLine$[ebp]
  0015b	52		 push	 edx
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_1KA@LBMDPGGJ@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  00161	68 00 02 00 00	 push	 512			; 00000200H
  00166	8d 85 a0 ef ff
	ff		 lea	 eax, DWORD PTR _c$3[ebp]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _swprintf_s
  00172	83 c4 18	 add	 esp, 24			; 00000018H
  00175	8d 85 a0 ef ff
	ff		 lea	 eax, DWORD PTR _c$3[ebp]
  0017b	50		 push	 eax
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 59   : 	Sleep(100);

  00182	6a 64		 push	 100			; 00000064H
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 60   : 	// SuspendThread(pi.hThread);
; 61   : 	InjectDll(DLL_NAME, pi.dwProcessId);

  0018a	8b 45 b4	 mov	 eax, DWORD PTR _pi$[ebp+8]
  0018d	50		 push	 eax
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@EFMDHPMC@?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAH?$AAo?$AAo@
  00193	e8 00 00 00 00	 call	 ?InjectDll@@YGHPB_WK@Z	; InjectDll
$fail$9:

; 62   : 
; 63   : fail:
; 64   : 	ResumeThread(pi.hThread);

  00198	8b 45 b0	 mov	 eax, DWORD PTR _pi$[ebp+4]
  0019b	50		 push	 eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ResumeThread@4

; 65   : 
; 66   : 	if (SppSvcPid != 0)

  001a2	83 7d a0 00	 cmp	 DWORD PTR _SppSvcPid$[ebp], 0
  001a6	74 35		 je	 SHORT $LN7@PatcherMai

; 67   : 	{
; 68   : 		PauseResumeThreadList(SppSvcPid, TRUE);

  001a8	6a 01		 push	 1
  001aa	8b 45 a0	 mov	 eax, DWORD PTR _SppSvcPid$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?PauseResumeThreadList@@YGHKH@Z ; PauseResumeThreadList

; 69   : 		OutputDebugStringEx(L"[SppExtComObjPatcher] Process sppsvc.exe [pid: %u] resumed.\n", SppSvcPid);

  001b3	8b 45 a0	 mov	 eax, DWORD PTR _SppSvcPid$[ebp]
  001b6	50		 push	 eax
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@HKOHBJBH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  001bc	68 00 02 00 00	 push	 512			; 00000200H
  001c1	8d 8d a0 eb ff
	ff		 lea	 ecx, DWORD PTR _c$2[ebp]
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 _swprintf_s
  001cd	83 c4 10	 add	 esp, 16			; 00000010H
  001d0	8d 85 a0 eb ff
	ff		 lea	 eax, DWORD PTR _c$2[ebp]
  001d6	50		 push	 eax
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4
$LN7@PatcherMai:

; 70   : 	}
; 71   : 
; 72   : 	WaitForSingleObject(pi.hProcess, INFINITE);

  001dd	6a ff		 push	 -1
  001df	8b 45 ac	 mov	 eax, DWORD PTR _pi$[ebp]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 73   : 	GetExitCodeProcess(pi.hProcess, &dwRet);

  001e9	8d 45 a8	 lea	 eax, DWORD PTR _dwRet$[ebp]
  001ec	50		 push	 eax
  001ed	8b 4d ac	 mov	 ecx, DWORD PTR _pi$[ebp]
  001f0	51		 push	 ecx
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetExitCodeProcess@8

; 74   : 	OutputDebugStringEx(L"[SppExtComObjPatcher] Process %s [pid: %u] exited with code %u.\n", lpCmdLine, pi.dwProcessId, dwRet);

  001f7	8b 45 a8	 mov	 eax, DWORD PTR _dwRet$[ebp]
  001fa	50		 push	 eax
  001fb	8b 4d b4	 mov	 ecx, DWORD PTR _pi$[ebp+8]
  001fe	51		 push	 ecx
  001ff	8b 55 10	 mov	 edx, DWORD PTR _lpCmdLine$[ebp]
  00202	52		 push	 edx
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_1IC@ECIEFKMH@?$AA?$FL?$AAS?$AAp?$AAp?$AAE?$AAx?$AAt?$AAC?$AAo?$AAm?$AAO?$AAb?$AAj?$AAP?$AAa@
  00208	68 00 02 00 00	 push	 512			; 00000200H
  0020d	8d 85 a0 e7 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _swprintf_s
  00219	83 c4 18	 add	 esp, 24			; 00000018H
  0021c	8d 85 a0 e7 ff
	ff		 lea	 eax, DWORD PTR _c$1[ebp]
  00222	50		 push	 eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 75   : 
; 76   : 	CloseHandle(pi.hProcess);

  00229	8b 45 ac	 mov	 eax, DWORD PTR _pi$[ebp]
  0022c	50		 push	 eax
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 77   : 	CloseHandle(pi.hThread);

  00233	8b 45 b0	 mov	 eax, DWORD PTR _pi$[ebp+4]
  00236	50		 push	 eax
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 78   : 
; 79   : 	ExitProcess(dwRet);

  0023d	8b 45 a8	 mov	 eax, DWORD PTR _dwRet$[ebp]
  00240	50		 push	 eax
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN8@PatcherMai:

; 80   : }

  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c2 10 00	 ret	 16			; 00000010H
?PatcherMain@@YGXPAUHWND__@@PAUHINSTANCE__@@PA_WH@Z ENDP ; PatcherMain
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\SppExtComObjPatcher.cpp
;	COMDAT ?InjectDll@@YGHPB_WK@Z
_TEXT	SEGMENT
_dwExitCode$1 = -28					; size = 4
_hThread$2 = -24					; size = 4
_addrLoadLibraryW$3 = -20				; size = 4
_allocSize$4 = -16					; size = 4
_addrDllPath$ = -12					; size = 4
_hProcess$ = -8						; size = 4
_bRet$ = -4						; size = 4
_lpDllName$ = 8						; size = 4
_dwProcessId$ = 12					; size = 4
?InjectDll@@YGHPB_WK@Z PROC				; InjectDll, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __022B0838_SppExtComObjPatcher@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  : 	BOOL bRet = FALSE;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 158  : 
; 159  : 	HANDLE hProcess = nullptr;

  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hProcess$[ebp], 0

; 160  : 	LPVOID addrDllPath = nullptr;

  00021	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _addrDllPath$[ebp], 0
$LN4@InjectDll:

; 161  : 
; 162  : 	do
; 163  : 	{
; 164  : 		hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dwProcessId$[ebp]
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	68 ff 0f 1f 00	 push	 2035711			; 001f0fffH
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenProcess@12
  00039	89 45 f8	 mov	 DWORD PTR _hProcess$[ebp], eax

; 165  : 		if (nullptr == hProcess)

  0003c	83 7d f8 00	 cmp	 DWORD PTR _hProcess$[ebp], 0
  00040	75 05		 jne	 SHORT $LN5@InjectDll

; 166  : 			break;

  00042	e9 da 00 00 00	 jmp	 $LN3@InjectDll
$LN5@InjectDll:

; 167  : 
; 168  : 		SIZE_T allocSize = (wcslen(lpDllName) + 1) * sizeof(WCHAR);

  00047	8b 45 08	 mov	 eax, DWORD PTR _lpDllName$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00051	83 c4 04	 add	 esp, 4
  00054	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  00058	89 4d f0	 mov	 DWORD PTR _allocSize$4[ebp], ecx

; 169  : 		addrDllPath = VirtualAllocEx(hProcess, nullptr, allocSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

  0005b	6a 04		 push	 4
  0005d	68 00 30 00 00	 push	 12288			; 00003000H
  00062	8b 45 f0	 mov	 eax, DWORD PTR _allocSize$4[ebp]
  00065	50		 push	 eax
  00066	6a 00		 push	 0
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _hProcess$[ebp]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAllocEx@20
  00072	89 45 f4	 mov	 DWORD PTR _addrDllPath$[ebp], eax

; 170  : 		if (nullptr == addrDllPath)

  00075	83 7d f4 00	 cmp	 DWORD PTR _addrDllPath$[ebp], 0
  00079	75 05		 jne	 SHORT $LN6@InjectDll

; 171  : 			break;

  0007b	e9 a1 00 00 00	 jmp	 $LN3@InjectDll
$LN6@InjectDll:

; 172  : 
; 173  : 		if (!WriteProcessMemory(hProcess, addrDllPath, lpDllName, allocSize, nullptr))

  00080	6a 00		 push	 0
  00082	8b 45 f0	 mov	 eax, DWORD PTR _allocSize$4[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _lpDllName$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 f4	 mov	 edx, DWORD PTR _addrDllPath$[ebp]
  0008d	52		 push	 edx
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _hProcess$[ebp]
  00091	50		 push	 eax
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteProcessMemory@20
  00098	85 c0		 test	 eax, eax
  0009a	75 05		 jne	 SHORT $LN7@InjectDll

; 174  : 			break;

  0009c	e9 80 00 00 00	 jmp	 $LN3@InjectDll
$LN7@InjectDll:

; 175  : 
; 176  : 		pfnLoadLibraryW addrLoadLibraryW = (pfnLoadLibraryW)GetProcAddress(GetModuleHandleA("kernel32.dll"), "LoadLibraryW");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KCFDJLIF@LoadLibraryW@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MDJJJHMB@kernel32?4dll@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000b8	89 45 ec	 mov	 DWORD PTR _addrLoadLibraryW$3[ebp], eax

; 177  : 		if (addrLoadLibraryW == nullptr)

  000bb	83 7d ec 00	 cmp	 DWORD PTR _addrLoadLibraryW$3[ebp], 0
  000bf	75 02		 jne	 SHORT $LN8@InjectDll

; 178  : 			break;

  000c1	eb 5e		 jmp	 SHORT $LN3@InjectDll
$LN8@InjectDll:

; 179  : 
; 180  : 		HANDLE hThread = CreateRemoteThread(hProcess, nullptr, 0, (LPTHREAD_START_ROUTINE)addrLoadLibraryW, addrDllPath, 0, nullptr);

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	8b 45 f4	 mov	 eax, DWORD PTR _addrDllPath$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _addrLoadLibraryW$3[ebp]
  000ce	51		 push	 ecx
  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	8b 55 f8	 mov	 edx, DWORD PTR _hProcess$[ebp]
  000d6	52		 push	 edx
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateRemoteThread@28
  000dd	89 45 e8	 mov	 DWORD PTR _hThread$2[ebp], eax

; 181  : 		if (hThread == nullptr)

  000e0	83 7d e8 00	 cmp	 DWORD PTR _hThread$2[ebp], 0
  000e4	75 02		 jne	 SHORT $LN9@InjectDll

; 182  : 			break;

  000e6	eb 39		 jmp	 SHORT $LN3@InjectDll
$LN9@InjectDll:

; 183  : 
; 184  : 		WaitForSingleObject(hThread, INFINITE);

  000e8	6a ff		 push	 -1
  000ea	8b 45 e8	 mov	 eax, DWORD PTR _hThread$2[ebp]
  000ed	50		 push	 eax
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 185  : 
; 186  : 		// This may be wrong on x64 because LoadLibrary returns HMODULE -> 64-bit
; 187  : 		DWORD dwExitCode;
; 188  : 		GetExitCodeThread(hThread, &dwExitCode);

  000f4	8d 45 e4	 lea	 eax, DWORD PTR _dwExitCode$1[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d e8	 mov	 ecx, DWORD PTR _hThread$2[ebp]
  000fb	51		 push	 ecx
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetExitCodeThread@8

; 189  : 		CloseHandle(hThread);

  00102	8b 45 e8	 mov	 eax, DWORD PTR _hThread$2[ebp]
  00105	50		 push	 eax
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 190  : 
; 191  : 		if (dwExitCode != 0)

  0010c	83 7d e4 00	 cmp	 DWORD PTR _dwExitCode$1[ebp], 0
  00110	74 07		 je	 SHORT $LN2@InjectDll

; 192  : 			bRet = TRUE;

  00112	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN2@InjectDll:

; 193  : 
; 194  : 	} while (FALSE);

  00119	33 c0		 xor	 eax, eax
  0011b	0f 85 07 ff ff
	ff		 jne	 $LN4@InjectDll
$LN3@InjectDll:

; 195  : 
; 196  : 	if (addrDllPath != nullptr)

  00121	83 7d f4 00	 cmp	 DWORD PTR _addrDllPath$[ebp], 0
  00125	74 15		 je	 SHORT $LN11@InjectDll

; 197  : 		VirtualFreeEx(hProcess, addrDllPath, 0, MEM_RELEASE);

  00127	68 00 80 00 00	 push	 32768			; 00008000H
  0012c	6a 00		 push	 0
  0012e	8b 45 f4	 mov	 eax, DWORD PTR _addrDllPath$[ebp]
  00131	50		 push	 eax
  00132	8b 4d f8	 mov	 ecx, DWORD PTR _hProcess$[ebp]
  00135	51		 push	 ecx
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFreeEx@16
$LN11@InjectDll:

; 198  : 	if (hProcess != nullptr)

  0013c	83 7d f8 00	 cmp	 DWORD PTR _hProcess$[ebp], 0
  00140	74 0a		 je	 SHORT $LN12@InjectDll

; 199  : 		CloseHandle(hProcess);

  00142	8b 45 f8	 mov	 eax, DWORD PTR _hProcess$[ebp]
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN12@InjectDll:

; 200  : 
; 201  : 	return bRet;

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _bRet$[ebp]

; 202  : }

  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
?InjectDll@@YGHPB_WK@Z ENDP				; InjectDll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\SppExtComObjPatcher.cpp
;	COMDAT ?FindProcessIdByName@@YGHPB_WPAK@Z
_TEXT	SEGMENT
_bRet$ = -564						; size = 4
_pe32$ = -560						; size = 556
_hProcessSnap$ = -4					; size = 4
_lpPrimaryModuleName$ = 8				; size = 4
_lpProcessId$ = 12					; size = 4
?FindProcessIdByName@@YGHPB_WPAK@Z PROC			; FindProcessIdByName, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 02 00
	00		 sub	 esp, 692		; 000002b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __022B0838_SppExtComObjPatcher@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  : 	HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

  00016	6a 00		 push	 0
  00018	6a 02		 push	 2
  0001a	e8 00 00 00 00	 call	 _CreateToolhelp32Snapshot@8
  0001f	89 45 fc	 mov	 DWORD PTR _hProcessSnap$[ebp], eax

; 129  : 	if (hProcessSnap == INVALID_HANDLE_VALUE)

  00022	83 7d fc ff	 cmp	 DWORD PTR _hProcessSnap$[ebp], -1
  00026	75 07		 jne	 SHORT $LN5@FindProces

; 130  : 		return FALSE;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 83 00 00 00	 jmp	 $LN1@FindProces
$LN5@FindProces:

; 131  : 
; 132  : 	PROCESSENTRY32W pe32;
; 133  : 	pe32.dwSize = sizeof(pe32);

  0002f	c7 85 d0 fd ff
	ff 2c 02 00 00	 mov	 DWORD PTR _pe32$[ebp], 556 ; 0000022cH

; 134  : 
; 135  : 	BOOL bRet = FALSE;

  00039	c7 85 cc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _bRet$[ebp], 0

; 136  : 
; 137  : 	if (Process32FirstW(hProcessSnap, &pe32))

  00043	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR _pe32$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _hProcessSnap$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _Process32FirstW@8
  00053	85 c0		 test	 eax, eax
  00055	74 4b		 je	 SHORT $LN6@FindProces
$LN4@FindProces:

; 138  : 	{
; 139  : 		do
; 140  : 		{
; 141  : 			if (pe32.szExeFile != nullptr && !_wcsicmp(pe32.szExeFile, lpPrimaryModuleName))

  00057	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _pe32$[ebp+36]
  0005d	85 c0		 test	 eax, eax
  0005f	74 2d		 je	 SHORT $LN2@FindProces
  00061	8b 45 08	 mov	 eax, DWORD PTR _lpPrimaryModuleName$[ebp]
  00064	50		 push	 eax
  00065	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _pe32$[ebp+36]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wcsicmp
  00072	83 c4 08	 add	 esp, 8
  00075	85 c0		 test	 eax, eax
  00077	75 15		 jne	 SHORT $LN2@FindProces

; 142  : 			{
; 143  : 				bRet = TRUE;

  00079	c7 85 cc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _bRet$[ebp], 1

; 144  : 				*lpProcessId = pe32.th32ProcessID;

  00083	8b 45 0c	 mov	 eax, DWORD PTR _lpProcessId$[ebp]
  00086	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pe32$[ebp+8]
  0008c	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@FindProces:

; 145  : 			}
; 146  : 
; 147  : 		} while (Process32NextW(hProcessSnap, &pe32));

  0008e	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR _pe32$[ebp]
  00094	50		 push	 eax
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _hProcessSnap$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _Process32NextW@8
  0009e	85 c0		 test	 eax, eax
  000a0	75 b5		 jne	 SHORT $LN4@FindProces
$LN6@FindProces:

; 148  : 	}
; 149  : 
; 150  : 	CloseHandle(hProcessSnap);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _hProcessSnap$[ebp]
  000a5	50		 push	 eax
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 151  : 
; 152  : 	return bRet;

  000ac	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _bRet$[ebp]
$LN1@FindProces:

; 153  : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?FindProcessIdByName@@YGHPB_WPAK@Z ENDP			; FindProcessIdByName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\Administrator\Documents\SppExtComObjHook-DLL-20181024\SppExtComObjHook\SppExtComObjPatcher.cpp
;	COMDAT ?PauseResumeThreadList@@YGHKH@Z
_TEXT	SEGMENT
_hThread$1 = -40					; size = 4
_te32$ = -36						; size = 28
_bRet$ = -8						; size = 4
_hThreadSnap$ = -4					; size = 4
_dwOwnerPID$ = 8					; size = 4
_bResumeThread$ = 12					; size = 4
?PauseResumeThreadList@@YGHKH@Z PROC			; PauseResumeThreadList, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __022B0838_SppExtComObjPatcher@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   : 	HANDLE hThreadSnap = nullptr;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hThreadSnap$[ebp], 0

; 85   : 	BOOL bRet = FALSE;

  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 0

; 86   : 	THREADENTRY32 te32 = { 0 };

  00021	33 c0		 xor	 eax, eax
  00023	89 45 dc	 mov	 DWORD PTR _te32$[ebp], eax
  00026	89 45 e0	 mov	 DWORD PTR _te32$[ebp+4], eax
  00029	89 45 e4	 mov	 DWORD PTR _te32$[ebp+8], eax
  0002c	89 45 e8	 mov	 DWORD PTR _te32$[ebp+12], eax
  0002f	89 45 ec	 mov	 DWORD PTR _te32$[ebp+16], eax
  00032	89 45 f0	 mov	 DWORD PTR _te32$[ebp+20], eax
  00035	89 45 f4	 mov	 DWORD PTR _te32$[ebp+24], eax

; 87   : 
; 88   : 	// Take a snapshot of all threads currently in the system. 
; 89   : 	hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);

  00038	6a 00		 push	 0
  0003a	6a 04		 push	 4
  0003c	e8 00 00 00 00	 call	 _CreateToolhelp32Snapshot@8
  00041	89 45 fc	 mov	 DWORD PTR _hThreadSnap$[ebp], eax

; 90   : 	if (hThreadSnap == INVALID_HANDLE_VALUE)

  00044	83 7d fc ff	 cmp	 DWORD PTR _hThreadSnap$[ebp], -1
  00048	75 04		 jne	 SHORT $LN5@PauseResum

; 91   : 		return FALSE;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 7c		 jmp	 SHORT $LN1@PauseResum
$LN5@PauseResum:

; 92   : 
; 93   : 	// Fill in the size of the structure before using it. 
; 94   : 	te32.dwSize = sizeof(THREADENTRY32);

  0004e	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _te32$[ebp], 28 ; 0000001cH

; 95   : 
; 96   : 	// Walk the thread snapshot to find all threads of the process. 
; 97   : 	// If the thread belongs to the process, add its information 
; 98   : 	// to the display list.
; 99   : 	if (Thread32First(hThreadSnap, &te32))

  00055	8d 45 dc	 lea	 eax, DWORD PTR _te32$[ebp]
  00058	50		 push	 eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _hThreadSnap$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 _Thread32First@8
  00062	85 c0		 test	 eax, eax
  00064	74 57		 je	 SHORT $LN6@PauseResum
$LN4@PauseResum:

; 100  : 	{
; 101  : 		do
; 102  : 		{
; 103  : 			if (te32.th32OwnerProcessID == dwOwnerPID)

  00066	8b 45 e8	 mov	 eax, DWORD PTR _te32$[ebp+12]
  00069	3b 45 08	 cmp	 eax, DWORD PTR _dwOwnerPID$[ebp]
  0006c	75 37		 jne	 SHORT $LN2@PauseResum

; 104  : 			{
; 105  : 				HANDLE hThread = OpenThread(THREAD_SUSPEND_RESUME, FALSE, te32.th32ThreadID);

  0006e	8b 45 e4	 mov	 eax, DWORD PTR _te32$[ebp+8]
  00071	50		 push	 eax
  00072	6a 00		 push	 0
  00074	6a 02		 push	 2
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenThread@12
  0007c	89 45 d8	 mov	 DWORD PTR _hThread$1[ebp], eax

; 106  : 
; 107  : 				if (bResumeThread)

  0007f	83 7d 0c 00	 cmp	 DWORD PTR _bResumeThread$[ebp], 0
  00083	74 0c		 je	 SHORT $LN8@PauseResum

; 108  : 					ResumeThread(hThread);

  00085	8b 45 d8	 mov	 eax, DWORD PTR _hThread$1[ebp]
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ResumeThread@4
  0008f	eb 0a		 jmp	 SHORT $LN9@PauseResum
$LN8@PauseResum:

; 109  : 				else
; 110  : 					SuspendThread(hThread);

  00091	8b 45 d8	 mov	 eax, DWORD PTR _hThread$1[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SuspendThread@4
$LN9@PauseResum:

; 111  : 
; 112  : 				CloseHandle(hThread);

  0009b	8b 45 d8	 mov	 eax, DWORD PTR _hThread$1[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@PauseResum:

; 113  : 			}
; 114  : 
; 115  : 		} while (Thread32Next(hThreadSnap, &te32));

  000a5	8d 45 dc	 lea	 eax, DWORD PTR _te32$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _hThreadSnap$[ebp]
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _Thread32Next@8
  000b2	85 c0		 test	 eax, eax
  000b4	75 b0		 jne	 SHORT $LN4@PauseResum

; 116  : 
; 117  : 		bRet = TRUE;

  000b6	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1
$LN6@PauseResum:

; 118  : 	}
; 119  : 
; 120  : 	// Do not forget to clean up the snapshot object. 
; 121  : 	CloseHandle(hThreadSnap);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _hThreadSnap$[ebp]
  000c0	50		 push	 eax
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 122  : 
; 123  : 	return bRet;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]
$LN1@PauseResum:

; 124  : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 08 00	 ret	 8
?PauseResumeThreadList@@YGHKH@Z ENDP			; PauseResumeThreadList
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsstr@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?wcsstr@@YAPA_WPA_WPB_W@Z PROC				; wcsstr, COMDAT

; 559  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __DC9673E3_corecrt_wstring@h
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 560  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

  00013	8b 45 0c	 mov	 eax, DWORD PTR __SubStr$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 _wcsstr
  00020	83 c4 08	 add	 esp, 8

; 561  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?wcsstr@@YAPA_WPA_WPB_W@Z ENDP				; wcsstr
_TEXT	ENDS
END
