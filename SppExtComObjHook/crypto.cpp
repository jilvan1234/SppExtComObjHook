#pragma once

#include "targetver.h"
#include <Windows.h>
#include <WinCrypt.h>
#include <string.h>

// ----------------------------------------------------------------------------
// KMS V5 AES-128 CBC using Win32 Crypto API provider
// ----------------------------------------------------------------------------

// AES 128-bit key blob structure
struct AES_128_KEYBLOB {
	BLOBHEADER hdr;
	DWORD dwKeySize;
	BYTE rgbKeyData[16];
};

// Static AES session key
const AES_128_KEYBLOB AesKeyV5Blob = {
	// Type, Version, Algorithm
	{ PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, 0, CALG_AES_128 },
	// Keylength
	16,
	// Plaintext key data (session key)
	{ 0xCD, 0x7E, 0x79, 0x6F, 0x2A, 0xB2, 0x5D, 0xCB, 0x55, 0xFF, 0xC8, 0xEF, 0x83, 0x64, 0xC4, 0x70, },
};

// KMS V5 AES-128 CBC encryption
BOOL WINAPI AesEncryptMessageV5(const BYTE *IV, BYTE *Message, DWORD *MessageSize, DWORD BufferLen)
{
	BOOL success = FALSE;
	HCRYPTPROV hProv = 0;
	HCRYPTKEY hKey = 0;

	success = CryptAcquireContextW(&hProv, nullptr, nullptr, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) &&
		CryptImportKey(hProv, (BYTE *)&AesKeyV5Blob, sizeof(AesKeyV5Blob), 0, 0, &hKey) &&
		(IV != nullptr ? CryptSetKeyParam(hKey, KP_IV, IV, 0) : TRUE) &&
		CryptEncrypt(hKey, 0, TRUE, 0, Message, MessageSize, BufferLen);

	if (hKey)
		CryptDestroyKey(hKey);
	if (hProv)
		CryptReleaseContext(hProv, 0);

	return success;
}

// KMS V5 AES-128 CBC decryption
BOOL WINAPI AesDecryptMessageV5(const BYTE *IV, BYTE *Message, DWORD *MessageSize)
{
	BOOL success = FALSE;
	HCRYPTPROV hProv = 0;
	HCRYPTKEY hKey = 0;

	success = CryptAcquireContextW(&hProv, nullptr, nullptr, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) &&
		CryptImportKey(hProv, (BYTE *)&AesKeyV5Blob, sizeof(AesKeyV5Blob), 0, 0, &hKey) &&
		(IV != nullptr ? CryptSetKeyParam(hKey, KP_IV, IV, 0) : TRUE) &&
		CryptDecrypt(hKey, 0, TRUE, 0, Message, MessageSize);

	if (hKey)
		CryptDestroyKey(hKey);
	if (hProv)
		CryptReleaseContext(hProv, 0);

	return success;
}

// ----------------------------------------------------------------------------
// KMS V6 modified AES-128 CBC
// ----------------------------------------------------------------------------

// Constants
#define AES_KEY_BYTES 16
#define AES_KEY_WORDS 4
#define AES_BLOCK_BYTES 16
#define AES_BLOCK_WORDS 4
#define AES_ROUNDS 10

// Rijndael S-Box
const BYTE SBox[] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

// Rijndael S-Box inverse
const BYTE InvSBox[] = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

// Precomputed key schedule with V6 mod
// Session key: 0xA9, 0x4A, 0x41, 0x95, 0xE2, 0x01, 0x43, 0x2D, 0x9B, 0xCB, 0x46, 0x04, 0x05, 0xD8, 0x4A, 0x21
const BYTE AesKeyV6[] = {
	0xA9, 0x4A, 0x41, 0x95, 0xE2, 0x01, 0x43, 0x2D, 0x9B, 0xCB, 0x46, 0x04, 0x05, 0xD8, 0x4A, 0x21,
	0xC9, 0x9C, 0xBC, 0xFE, 0x2B, 0x9D, 0xFF, 0xD3, 0xB0, 0x56, 0xB9, 0xD7, 0xB5, 0x8E, 0xF3, 0xF6,
	0xD2, 0x91, 0xFE, 0x2B, 0xF9, 0x0C, 0x01, 0xF8, 0x49, 0x5A, 0xB8, 0x2F, 0xFC, 0xD4, 0x4B, 0xD9,
	0x9E, 0x22, 0xCB, 0x9B, 0x67, 0x2E, 0xCA, 0x63, 0x2E, 0x74, 0x72, 0x4C, 0xD2, 0xA0, 0x39, 0x95,
	0x05, 0x30, 0xE1, 0x2E, 0x11, 0x1E, 0x2B, 0x4D, 0x3F, 0x6A, 0x59, 0x01, 0xED, 0xCA, 0x60, 0x94,
	0x12, 0xE0, 0xC3, 0x7B, 0x03, 0xFE, 0xE8, 0x36, 0x3C, 0x94, 0xB1, 0x37, 0xD1, 0x5E, 0xD1, 0xA3,
	0x63, 0xDE, 0xC9, 0x45, 0x69, 0x20, 0x21, 0x73, 0x55, 0xB4, 0x90, 0x44, 0x84, 0xEA, 0x41, 0xE7,
	0xAD, 0x5D, 0x5D, 0x1A, 0xC4, 0x7D, 0x7C, 0x69, 0x91, 0xC9, 0xEC, 0x2D, 0x15, 0x23, 0xAD, 0xCA,
	0xEF, 0xC8, 0x29, 0x43, 0xCF, 0xB5, 0x55, 0x2A, 0x5E, 0x7C, 0xB9, 0x07, 0x4B, 0x5F, 0x14, 0xCD,
	0xDF, 0x32, 0x94, 0xF0, 0x10, 0x87, 0xC1, 0xDA, 0x4E, 0xFB, 0x78, 0xDD, 0x05, 0xA4, 0x6C, 0x10,
	0xA0, 0x62, 0x5E, 0x9B, 0xB0, 0xE5, 0x9F, 0x41, 0xFE, 0x1E, 0xE7, 0x9C, 0xFB, 0xBA, 0x8B, 0x8C
};

// Bits rotation (little endian)
#define ROR32(v, n) (((v)<<(32-n)) | ((v)>>n))

// Galois finite fields multiplications
#define MULx2(word) (((word & 0x7f7f7f7f) << 1) ^ (((word & 0x80808080) >> 7) * 0x1b))

// Xor RoundKeys shortcut
#define AddRoundKey(d, rk)  XorBuffer(&rk, d)

// Xor 16-bytes source into destination
void WINAPI XorBuffer(const BYTE *source, BYTE *destination)
{
	for (int i = 0; i < AES_BLOCK_WORDS; i++)
		((DWORD *)(destination))[i] ^= ((DWORD *)(source))[i];
}

// Rijndael SubBytes
void WINAPI SubBytes(BYTE *state)
{
	for (int i = 0; i < AES_BLOCK_BYTES; i++)
		state[i] = SBox[state[i]];
}

// Rijndael SubBytes inverse
void WINAPI InvSubBytes(BYTE *state)
{
	for (int i = 0; i < AES_BLOCK_BYTES; i++)
		state[i] = InvSBox[state[i]];
}

// Rijndael ShiftRows
void WINAPI ShiftRows(BYTE *state)
{
	BYTE b[AES_BLOCK_BYTES];

	memcpy(b, state, AES_BLOCK_BYTES);

	for (int i = 0; i < AES_BLOCK_BYTES; i++)
		state[i] = b[(i + ((i & 0x3) << 2)) & 0xf];
}

// Rijndael ShiftRows inverse
void WINAPI InvShiftRows(BYTE *state)
{
	BYTE b[AES_BLOCK_BYTES];

	memcpy(b, state, AES_BLOCK_BYTES);

	for (int i = 0; i < AES_BLOCK_BYTES; i++)
		state[i] = b[(i - ((i & 0x3) << 2)) & 0xf];
}

// Rijndael MixColumns
void WINAPI MixColumns(BYTE *state)
{
	for (int i = 0; i < AES_BLOCK_WORDS; i++)
	{
		DWORD word = ((DWORD *)state)[i];
		DWORD g_mul2 = MULx2(word);

		((DWORD *)state)[i] = g_mul2 ^ ROR32(g_mul2^word, 8) ^ ROR32(word, 16) ^ ROR32(word, 24);
	}
}

// Rijndael MixColumns inverse
void WINAPI InvMixColumns(BYTE *state)
{
	for (int i = 0; i < AES_BLOCK_WORDS; i++)
	{
		DWORD word = ((DWORD *)state)[i];
		DWORD g_mul2 = MULx2(word);
		DWORD g_mul4 = MULx2(g_mul2);
		DWORD g_mul8 = MULx2(g_mul4);
		DWORD g_mul9 = g_mul8 ^ word;
		DWORD g_mulC = g_mul8 ^ g_mul4;

		((DWORD *)state)[i] = g_mulC ^ g_mul2 ^ ROR32(g_mul9 ^ g_mul2, 8) ^ ROR32(g_mulC ^ word, 16) ^ ROR32(g_mul9, 24);
	}
}

// Block cipher encryption
void WINAPI AesEncryptBlock(BYTE *state, const BYTE *RoundKeys)
{
	AddRoundKey(state, RoundKeys[0]);

	for (int i = 16; i < AES_ROUNDS * AES_KEY_BYTES; i += 16)
	{
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, RoundKeys[i]);
	}

	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, RoundKeys[AES_ROUNDS * AES_KEY_BYTES]);
}

// Block cipher decryption
void WINAPI AesDecryptBlock(BYTE *state, const BYTE *RoundKeys)
{
	AddRoundKey(state, RoundKeys[AES_ROUNDS * AES_KEY_BYTES]);

	for (int i = AES_ROUNDS * AES_KEY_BYTES - 16; i > 0; i -= 16)
	{
		InvShiftRows(state);
		InvSubBytes(state);
		AddRoundKey(state, RoundKeys[i]);
		InvMixColumns(state);
	};

	InvShiftRows(state);
	InvSubBytes(state);
	AddRoundKey(state, RoundKeys[0]);
}

// KMS V6 AES-128 CBC (modified) encryption
BOOL WINAPI AesEncryptMessageV6(const BYTE *IV, BYTE *Message, DWORD *MessageSize, DWORD BufferLen)
{
	DWORD PlainTextLen = *MessageSize;
	DWORD Padding = (~PlainTextLen & 0xf) + 1;
	DWORD CipherTextLen = PlainTextLen + Padding;

	if (CipherTextLen > BufferLen)
		return FALSE;

	memset(Message + PlainTextLen, Padding, Padding);

	if (IV != nullptr)
		XorBuffer(IV, Message);

	AesEncryptBlock(Message, AesKeyV6);

	for (int len = CipherTextLen - AES_BLOCK_BYTES; len; len -= AES_BLOCK_BYTES)
	{
		XorBuffer(Message, Message + AES_BLOCK_BYTES);
		Message += AES_BLOCK_BYTES;
		AesEncryptBlock(Message, AesKeyV6);
	}

	(*MessageSize) = CipherTextLen;

	return TRUE;
}

// KMS V6 AES-128 CBC (modified) decryption
BOOL WINAPI AesDecryptMessageV6(const BYTE *IV, BYTE *Message, DWORD *MessageSize)
{
	if (*MessageSize & 0xf)
		return FALSE;

	int PlainTextLen = *MessageSize;

	for (BYTE *block = Message + PlainTextLen - AES_BLOCK_BYTES; block > Message; block -= AES_BLOCK_BYTES)
	{
		AesDecryptBlock(block, AesKeyV6);
		XorBuffer(block - AES_BLOCK_BYTES, block);
	}

	AesDecryptBlock(Message, AesKeyV6);

	if (IV != nullptr)
		XorBuffer(IV, Message);

	if (PlainTextLen == 16 || Message[PlainTextLen - 1] > 16)
	{
		(*MessageSize) = PlainTextLen;
		return TRUE;
	}

	const BYTE *p = &Message[PlainTextLen - 1];
	int Padding = Message[PlainTextLen - 1];
	int PaddingCount = 0;

	for (int i = Padding; i > 0; i--)
	{
		if ((*p--) != Padding)
			break;
		else
			PaddingCount++;
	}

	if (PaddingCount == Padding)
		PlainTextLen -= Padding;

	(*MessageSize) = PlainTextLen;

	return TRUE;
}

// ----------------------------------------------------------------------------
// KMS V4 Rijndael-160 CMAC
// ----------------------------------------------------------------------------

// Precomputed key schedule
// Original key: 0x05, 0x3D, 0x83, 0x07, 0xF9, 0xE5, 0xF0, 0x88, 0xEB, 0x5E, 0xA6, 0x68, 0x6C, 0xF0, 0x37, 0xC7, 0xE4, 0xEF, 0xD2, 0xD6
const BYTE AesKeyV4[] = {
	0x05, 0x3D, 0x83, 0x07, 0xF9, 0xE5, 0xF0, 0x88, 0xEB, 0x5E, 0xA6, 0x68, 0x6C, 0xF0, 0x37, 0xC7,
	0xE4, 0xEF, 0xD2, 0xD6, 0xDB, 0x88, 0x75, 0x6E, 0x22, 0x6D, 0x85, 0xE6, 0xC9, 0x33, 0x23, 0x8E,
	0xA5, 0xC3, 0x14, 0x49, 0x41, 0x2C, 0xC6, 0x9F, 0xA8, 0x3C, 0xAE, 0xED, 0x8A, 0x51, 0x2B, 0x0B,
	0x43, 0x62, 0x08, 0x85, 0xE6, 0xA1, 0x1C, 0xCC, 0xA7, 0x8D, 0xDA, 0x53, 0xF1, 0x6B, 0x43, 0xB1,
	0x7B, 0x3A, 0x68, 0xBA, 0x38, 0x58, 0x60, 0x3F, 0xDE, 0xF9, 0x7C, 0xF3, 0x79, 0x74, 0xA6, 0xA0,
	0x6B, 0x4F, 0xA3, 0x07, 0x10, 0x75, 0xCB, 0xBD, 0x28, 0x2D, 0xAB, 0x82, 0xF6, 0xD4, 0xD7, 0x71,
	0x8F, 0xA0, 0x71, 0xD1, 0x9B, 0xEC, 0x9D, 0x74, 0x8B, 0x99, 0x56, 0xC9, 0xA3, 0xB4, 0xFD, 0x4B,
	0x55, 0x60, 0x2A, 0x3A, 0xDA, 0xC0, 0x5B, 0xEB, 0x01, 0xD5, 0x74, 0x23, 0x8A, 0x4C, 0x22, 0xEA,
	0x29, 0xF8, 0xDF, 0xA1, 0x7C, 0x98, 0xF5, 0x9B, 0xA6, 0x58, 0xAE, 0x70, 0x2B, 0x31, 0x25, 0x07,
	0xA1, 0x7D, 0x07, 0xED, 0x88, 0x85, 0xD8, 0x4C, 0xF4, 0x1D, 0x2D, 0xD7, 0x52, 0x45, 0x83, 0xA7,
	0xC5, 0xDD, 0x79, 0x07, 0x64, 0xA0, 0x7E, 0xEA, 0xEC, 0x25, 0xA6, 0xA6, 0x18, 0x38, 0x8B, 0x71,
	0x4A, 0x7D, 0x08, 0xD6, 0x21, 0xED, 0x8F, 0xD1, 0x45, 0x4D, 0xF1, 0x3B, 0xA9, 0x68, 0x57, 0x9D
};

// Intern Hash
void WINAPI Hash(const BYTE *message, BYTE *hash)
{
	XorBuffer(message, hash);

	AddRoundKey(hash, AesKeyV4[0]);

	for (DWORD i = 1; i < 11; i++)
	{
		SubBytes(hash);
		ShiftRows(hash);
		MixColumns(hash);
		AddRoundKey(hash, AesKeyV4[i << 4]);
	}

	SubBytes(hash);
	ShiftRows(hash);
	AddRoundKey(hash, AesKeyV4[11 << 4]);
}

// Generate KMS V4 custom AES-128 CBC based CMAC
void WINAPI GetV4Cmac(int MessageSize, const BYTE *Message, BYTE *HashOut)
{
	BYTE hash[16] = { 0 };
	BYTE lastblock[16] = { 0 };

	for (; MessageSize >= 16; Message += 16, MessageSize -= 16)
		Hash(Message, hash);

	for (int i = 0; i < MessageSize; i++)
		lastblock[i] = Message[i];
	lastblock[MessageSize] = 0x80;
	Hash(lastblock, hash);

	memcpy(HashOut, hash, 16);
}

// ----------------------------------------------------------------------------
// KMS V5/V6 SHA-256 hash and KMS V6 HMAC-SHA-256 using Win32 crypto API provider
// ----------------------------------------------------------------------------

// Get KMS V5/V6 SHA-256 hash
BOOL WINAPI GetSha256Hash(const BYTE *data, DWORD dataSize, BYTE *Hash)
{
	BOOL success = FALSE;
	HCRYPTPROV hProv = 0;
	HCRYPTHASH hHash = 0;
	DWORD HashSize = 32;

	success = CryptAcquireContextW(&hProv, nullptr, nullptr, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) &&
		CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash) &&
		CryptHashData(hHash, data, dataSize, 0) &&
		CryptGetHashParam(hHash, HP_HASHVAL, Hash, &HashSize, 0);

	if (hHash)
		CryptDestroyHash(hHash);
	if (hProv)
		CryptReleaseContext(hProv, 0);

	return success;
}

// HMAC-SHA256 key blob structure
struct HMAC_KEYBLOB {
	BLOBHEADER hdr;
	DWORD dwKeySize;
	BYTE rgbKeyData[16];
};

// Static HMAC_KEYBLOB structure
HMAC_KEYBLOB HmacKeyblob = {
	// Type, Version, Algorithm
	{ PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, 0, CALG_RC2 },
	// Key length
	16,
	// Key
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }
};

// Get KMS V6 HMAC-SHA256 key from timestamp
void WINAPI GetHmacKey(const ULONG64 *TimeStamp, BYTE *Key)
{
	BYTE Sha256Hash[32];
	ULONG64 seed = (*TimeStamp / 0x00000022816889bdULL) * 0x000000208cbab5edULL + 0x3156cd5ac628477aULL;

	GetSha256Hash((BYTE *)&seed, 8, Sha256Hash);

	memcpy(Key, &Sha256Hash[16], 16);
}

// Get KMS V6 HMAC-SHA256
BOOL WINAPI GetHmacSha256(const BYTE *pbKey, DWORD dwDataLen, const BYTE *pbData, BYTE *pbHash)
{
	BOOL success = FALSE;
	HCRYPTPROV hProv = 0;
	HCRYPTKEY hKey = 0;
	HCRYPTHASH hHmacHash = 0;
	HMAC_INFO HmacInfo = { 0 };
	DWORD dwHmacSize = 32;

	HmacInfo.HashAlgid = CALG_SHA_256;

	if (pbKey != nullptr)
		memcpy(HmacKeyblob.rgbKeyData, pbKey, 16);

	success = CryptAcquireContextW(&hProv, nullptr, nullptr, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) &&
		CryptImportKey(hProv, (PBYTE)&HmacKeyblob, sizeof(HMAC_KEYBLOB), 0, 0, &hKey) &&
		CryptCreateHash(hProv, CALG_HMAC, hKey, 0, &hHmacHash) &&
		CryptSetHashParam(hHmacHash, HP_HMAC_INFO, (PBYTE)&HmacInfo, 0) &&
		CryptHashData(hHmacHash, pbData, dwDataLen, 0) &&
		CryptGetHashParam(hHmacHash, HP_HASHVAL, pbHash, &dwHmacSize, 0);

	if (hKey)
		CryptDestroyKey(hKey);

	if (hHmacHash)
		CryptDestroyHash(hHmacHash);

	if (hProv)
		CryptReleaseContext(hProv, 0);

	return success;
}

// ----------------------------------------------------------------------------
// PRNG using Win32 Crypto API provider
// ----------------------------------------------------------------------------
BOOL WINAPI GetRandomBytes(BYTE *RandomBuffer, DWORD RandomBufferLength)
{
	BOOL success = FALSE;
	HCRYPTPROV hProv = 0;

	success = CryptAcquireContextW(&hProv, nullptr, nullptr, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) &&
		CryptGenRandom(hProv, RandomBufferLength, RandomBuffer);

	if (hProv)
		CryptReleaseContext(hProv, 0);

	return success;
}

// ----------------------------------------------------------------------------
// Public AES encryption/decryption routines
// ----------------------------------------------------------------------------
BOOL WINAPI AesEncryptMessage(DWORD Version, const BYTE *IV, BYTE *Message, DWORD *MessageSize, DWORD MessageBufLen)
{
	switch (Version)
	{
	case 0x00050000:
		return AesEncryptMessageV5(IV, Message, MessageSize, MessageBufLen);
		break;

	case 0x00060000:
		return AesEncryptMessageV6(IV, Message, MessageSize, MessageBufLen);
		break;

	default:
		return FALSE;
	}
}

BOOL WINAPI AesDecryptMessage(DWORD Version, const BYTE *IV, BYTE *Message, DWORD *MessageSize)
{
	switch (Version)
	{
	case 0x00050000:
		return AesDecryptMessageV5(IV, Message, MessageSize);
		break;

	case 0x00060000:
		return AesDecryptMessageV6(IV, Message, MessageSize);
		break;

	default:
		return FALSE;
	}
}
