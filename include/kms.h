#pragma once

#include "targetver.h"
#include <Windows.h>

// Buffer sizes and length
#define PID_BUFFER_LEN 64
#define HOST_BUFFER_LEN 64
#define HWID_MIN 0x1111111111111111ULL
#define HWID_MAX 0xFFFFFFFFFFFFFFFEULL

// Typdefs
typedef unsigned long long QWORD;

// GUID and base product name bindings
#pragma warning(push)
#pragma warning(disable:4510) // C4510: 'class' : default constructor could not be generated
#pragma warning(disable:4512) // C4512: 'class' : assignment operator could not be generated
#pragma warning(disable:4610) // C4610: object 'class' can never be instantiated - user-defined constructor required

struct GUIDName
{
	const GUID guid;
	const WCHAR *name;
};
#pragma warning(pop)

#define GUID_FORMAT "%08lx-%04hx-%04hx-%02hx%02hx-%02hx%02hx%02hx%02hx%02hx%02hx"
#define GUID_ARG(guid) guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]

// Known Application IDs
#define APP_INDEX_WINDOWS  0
#define APP_INDEX_OFFICE14 1
#define APP_INDEX_OFFICE15 2
#define APP_INDEX_OFFICE16 3
#define APP_INDEX_OFFICE19 4
#define APP_INDEX_MAX      5

// KMS server settings
#define KEY_EMULATION L"KMS_Emulation"
#define KEY_AI L"KMS_ActivationInterval"
#define KEY_RI L"KMS_RenewalInterval"
#define KEY_HWID L"KMS_HWID"

#define DEFAULT_AI 120
#define DEFAULT_RI 10080
#define DEFAULT_HWID 0x3A1C049600B60076
#define RANDOM_PID L"Random"

#define PARAM_ROOTKEY L"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options"

struct KMSServerSettings
{
	BOOL KMSEnabled;
	DWORD ActivationInterval;
	DWORD RenewalInterval;
	QWORD KMSHWID;
	WCHAR PIDs[APP_INDEX_MAX][PID_BUFFER_LEN];
};

// Defines for KMS data structures
#define KMS_VERSION_4 0x00040000
#define KMS_VERSION_5 0x00050000
#define KMS_VERSION_6 0x00060000
#define MAX_REQUEST_SIZE 272 // header(4) + iv(16) + BaseRequest(236) + AES Padding(4 for V5/V6), rounded up to mod 16
#define MAX_RESPONSE_SIZE 304 // header(4) + iv(16) + BaseResponse(up to 172) + remaining(up to 88) + AES Padding(up to 16), rounded up to mod 16

// Assistent macro
#define BOOLIFY(e) (!!(e))

#pragma warning(push)
#pragma warning(disable:4201)	// C4201: nonstandard extension used : nameless struct/union

// Base request
struct KMSBaseRequest
{
	union
	{
		DWORD Version;					// KMS Protocol Version
		struct 
		{
			WORD MinorVer;				// KMS Protocol Minor Version
			WORD MajorVer;				// KMS Protocol Major Version
		};
	};
	BOOL VMInfo;						// Client is a virtual machine instance if non-zero
	DWORD LicenseStatus;				// Licensing status, 0x00 (Unlicensed), 0x01 (Licensed), 0x02 (OOBGrace), 0x03 (OOTGrace), 0x04 (NonGenuineGrace), 0x05 (Notification), 0x06 (ExtendedGrace)
	DWORD RemainingGrace;				// Interval until the licensing status goes into worse state (in minutes)
	GUID AppID;							// Application ID
	GUID SkuID;							// Activation configuration ID (aka Product SKU ID)
	GUID KmsID;							// Key Management Service ID
	GUID CMID;							// Client machine ID
	DWORD RequiredCount;				// Minimum number of clients required to connect to a KMS host for KMS activation (aka N count policy)
	FILETIME TimeStamp;					// Client request timestamp
	GUID CMID_prev;						// Previous client machine ID, NULL_GUID if the CMID has never been regenerated by rearming
	WCHAR MachineName[HOST_BUFFER_LEN];	// Fully qualified DNS name of the client machine (max 63 chars according to RFC)
};

// Base response
struct KMSBaseResponse
{
	union
	{
		DWORD Version;					// KMS Protocol Version
		struct 
		{
			WORD MinorVer;				// KMS Protocol Minor Version
			WORD MajorVer;				// KMS Protocol Major Version
		};
	};
	DWORD PIDSize;						// Size of PIDData in bytes, including null terminator
	WCHAR PIDData[PID_BUFFER_LEN];		// KMS Product Key ID. Unicode string including null terminator
	GUID CMID;							// Client machine ID
	FILETIME TimeStamp;					// Trusted client request timestamp (same as request timestamp)
	DWORD CurrentCount;					// Current KMS count
	DWORD VLActivationInterval;			// Activation interval policy
	DWORD VLRenewalInterval;			// Renewal interval policy
};
#pragma warning(pop)

// KMS V4 request
struct KMSV4Request
{
	KMSBaseRequest BaseRequest;			// Base request data
	BYTE MAC[16];						// Rijndael-160 CMAC blob
};

// KMS V4 response
struct KMSV4Response
{
	KMSBaseResponse BaseResponse;		// Base response data
	BYTE MAC[16];						// Rijndael-160 CMAC blob
};

// KMS V5/V6 request
#define KMSV5Request KMSV6Request
struct KMSV6Request
{
	DWORD Version;						// Packet version header
	BYTE IV[16];						// AES-128 CBC initialization vector
	KMSBaseRequest BaseRequest;			// Encrypted base request data
};

// KMS V5 response
struct KMSV5Response
{
	DWORD Version;						// Packet version header
	BYTE IV[16];						// AES-128 CBC initialization vector
	KMSBaseResponse BaseResponse;		// Encrypted base response data
	BYTE Xor[16];						// Xored IV with random key
	BYTE Sha256[32];					// SHA-256 hash of random key
};

// KMS V6 response
struct KMSV6Response
{
	DWORD Version;						// Packet version header
	BYTE IV[16];						// AES-128 CBC initialization vector
	KMSBaseResponse BaseResponse;		// Encrypted base response data
	BYTE Xor[16];						// Xored IV with random key
	BYTE Sha256[32];					// SHA-256 hash of random key
	BYTE Unknown[8];					// Unknown data (might be HW hash of KMS host)
	BYTE Xor2[16];						// Xored IV without random key (for SHA-256 hash verification)
	BYTE HMacSha256[16];				// Last 16 bytes of HMAC-SHA-256
};

// Function prototype
DWORD WINAPI ReadRegistrySettings(void);
int WINAPI ActivationResponse(int requestSize, unsigned char *request, int *responseSize, unsigned char **response);
void WINAPI GetKMSPID(WCHAR* const KMSPID, KMSBaseRequest* const Request);
